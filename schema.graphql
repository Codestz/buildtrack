"""Apply transformations to file with image type"""
directive @resizeImage(crop: ResizeImageDirectiveCropOptions, flip: ResizeImageDirectiveFlipOptions, progressive: Boolean, resize: ResizeImageDirectiveResizeOptions, rotate: Int) on FIELD

enum AggregationFunctionType {
  ANY_VALUE
  AVG
  COUNT
  GROUP_CONCAT
  MAX
  MIN
  STDDEV_POP
  STDDEV_SAMP
  SUM
  VAR_POP
  VAR_SAMP
}

"""Data related to the indoor air quality of the building."""
type AirQuality {
  _description: String

  """Reference to the building where the air quality measurement was taken."""
  building_id: Building

  """Concentration of CO2."""
  co2: Int
  createdAt: DateTime
  deletedAt: Int
  id: ID

  """Date when the air quality measurement was taken."""
  measurement_date: DateTime

  """Concentration of PM10 particles."""
  pm10: Int

  """Concentration of PM2.5 particles."""
  pm25: Int
  updatedAt: DateTime
}

"""AirQuality relation input"""
input AirQualityBuilding_idRelationInput {
  create: AirQuality_BuildingCreateInput
}

"""AirQuality relation input"""
input AirQualityBuilding_idUpdateRelationInput {
  update: AirQuality_BuildingUpdateInput
}

"""AirQuality create input"""
input AirQualityCreateInput {
  building_id: AirQualityBuilding_idRelationInput!

  """Concentration of CO2."""
  co2: Int

  """Date when the air quality measurement was taken."""
  measurement_date: DateTime

  """Concentration of PM10 particles."""
  pm10: Int

  """Concentration of PM2.5 particles."""
  pm25: Int
}

"""AirQuality create many input"""
input AirQualityCreateManyInput {
  """Concentration of CO2."""
  co2: Int

  """Date when the air quality measurement was taken."""
  measurement_date: DateTime

  """Concentration of PM10 particles."""
  pm10: Int

  """Concentration of PM2.5 particles."""
  pm25: Int
}

"""AirQuality delete input"""
input AirQualityDeleteInput {
  force: Boolean
  id: ID
}

"""AirQualityFieldsPermissions create input"""
input AirQualityFieldsPermissions {
  co2: Boolean
  createdAt: Boolean
  measurement_date: Boolean
  pm10: Boolean
  pm25: Boolean
  updatedAt: Boolean
}

input AirQualityFilter {
  AND: [AirQualityFilter!]
  OR: [AirQualityFilter!]
  _fullText: String
  building_id: BuildingFilter
  co2: IntPredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  measurement_date: DateTimePredicate
  pm10: IntPredicate
  pm25: IntPredicate
  updatedAt: DateTimePredicate
}

input AirQualityGroupBy {
  first: Int
  having: Having
  last: Int
  query: AirQualityGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input AirQualityGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  co2: [GroupByField!]
  createdAt: [GroupByField!]
  id: [GroupByField!]
  measurement_date: [GroupByField!]
  pm10: [GroupByField!]
  pm25: [GroupByField!]
  updatedAt: [GroupByField!]
}

input AirQualityKeyFilter {
  id: ID
}

"""AirQualityListResponse output"""
type AirQualityListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [AirQuality!]!
}

"""AirQualityManyResponse output"""
type AirQualityManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [AirQuality!]!
}

"""No longer supported. Use `sort` instead."""
enum AirQualityOrderBy {
  co2_ASC
  co2_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  measurement_date_ASC
  measurement_date_DESC
  pm10_ASC
  pm10_DESC
  pm25_ASC
  pm25_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""AirQuality subscription payload"""
type AirQualityPayload {
  mutation: MutationType!
  node: AirQuality
  previousValues: AirQuality
  updatedFields: [String]
}

input AirQualityRelationFilter {
  every: AirQualityFilter
  none: AirQualityFilter
  some: AirQualityFilter
}

input AirQualitySort {
  building_id: BuildingSort
  co2: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  measurement_date: SortOrder
  pm10: SortOrder
  pm25: SortOrder
  updatedAt: SortOrder
}

"""AirQuality subscription filter"""
input AirQualitySubscriptionFilter {
  mutation_in: [MutationType]
  node: AirQualityFilter
  updatedFields: UpdatedFieldsFilter
}

"""AirQuality update input"""
input AirQualityUpdateByFilterInput {
  co2: [UpdateByFilterIntInput]
  pm10: [UpdateByFilterIntInput]
  pm25: [UpdateByFilterIntInput]
}

"""AirQuality update input"""
input AirQualityUpdateInput {
  building_id: AirQualityBuilding_idUpdateRelationInput

  """Concentration of CO2."""
  co2: Int
  id: ID

  """Date when the air quality measurement was taken."""
  measurement_date: DateTime

  """Concentration of PM10 particles."""
  pm10: Int

  """Concentration of PM2.5 particles."""
  pm25: Int
}

"""Buildings create input from AirQuality"""
input AirQuality_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput!
  ComplianceRecords: BuildingsComplianceRecordsRelationInput!
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput!
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput!
  Equipment: BuildingsEquipmentRelationInput!
  Improvements: BuildingsImprovementsRelationInput!
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput!
  Permits: BuildingsPermitsRelationInput!
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from AirQuality"""
input AirQuality_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

input AirQuality_PermissionFilter {
  AND: [AirQuality_PermissionFilter!]
  OR: [AirQuality_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  co2: IntPredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  measurement_date: DateTimePredicate
  pm10: IntPredicate
  pm25: IntPredicate
  updatedAt: DateTimePredicate
}

input AirQuality_PermissionRelationFilter {
  every: AirQuality_PermissionFilter
  none: AirQuality_PermissionFilter
  some: AirQuality_PermissionFilter
}

type ApiToken {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  id: ID
  name: String
  roles(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse
  updatedAt: DateTime
}

"""ApiTokens create input"""
input ApiTokenCreateInput {
  name: String!
  roles: ApiTokensRolesRelationInput
}

"""ApiTokens delete input"""
input ApiTokenDeleteInput {
  force: Boolean
  id: ID
}

input ApiTokenFilter {
  AND: [ApiTokenFilter!]
  OR: [ApiTokenFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  roles: RoleRelationFilter
  token: StringPredicate
  updatedAt: DateTimePredicate
}

input ApiTokenGroupBy {
  first: Int
  having: Having
  last: Int
  query: ApiTokenGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input ApiTokenGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  id: [GroupByField!]
  name: [GroupByField!]
  roles: RoleGroupByQuery
  updatedAt: [GroupByField!]
}

input ApiTokenKeyFilter {
  id: ID
  name: String
}

"""ApiTokenListResponse output"""
type ApiTokenListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [ApiToken!]!
}

"""ApiTokenManyResponse output"""
type ApiTokenManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [ApiToken!]!
}

"""No longer supported. Use `sort` instead."""
enum ApiTokenOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  token_ASC
  token_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""ApiTokens subscription payload"""
type ApiTokenPayload {
  mutation: MutationType!
  node: ApiToken
  previousValues: ApiToken
  updatedFields: [String]
}

input ApiTokenRelationFilter {
  every: ApiTokenFilter
  none: ApiTokenFilter
  some: ApiTokenFilter
}

"""API Token Response"""
type ApiTokenResponse {
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  id: ID
  name: String
  roles(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse
  token: String!
  updatedAt: DateTime
}

input ApiTokenSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

"""ApiTokens subscription filter"""
input ApiTokenSubscriptionFilter {
  mutation_in: [MutationType]
  node: ApiTokenFilter
  updatedFields: UpdatedFieldsFilter
}

"""ApiTokens update input"""
input ApiTokenUpdateByFilterInput {
  name: [UpdateByFilterStringInput]
  token: [UpdateByFilterStringInput]
}

"""ApiTokens update input"""
input ApiTokenUpdateInput {
  id: ID
  name: String
  roles: ApiTokensRolesUpdateRelationInput
}

input ApiToken_PermissionFilter {
  AND: [ApiToken_PermissionFilter!]
  OR: [ApiToken_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  roles: Role_PermissionRelationFilter
  token: StringPredicate
  updatedAt: DateTimePredicate
}

input ApiToken_PermissionRelationFilter {
  every: ApiToken_PermissionFilter
  none: ApiToken_PermissionFilter
  some: ApiToken_PermissionFilter
}

"""ApiTokens relation input"""
input ApiTokensRolesRelationInput {
  connect: [RoleKeyFilter!]
  create: [ApiTokens_RoleCreateInput]
}

"""ApiTokens relation input"""
input ApiTokensRolesUpdateRelationInput {
  connect: [RoleKeyFilter!]
  create: [ApiTokens_RoleCreateInput]
  disconnect: [RoleKeyFilter!]
  reconnect: [RoleKeyFilter!]
  update: [ApiTokens_RoleUpdateInput]
}

"""Roles create input from apiTokens"""
input ApiTokens_RoleCreateInput {
  apiTokens: RolesApiTokensRelationInput
  authenticationProfiles: RolesAuthenticationProfilesRelationInput
  description: String
  name: String!
  permissions: PermissionsInput
  users: RolesUsersRelationInput
}

"""Roles update input from apiTokens"""
input ApiTokens_RoleUpdateInput {
  data: RoleUpdateInput!
  filter: RoleKeyFilter
}

"""Application"""
type Application {
  appType: String!
  createdAt: DateTime!
  description: String
  displayName: String
  id: ID!
  name: String!
  status: ApplicationStatusEnum!
}

"""ApplicationDeleteMutationInput"""
input ApplicationDeleteMutationInput {
  force: Boolean
  id: String!
}

"""Application install input"""
input ApplicationInstallInput {
  appType: String!
  description: String
  displayName: String
  name: String!
  status: ApplicationStatusEnum = INACTIVE
}

"""ApplicationListResponse output"""
type ApplicationListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Application!]!
}

"""Application Status Enum"""
enum ApplicationStatusEnum {
  ACTIVE
  INACTIVE
}

"""Application update input"""
input ApplicationUpdateInput {
  description: String
  displayName: String
  id: String!
  name: String
  status: ApplicationStatusEnum
}

"""Async Session"""
type AsyncSession {
  sessionId: String!
}

type AsyncSessionStatusResponse {
  message: String
  status: String!
}

"""Auth response"""
type Auth {
  accessToken: String
  accessTokenExpiresAt: Int
  idToken: String
  idTokenExpiresAt: Int
  refreshToken: String
}

type AuthenticationProfile {
  _description: String
  attributes: AuthenticationProfileAttributes
  audiences: [String]
  clientId: String
  createdAt: DateTime
  createdBy: User
  databaseName: String
  deletedAt: Int
  domain: String
  id: ID
  managementDomain: String
  name: String
  roles(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean
  type: String
  updatedAt: DateTime
}

"""Authentication Profile Attributes"""
union AuthenticationProfileAttributes = CognitoAuthProfileAttributes

"""Authentication profile connection options"""
type AuthenticationProfileConnectionOptions {
  facebook: FacebookOptions
  github: GithubOptions
  google: GoogleOptions
}

"""Authentication profile connection options input"""
input AuthenticationProfileConnectionsOptionsInput {
  facebook: FacebookOptionsInput
  github: GithubOptionsInput
  google: GoogleOptionsInput
}

"""AuthenticationProfiles create input"""
input AuthenticationProfileCreateInput {
  audiences: [String]
  clientId: String
  databaseName: String
  domain: String
  managementDomain: String
  name: String!
  roles: AuthenticationProfilesRolesRelationInput
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean = false
  type: String = "8BASE"
}

"""AuthenticationProfiles create many input"""
input AuthenticationProfileCreateManyInput {
  audiences: [String]
  clientId: String
  databaseName: String
  domain: String
  managementDomain: String
  name: String!
  roles: AuthenticationProfilesRolesManyRelationInput
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean = false
  type: String = "8BASE"
}

"""AuthenticationProfiles delete input"""
input AuthenticationProfileDeleteInput {
  force: Boolean
  id: ID
}

input AuthenticationProfileFilter {
  AND: [AuthenticationProfileFilter!]
  OR: [AuthenticationProfileFilter!]
  _fullText: String
  clientId: StringPredicate
  createdAt: DateTimePredicate
  createdBy: UserFilter
  databaseName: StringPredicate
  deletedAt: IntPredicate
  domain: StringPredicate
  id: IDPredicate
  managementDomain: StringPredicate
  name: StringPredicate
  roles: RoleRelationFilter
  secret: StringPredicate
  selfSignUpEnabled: BoolPredicate
  type: StringPredicate
  updatedAt: DateTimePredicate
}

input AuthenticationProfileGroupBy {
  first: Int
  having: Having
  last: Int
  query: AuthenticationProfileGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input AuthenticationProfileGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  audiences: [GroupByField!]
  clientId: [GroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  databaseName: [GroupByField!]
  domain: [GroupByField!]
  id: [GroupByField!]
  managementDomain: [GroupByField!]
  name: [GroupByField!]
  roles: RoleGroupByQuery
  secret: [GroupByField!]
  selfSignUpEmailDomains: [GroupByField!]
  selfSignUpEnabled: [GroupByField!]
  type: [GroupByField!]
  updatedAt: [GroupByField!]
}

input AuthenticationProfileKeyFilter {
  id: ID
  name: String
}

"""AuthenticationProfileListResponse output"""
type AuthenticationProfileListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [AuthenticationProfile!]!
}

"""AuthenticationProfileManyResponse output"""
type AuthenticationProfileManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [AuthenticationProfile!]!
}

"""No longer supported. Use `sort` instead."""
enum AuthenticationProfileOrderBy {
  clientId_ASC
  clientId_DESC
  createdAt_ASC
  createdAt_DESC
  databaseName_ASC
  databaseName_DESC
  deletedAt_ASC
  deletedAt_DESC
  domain_ASC
  domain_DESC
  id_ASC
  id_DESC
  managementDomain_ASC
  managementDomain_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  selfSignUpEnabled_ASC
  selfSignUpEnabled_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""AuthenticationProfiles subscription payload"""
type AuthenticationProfilePayload {
  mutation: MutationType!
  node: AuthenticationProfile
  previousValues: AuthenticationProfile
  updatedFields: [String]
}

input AuthenticationProfileRelationFilter {
  every: AuthenticationProfileFilter
  none: AuthenticationProfileFilter
  some: AuthenticationProfileFilter
}

input AuthenticationProfileSort {
  clientId: SortOrder
  createdAt: SortOrder
  createdBy: UserSort
  databaseName: SortOrder
  deletedAt: SortOrder
  domain: SortOrder
  id: SortOrder
  managementDomain: SortOrder
  name: SortOrder
  secret: SortOrder
  selfSignUpEnabled: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

"""AuthenticationProfiles subscription filter"""
input AuthenticationProfileSubscriptionFilter {
  mutation_in: [MutationType]
  node: AuthenticationProfileFilter
  updatedFields: UpdatedFieldsFilter
}

"""AuthenticationProfiles update input"""
input AuthenticationProfileUpdateByFilterInput {
  audiences: [UpdateByFilterListStringInput]
  clientId: [UpdateByFilterStringInput]
  databaseName: [UpdateByFilterStringInput]
  domain: [UpdateByFilterStringInput]
  managementDomain: [UpdateByFilterStringInput]
  name: [UpdateByFilterStringInput]
  secret: [UpdateByFilterStringInput]
  selfSignUpEmailDomains: [UpdateByFilterListStringInput]
  selfSignUpEnabled: [UpdateByFilterBooleanSwitchInput]
  type: [UpdateByFilterStringInput]
}

"""AuthenticationProfiles update input"""
input AuthenticationProfileUpdateInput {
  audiences: [String]
  clientId: String
  databaseName: String
  domain: String
  id: ID
  managementDomain: String
  name: String
  roles: AuthenticationProfilesRolesUpdateRelationInput
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean
  type: String
}

input AuthenticationProfile_PermissionFilter {
  AND: [AuthenticationProfile_PermissionFilter!]
  OR: [AuthenticationProfile_PermissionFilter!]
  _fullText: String
  clientId: StringPredicate
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  databaseName: StringPredicate
  deletedAt: IntPredicate
  domain: StringPredicate
  id: IDPredicate
  managementDomain: StringPredicate
  name: StringPredicate
  roles: Role_PermissionRelationFilter
  secret: StringPredicate
  selfSignUpEnabled: BoolPredicate
  type: StringPredicate
  updatedAt: DateTimePredicate
}

input AuthenticationProfile_PermissionRelationFilter {
  every: AuthenticationProfile_PermissionFilter
  none: AuthenticationProfile_PermissionFilter
  some: AuthenticationProfile_PermissionFilter
}

"""AuthenticationProfiles relation input"""
input AuthenticationProfilesRolesManyRelationInput {
  connect: [RoleKeyFilter!]
}

"""AuthenticationProfiles relation input"""
input AuthenticationProfilesRolesRelationInput {
  connect: [RoleKeyFilter!]
  create: [AuthenticationProfiles_RoleCreateInput]
}

"""AuthenticationProfiles relation input"""
input AuthenticationProfilesRolesUpdateRelationInput {
  connect: [RoleKeyFilter!]
  create: [AuthenticationProfiles_RoleCreateInput]
  disconnect: [RoleKeyFilter!]
  reconnect: [RoleKeyFilter!]
  update: [AuthenticationProfiles_RoleUpdateInput]
}

"""Roles create input from authenticationProfiles"""
input AuthenticationProfiles_RoleCreateInput {
  apiTokens: RolesApiTokensRelationInput
  authenticationProfiles: RolesAuthenticationProfilesRelationInput
  description: String
  name: String!
  permissions: PermissionsInput
  users: RolesUsersRelationInput
}

"""Roles update input from authenticationProfiles"""
input AuthenticationProfiles_RoleUpdateInput {
  data: RoleUpdateInput!
  filter: RoleKeyFilter
}

type AuthenticationSetting {
  _description: String
  allowedCallbacks: [String]
  allowedLogouts: [String]
  allowedWebOrigins: [String]
  connections: AuthenticationProfileConnectionOptions
  createdAt: DateTime
  createdBy: User
  updatedAt: DateTime
}

input AuthenticationSettingFilter {
  AND: [AuthenticationSettingFilter!]
  OR: [AuthenticationSettingFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  updatedAt: DateTimePredicate
}

"""AuthenticationSettings subscription payload"""
type AuthenticationSettingPayload {
  mutation: MutationType!
  node: AuthenticationSetting
  previousValues: AuthenticationSetting
  updatedFields: [String]
}

"""AuthenticationSettings subscription filter"""
input AuthenticationSettingSubscriptionFilter {
  mutation_in: [MutationType]
  node: AuthenticationSettingFilter
  updatedFields: UpdatedFieldsFilter
}

"""AuthenticationSettings update input"""
input AuthenticationSettingUpdateInput {
  allowedCallbacks: [String]
  allowedLogouts: [String]
  allowedWebOrigins: [String]
  connections: AuthenticationProfileConnectionsOptionsInput
}

"""Users create input from avatar"""
input Avatar_UserCreateInput {
  Notifications: UsersNotificationsRelationInput!
  Reports: UsersReportsRelationInput!
  SearchCriteria: UsersSearchCriteriaRelationInput!
  SubscriptionsApps: UsersSubscriptionsAppsRelationInput!
  WorkOrders: UsersWorkOrdersRelationInput
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users update input from avatar"""
input Avatar_UserUpdateInput {
  data: UserUpdateInput!
  filter: UserKeyFilter
}

type AwsSignInfoResponse {
  fields: JSON!
  path: String!
  url: String!
}

"""The `BigInt` scalar type represents whole numeric values."""
scalar BigInt

input BigIntPredicateHaving {
  AND: [BigIntPredicateHaving!]
  OR: [BigIntPredicateHaving!]
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: BigInt
  lte: BigInt
  not_equals: BigInt
  not_in: [BigInt!]
}

type BillingCurrentPlanResponse {
  customerId: String
  displayName: String
  features: [BillingPlanFeature]
  id: ID
  limitMetrics: [BillingPlanLimitMetrics]
  name: String
  nextPlan: BillingNextPlanResponse
  paymentDate: DateTime
  paymentDetails: String
  pdf: String
  price: Int
  status: WorkspaceStatus
  subscriptionId: String
  trialEnd: DateTime
}

enum BillingDetailsOrigin {
  member
  organization
  workspace
}

type BillingDetailsResponse {
  brand: String
  expMonth: Int
  expYear: Int
  last4: String
  origin: BillingDetailsOrigin!
}

type BillingInvoiceItem {
  amountDue: Float
  amountPaid: Float
  amountRemaining: Float
  description: String
  endingBalance: Float
  id: ID!
  invoicePdf: String
  number: String
  organization: BillingInvoiceItemOrganizationInfo
  paid: Boolean
  periodEnd: DateTime
  periodStart: DateTime
  plan: BillingInvoiceItemPlanInfo
  project: BillingInvoiceItemProjectInfo
  status: String
  total: Float
}

type BillingInvoiceItemOrganizationInfo {
  id: ID
  name: String
}

type BillingInvoiceItemPlanInfo {
  displayName: String
  id: ID
  name: String
}

type BillingInvoiceItemProjectInfo {
  id: ID
  name: String
}

enum BillingInvoicesListFilterType {
  CUSTOMER
  PROJECT
}

"""BillingInvoicesListResponse output"""
type BillingInvoicesListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [BillingInvoiceItem!]!
}

type BillingLimitMetricItem {
  description: String
  displayName: String
  name: String
  showPriority: Int
  tooltip: String
  unit: String
}

type BillingMetricOverageItem {
  value: Float
  warning: String
}

type BillingMetricUsageItem {
  limitMetric: BillingLimitMetricItem
  overage: BillingMetricOverageItem
  value: Float
}

type BillingMetricUsageQuotaItem {
  limitMetric: BillingLimitMetricItem
  value: Float
}

"""BillingMetricUsageQuotasListResponse output"""
type BillingMetricUsageQuotasListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [BillingMetricUsageQuotaItem!]!
}

input BillingMetricUsagesListFilter {
  entryDate: DateTimePredicate!
}

"""BillingMetricUsagesListResponse output"""
type BillingMetricUsagesListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [BillingMetricUsageItem!]!
}

type BillingNextPlanResponse {
  displayName: String
  id: ID
  name: String
  pdf: String
  price: Int
}

type BillingPlanBaseInfo {
  capacity: String
  description: String
  displayName: String
  featuresTitle: String
  id: ID
  isCustom: Boolean
  isLegacy: Boolean
  limitMetrics: [BillingPlanLimitMetricItem]
  name: String
  pdf: String
  price: Int
  status: String
}

type BillingPlanFeature {
  displayName: String
  isActive: Boolean
  name: String
}

type BillingPlanLimitMetricItem {
  displayName: String
  hardLimit: Float
  name: String
  overagePrice: Int
  softLimit: Float
}

type BillingPlanLimitMetrics {
  hardLimit: String
  id: String
  name: String
  overagePrice: String
  softLimit: String
}

"""BillingPlanUpdateMutationInput"""
input BillingPlanUpdateMutationInput {
  planId: ID!
  projectID: ID!
}

input BoolPredicate {
  equals: Boolean
  is_empty: Boolean
  is_not_empty: Boolean
  not_equals: Boolean
}

input BoolPredicateHaving {
  AND: [BoolPredicateHaving!]
  OR: [BoolPredicateHaving!]
  equals: Boolean
  is_empty: Boolean
  is_not_empty: Boolean
  not_equals: Boolean
}

"""Represents a commercial building with its basic information."""
type Building {
  AirQuality(after: String, before: String, filter: AirQualityFilter, first: Int, groupBy: AirQualityGroupBy, last: Int, orderBy: [AirQualityOrderBy], skip: Int, sort: [AirQualitySort!]): AirQualityListResponse
  Certifications(after: String, before: String, filter: CertificationFilter, first: Int, groupBy: CertificationGroupBy, last: Int, orderBy: [CertificationOrderBy], skip: Int, sort: [CertificationSort!]): CertificationListResponse
  ComplianceRecords(after: String, before: String, filter: ComplianceRecordFilter, first: Int, groupBy: ComplianceRecordGroupBy, last: Int, orderBy: [ComplianceRecordOrderBy], skip: Int, sort: [ComplianceRecordSort!]): ComplianceRecordListResponse
  Documents(after: String, before: String, filter: DocumentFilter, first: Int, groupBy: DocumentGroupBy, last: Int, orderBy: [DocumentOrderBy], skip: Int, sort: [DocumentSort!]): DocumentListResponse
  EnergyEfficiency(after: String, before: String, filter: EnergyEfficiencyFilter, first: Int, groupBy: EnergyEfficiencyGroupBy, last: Int, orderBy: [EnergyEfficiencyOrderBy], skip: Int, sort: [EnergyEfficiencySort!]): EnergyEfficiencyListResponse
  EnvironmentalData(after: String, before: String, filter: EnvironmentalDatumFilter, first: Int, groupBy: EnvironmentalDatumGroupBy, last: Int, orderBy: [EnvironmentalDatumOrderBy], skip: Int, sort: [EnvironmentalDatumSort!]): EnvironmentalDatumListResponse
  Equipment(after: String, before: String, filter: EquipmentFilter, first: Int, groupBy: EquipmentGroupBy, last: Int, orderBy: [EquipmentOrderBy], skip: Int, sort: [EquipmentSort!]): EquipmentListResponse
  Improvements(after: String, before: String, filter: ImprovementFilter, first: Int, groupBy: ImprovementGroupBy, last: Int, orderBy: [ImprovementOrderBy], skip: Int, sort: [ImprovementSort!]): ImprovementListResponse
  MaintenanceRecords(after: String, before: String, filter: MaintenanceRecordFilter, first: Int, groupBy: MaintenanceRecordGroupBy, last: Int, orderBy: [MaintenanceRecordOrderBy], skip: Int, sort: [MaintenanceRecordSort!]): MaintenanceRecordListResponse
  Permits(after: String, before: String, filter: PermitFilter, first: Int, groupBy: PermitGroupBy, last: Int, orderBy: [PermitOrderBy], skip: Int, sort: [PermitSort!]): PermitListResponse
  WorkOrders(after: String, before: String, filter: WorkOrderFilter, first: Int, groupBy: WorkOrderGroupBy, last: Int, orderBy: [WorkOrderOrderBy], skip: Int, sort: [WorkOrderSort!]): WorkOrderListResponse
  _description: String

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String
  createdAt: DateTime
  deletedAt: Int
  id: ID

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String
  updatedAt: DateTime

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings create input"""
input BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput
  ComplianceRecords: BuildingsComplianceRecordsRelationInput
  Documents: BuildingsDocumentsRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings create many input"""
input BuildingCreateManyInput {
  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings delete input"""
input BuildingDeleteInput {
  force: Boolean
  id: ID
}

"""BuildingFieldsPermissions create input"""
input BuildingFieldsPermissions {
  address: Boolean
  city: Boolean
  country: Boolean
  createdAt: Boolean
  name: Boolean
  state: Boolean
  updatedAt: Boolean
  zip_code: Boolean
}

input BuildingFilter {
  AND: [BuildingFilter!]
  AirQuality: AirQualityRelationFilter
  Certifications: CertificationRelationFilter
  ComplianceRecords: ComplianceRecordRelationFilter
  Documents: DocumentRelationFilter
  EnergyEfficiency: EnergyEfficiencyRelationFilter
  EnvironmentalData: EnvironmentalDatumRelationFilter
  Equipment: EquipmentRelationFilter
  Improvements: ImprovementRelationFilter
  MaintenanceRecords: MaintenanceRecordRelationFilter
  OR: [BuildingFilter!]
  Permits: PermitRelationFilter
  WorkOrders: WorkOrderRelationFilter
  _fullText: String
  address: StringPredicate
  city: StringPredicate
  country: StringPredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  state: StringPredicate
  updatedAt: DateTimePredicate
  zip_code: StringPredicate
}

input BuildingGroupBy {
  first: Int
  having: Having
  last: Int
  query: BuildingGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input BuildingGroupByQuery {
  AirQuality: AirQualityGroupByQuery
  Certifications: CertificationGroupByQuery
  ComplianceRecords: ComplianceRecordGroupByQuery
  Documents: DocumentGroupByQuery
  EnergyEfficiency: EnergyEfficiencyGroupByQuery
  EnvironmentalData: EnvironmentalDatumGroupByQuery
  Equipment: EquipmentGroupByQuery
  Improvements: ImprovementGroupByQuery
  MaintenanceRecords: MaintenanceRecordGroupByQuery
  Permits: PermitGroupByQuery
  WorkOrders: WorkOrderGroupByQuery
  _group: [GroupIdentifiersGroupByField!]
  address: [GroupByField!]
  city: [GroupByField!]
  country: [GroupByField!]
  createdAt: [GroupByField!]
  id: [GroupByField!]
  name: [GroupByField!]
  state: [GroupByField!]
  updatedAt: [GroupByField!]
  zip_code: [GroupByField!]
}

input BuildingKeyFilter {
  id: ID
  name: String
}

"""BuildingListResponse output"""
type BuildingListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Building!]!
}

"""BuildingManyResponse output"""
type BuildingManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Building!]!
}

"""No longer supported. Use `sort` instead."""
enum BuildingOrderBy {
  address_ASC
  address_DESC
  city_ASC
  city_DESC
  country_ASC
  country_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  state_ASC
  state_DESC
  updatedAt_ASC
  updatedAt_DESC
  zip_code_ASC
  zip_code_DESC
}

"""Buildings subscription payload"""
type BuildingPayload {
  mutation: MutationType!
  node: Building
  previousValues: Building
  updatedFields: [String]
}

input BuildingSort {
  address: SortOrder
  city: SortOrder
  country: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  state: SortOrder
  updatedAt: SortOrder
  zip_code: SortOrder
}

"""Buildings subscription filter"""
input BuildingSubscriptionFilter {
  mutation_in: [MutationType]
  node: BuildingFilter
  updatedFields: UpdatedFieldsFilter
}

"""Buildings update input"""
input BuildingUpdateByFilterInput {
  address: [UpdateByFilterStringInput]
  city: [UpdateByFilterStringInput]
  country: [UpdateByFilterStringInput]
  name: [UpdateByFilterStringInput]
  state: [UpdateByFilterStringInput]
  zip_code: [UpdateByFilterStringInput]
}

"""Buildings update input"""
input BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String
  id: ID

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

input Building_PermissionFilter {
  AND: [Building_PermissionFilter!]
  AirQuality: AirQuality_PermissionRelationFilter
  Certifications: Certification_PermissionRelationFilter
  ComplianceRecords: ComplianceRecord_PermissionRelationFilter
  Documents: Document_PermissionRelationFilter
  EnergyEfficiency: EnergyEfficiency_PermissionRelationFilter
  EnvironmentalData: EnvironmentalDatum_PermissionRelationFilter
  Equipment: Equipment_PermissionRelationFilter
  Improvements: Improvement_PermissionRelationFilter
  MaintenanceRecords: MaintenanceRecord_PermissionRelationFilter
  OR: [Building_PermissionFilter!]
  Permits: Permit_PermissionRelationFilter
  WorkOrders: WorkOrder_PermissionRelationFilter
  _fullText: String
  address: StringPredicate
  city: StringPredicate
  country: StringPredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  state: StringPredicate
  updatedAt: DateTimePredicate
  zip_code: StringPredicate
}

"""AirQuality create input from building_id"""
input Building_id_AirQualityCreateInput {
  building_id: AirQualityBuilding_idRelationInput

  """Concentration of CO2."""
  co2: Int

  """Date when the air quality measurement was taken."""
  measurement_date: DateTime

  """Concentration of PM10 particles."""
  pm10: Int

  """Concentration of PM2.5 particles."""
  pm25: Int
}

"""AirQuality update input from building_id"""
input Building_id_AirQualityUpdateInput {
  data: AirQualityUpdateInput!
  filter: AirQualityKeyFilter
}

"""Certifications create input from building_id"""
input Building_id_CertificationCreateInput {
  building_id: CertificationsBuilding_idRelationInput

  """Type of certification obtained (e.g., LEED, Energy Star)."""
  certification_type: String

  """Date when the certification expires."""
  expiry_date: DateTime

  """Date when the certification was issued."""
  issue_date: DateTime
}

"""Certifications update input from building_id"""
input Building_id_CertificationUpdateInput {
  data: CertificationUpdateInput!
  filter: CertificationKeyFilter
}

"""ComplianceRecords create input from building_id"""
input Building_id_ComplianceRecordCreateInput {
  building_id: ComplianceRecordsBuilding_idRelationInput

  """
  Type of compliance requirement (e.g., fire safety, health regulations).
  """
  compliance_type: String

  """Date when the compliance was last checked."""
  last_checked_date: DateTime

  """
  Current status of compliance (e.g., compliant, non-compliant, pending).
  """
  status: String
}

"""ComplianceRecords update input from building_id"""
input Building_id_ComplianceRecordUpdateInput {
  data: ComplianceRecordUpdateInput!
  filter: ComplianceRecordKeyFilter
}

"""Documents create input from building_id"""
input Building_id_DocumentCreateInput {
  building_id: DocumentsBuilding_idRelationInput

  """Type of document (e.g., permit, certificate, inspection report)."""
  document_type: String

  """Path to the stored document file."""
  file_path: String

  """Date when the document was uploaded."""
  uploaded_date: DateTime
}

"""Documents update input from building_id"""
input Building_id_DocumentUpdateInput {
  data: DocumentUpdateInput!
  filter: DocumentKeyFilter
}

"""EnergyEfficiency create input from building_id"""
input Building_id_EnergyEfficiencyCreateInput {
  building_id: EnergyEfficiencyBuilding_idRelationInput

  """Amount of energy consumed."""
  energy_consumption: Int

  """Amount of energy saved."""
  energy_savings: Int

  """Date when the energy efficiency was measured."""
  measurement_date: DateTime
}

"""EnergyEfficiency update input from building_id"""
input Building_id_EnergyEfficiencyUpdateInput {
  data: EnergyEfficiencyUpdateInput!
  filter: EnergyEfficiencyKeyFilter
}

"""EnvironmentalData create input from building_id"""
input Building_id_EnvironmentalDatumCreateInput {
  building_id: EnvironmentalDataBuilding_idRelationInput

  """Date when the environmental parameter was measured."""
  measurement_date: DateTime

  """
  Environmental parameter being measured (e.g., noise level, water quality).
  """
  parameter: String

  """Value of the environmental parameter."""
  value: Int
}

"""EnvironmentalData update input from building_id"""
input Building_id_EnvironmentalDatumUpdateInput {
  data: EnvironmentalDatumUpdateInput!
  filter: EnvironmentalDatumKeyFilter
}

"""Equipment create input from building_id"""
input Building_id_EquipmentCreateInput {
  building_id: EquipmentBuilding_idRelationInput

  """Date when the equipment was installed."""
  installation_date: DateTime

  """Name of the equipment."""
  name: String

  """Type of the equipment."""
  type: String
}

"""Equipment update input from building_id"""
input Building_id_EquipmentUpdateInput {
  data: EquipmentUpdateInput!
  filter: EquipmentKeyFilter
}

"""Improvements create input from building_id"""
input Building_id_ImprovementCreateInput {
  building_id: ImprovementsBuilding_idRelationInput

  """Cost of the improvement."""
  cost: Int

  """Date when the improvement was made."""
  date: DateTime

  """Description of the improvement made."""
  description: String
}

"""Improvements update input from building_id"""
input Building_id_ImprovementUpdateInput {
  data: ImprovementUpdateInput!
  filter: ImprovementKeyFilter
}

"""MaintenanceRecords create input from building_id"""
input Building_id_MaintenanceRecordCreateInput {
  building_id: MaintenanceRecordsBuilding_idRelationInput

  """Date when the maintenance activity was performed."""
  date: DateTime

  """Description of the maintenance activity."""
  description: String
}

"""MaintenanceRecords update input from building_id"""
input Building_id_MaintenanceRecordUpdateInput {
  data: MaintenanceRecordUpdateInput!
  filter: MaintenanceRecordKeyFilter
}

"""Permits create input from building_id"""
input Building_id_PermitCreateInput {
  building_id: PermitsBuilding_idRelationInput

  """Date when the permit expires."""
  expiry_date: DateTime

  """Date when the permit was issued."""
  issue_date: DateTime

  """Unique identifier for the permit."""
  permit_number: String
}

"""Permits update input from building_id"""
input Building_id_PermitUpdateInput {
  data: PermitUpdateInput!
  filter: PermitKeyFilter
}

"""WorkOrders create input from building_id"""
input Building_id_WorkOrderCreateInput {
  """Date when the task was assigned."""
  assigned_date: DateTime
  building_id: WorkOrdersBuilding_idRelationInput

  """Date when the task was completed."""
  completion_date: DateTime!

  """Current status of the work order (e.g., pending, completed)."""
  status: String

  """Description of the maintenance task."""
  task_description: String
  vendor_id: WorkOrdersVendor_idRelationInput!
}

"""WorkOrders update input from building_id"""
input Building_id_WorkOrderUpdateInput {
  data: WorkOrderUpdateInput!
  filter: WorkOrderKeyFilter
}

"""Buildings relation input"""
input BuildingsAirQualityRelationInput {
  create: [Building_id_AirQualityCreateInput]
}

"""Buildings relation input"""
input BuildingsAirQualityUpdateRelationInput {
  update: [Building_id_AirQualityUpdateInput]
}

"""Buildings relation input"""
input BuildingsCertificationsRelationInput {
  create: [Building_id_CertificationCreateInput]
}

"""Buildings relation input"""
input BuildingsCertificationsUpdateRelationInput {
  update: [Building_id_CertificationUpdateInput]
}

"""Buildings relation input"""
input BuildingsComplianceRecordsRelationInput {
  create: [Building_id_ComplianceRecordCreateInput]
}

"""Buildings relation input"""
input BuildingsComplianceRecordsUpdateRelationInput {
  update: [Building_id_ComplianceRecordUpdateInput]
}

"""Buildings relation input"""
input BuildingsDocumentsRelationInput {
  create: [Building_id_DocumentCreateInput]
}

"""Buildings relation input"""
input BuildingsDocumentsUpdateRelationInput {
  update: [Building_id_DocumentUpdateInput]
}

"""Buildings relation input"""
input BuildingsEnergyEfficiencyRelationInput {
  create: [Building_id_EnergyEfficiencyCreateInput]
}

"""Buildings relation input"""
input BuildingsEnergyEfficiencyUpdateRelationInput {
  update: [Building_id_EnergyEfficiencyUpdateInput]
}

"""Buildings relation input"""
input BuildingsEnvironmentalDataRelationInput {
  create: [Building_id_EnvironmentalDatumCreateInput]
}

"""Buildings relation input"""
input BuildingsEnvironmentalDataUpdateRelationInput {
  update: [Building_id_EnvironmentalDatumUpdateInput]
}

"""Buildings relation input"""
input BuildingsEquipmentRelationInput {
  create: [Building_id_EquipmentCreateInput]
}

"""Buildings relation input"""
input BuildingsEquipmentUpdateRelationInput {
  update: [Building_id_EquipmentUpdateInput]
}

"""Buildings relation input"""
input BuildingsImprovementsRelationInput {
  create: [Building_id_ImprovementCreateInput]
}

"""Buildings relation input"""
input BuildingsImprovementsUpdateRelationInput {
  update: [Building_id_ImprovementUpdateInput]
}

"""Buildings relation input"""
input BuildingsMaintenanceRecordsRelationInput {
  create: [Building_id_MaintenanceRecordCreateInput]
}

"""Buildings relation input"""
input BuildingsMaintenanceRecordsUpdateRelationInput {
  update: [Building_id_MaintenanceRecordUpdateInput]
}

"""Buildings relation input"""
input BuildingsPermitsRelationInput {
  create: [Building_id_PermitCreateInput]
}

"""Buildings relation input"""
input BuildingsPermitsUpdateRelationInput {
  update: [Building_id_PermitUpdateInput]
}

"""Buildings relation input"""
input BuildingsWorkOrdersRelationInput {
  create: [Building_id_WorkOrderCreateInput]
}

"""Buildings relation input"""
input BuildingsWorkOrdersUpdateRelationInput {
  update: [Building_id_WorkOrderUpdateInput]
}

"""Records certifications obtained by the building."""
type Certification {
  _description: String

  """Reference to the building that obtained the certification."""
  building_id: Building

  """Type of certification obtained (e.g., LEED, Energy Star)."""
  certification_type: String
  createdAt: DateTime
  deletedAt: Int

  """Date when the certification expires."""
  expiry_date: DateTime
  id: ID

  """Date when the certification was issued."""
  issue_date: DateTime
  updatedAt: DateTime
}

"""Certifications create input"""
input CertificationCreateInput {
  building_id: CertificationsBuilding_idRelationInput

  """Type of certification obtained (e.g., LEED, Energy Star)."""
  certification_type: String

  """Date when the certification expires."""
  expiry_date: DateTime

  """Date when the certification was issued."""
  issue_date: DateTime
}

"""Certifications create many input"""
input CertificationCreateManyInput {
  """Type of certification obtained (e.g., LEED, Energy Star)."""
  certification_type: String

  """Date when the certification expires."""
  expiry_date: DateTime

  """Date when the certification was issued."""
  issue_date: DateTime
}

"""Certifications delete input"""
input CertificationDeleteInput {
  force: Boolean
  id: ID
}

"""CertificationFieldsPermissions create input"""
input CertificationFieldsPermissions {
  certification_type: Boolean
  createdAt: Boolean
  expiry_date: Boolean
  issue_date: Boolean
  updatedAt: Boolean
}

input CertificationFilter {
  AND: [CertificationFilter!]
  OR: [CertificationFilter!]
  _fullText: String
  building_id: BuildingFilter
  certification_type: StringPredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  expiry_date: DateTimePredicate
  id: IDPredicate
  issue_date: DateTimePredicate
  updatedAt: DateTimePredicate
}

input CertificationGroupBy {
  first: Int
  having: Having
  last: Int
  query: CertificationGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input CertificationGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  certification_type: [GroupByField!]
  createdAt: [GroupByField!]
  expiry_date: [GroupByField!]
  id: [GroupByField!]
  issue_date: [GroupByField!]
  updatedAt: [GroupByField!]
}

input CertificationKeyFilter {
  id: ID
}

"""CertificationListResponse output"""
type CertificationListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Certification!]!
}

"""CertificationManyResponse output"""
type CertificationManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Certification!]!
}

"""No longer supported. Use `sort` instead."""
enum CertificationOrderBy {
  certification_type_ASC
  certification_type_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  expiry_date_ASC
  expiry_date_DESC
  id_ASC
  id_DESC
  issue_date_ASC
  issue_date_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Certifications subscription payload"""
type CertificationPayload {
  mutation: MutationType!
  node: Certification
  previousValues: Certification
  updatedFields: [String]
}

input CertificationRelationFilter {
  every: CertificationFilter
  none: CertificationFilter
  some: CertificationFilter
}

input CertificationSort {
  building_id: BuildingSort
  certification_type: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  expiry_date: SortOrder
  id: SortOrder
  issue_date: SortOrder
  updatedAt: SortOrder
}

"""Certifications subscription filter"""
input CertificationSubscriptionFilter {
  mutation_in: [MutationType]
  node: CertificationFilter
  updatedFields: UpdatedFieldsFilter
}

"""Certifications update input"""
input CertificationUpdateByFilterInput {
  certification_type: [UpdateByFilterStringInput]
}

"""Certifications update input"""
input CertificationUpdateInput {
  building_id: CertificationsBuilding_idUpdateRelationInput

  """Type of certification obtained (e.g., LEED, Energy Star)."""
  certification_type: String

  """Date when the certification expires."""
  expiry_date: DateTime
  id: ID

  """Date when the certification was issued."""
  issue_date: DateTime
}

input Certification_PermissionFilter {
  AND: [Certification_PermissionFilter!]
  OR: [Certification_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  certification_type: StringPredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  expiry_date: DateTimePredicate
  id: IDPredicate
  issue_date: DateTimePredicate
  updatedAt: DateTimePredicate
}

input Certification_PermissionRelationFilter {
  every: Certification_PermissionFilter
  none: Certification_PermissionFilter
  some: Certification_PermissionFilter
}

"""Certifications relation input"""
input CertificationsBuilding_idRelationInput {
  create: Certifications_BuildingCreateInput
}

"""Certifications relation input"""
input CertificationsBuilding_idUpdateRelationInput {
  update: Certifications_BuildingUpdateInput
}

"""Buildings create input from Certifications"""
input Certifications_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput
  ComplianceRecords: BuildingsComplianceRecordsRelationInput
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from Certifications"""
input Certifications_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""ChangePasswordInput"""
input ChangePasswordInput {
  authProfileId: ID!
  email: String!
  newPassword: String!
  oldPassword: String!
  refreshToken: String!
}

"""Authentication Profile Attributes for Cognito"""
type CognitoAuthProfileAttributes {
  clientAuthDomain: String
}

"""Tracks compliance with various regulatory requirements."""
type ComplianceRecord {
  _description: String

  """Reference to the building for which compliance is tracked."""
  building_id: Building

  """
  Type of compliance requirement (e.g., fire safety, health regulations).
  """
  compliance_type: String
  createdAt: DateTime
  deletedAt: Int
  id: ID

  """Date when the compliance was last checked."""
  last_checked_date: DateTime

  """
  Current status of compliance (e.g., compliant, non-compliant, pending).
  """
  status: String
  updatedAt: DateTime
}

"""ComplianceRecords create input"""
input ComplianceRecordCreateInput {
  building_id: ComplianceRecordsBuilding_idRelationInput

  """
  Type of compliance requirement (e.g., fire safety, health regulations).
  """
  compliance_type: String

  """Date when the compliance was last checked."""
  last_checked_date: DateTime

  """
  Current status of compliance (e.g., compliant, non-compliant, pending).
  """
  status: String
}

"""ComplianceRecords create many input"""
input ComplianceRecordCreateManyInput {
  """
  Type of compliance requirement (e.g., fire safety, health regulations).
  """
  compliance_type: String

  """Date when the compliance was last checked."""
  last_checked_date: DateTime

  """
  Current status of compliance (e.g., compliant, non-compliant, pending).
  """
  status: String
}

"""ComplianceRecords delete input"""
input ComplianceRecordDeleteInput {
  force: Boolean
  id: ID
}

"""ComplianceRecordFieldsPermissions create input"""
input ComplianceRecordFieldsPermissions {
  compliance_type: Boolean
  createdAt: Boolean
  last_checked_date: Boolean
  status: Boolean
  updatedAt: Boolean
}

input ComplianceRecordFilter {
  AND: [ComplianceRecordFilter!]
  OR: [ComplianceRecordFilter!]
  _fullText: String
  building_id: BuildingFilter
  compliance_type: StringPredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  last_checked_date: DateTimePredicate
  status: StringPredicate
  updatedAt: DateTimePredicate
}

input ComplianceRecordGroupBy {
  first: Int
  having: Having
  last: Int
  query: ComplianceRecordGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input ComplianceRecordGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  compliance_type: [GroupByField!]
  createdAt: [GroupByField!]
  id: [GroupByField!]
  last_checked_date: [GroupByField!]
  status: [GroupByField!]
  updatedAt: [GroupByField!]
}

input ComplianceRecordKeyFilter {
  id: ID
}

"""ComplianceRecordListResponse output"""
type ComplianceRecordListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [ComplianceRecord!]!
}

"""ComplianceRecordManyResponse output"""
type ComplianceRecordManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [ComplianceRecord!]!
}

"""No longer supported. Use `sort` instead."""
enum ComplianceRecordOrderBy {
  compliance_type_ASC
  compliance_type_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  last_checked_date_ASC
  last_checked_date_DESC
  status_ASC
  status_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""ComplianceRecords subscription payload"""
type ComplianceRecordPayload {
  mutation: MutationType!
  node: ComplianceRecord
  previousValues: ComplianceRecord
  updatedFields: [String]
}

input ComplianceRecordRelationFilter {
  every: ComplianceRecordFilter
  none: ComplianceRecordFilter
  some: ComplianceRecordFilter
}

input ComplianceRecordSort {
  building_id: BuildingSort
  compliance_type: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  last_checked_date: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

"""ComplianceRecords subscription filter"""
input ComplianceRecordSubscriptionFilter {
  mutation_in: [MutationType]
  node: ComplianceRecordFilter
  updatedFields: UpdatedFieldsFilter
}

"""ComplianceRecords update input"""
input ComplianceRecordUpdateByFilterInput {
  compliance_type: [UpdateByFilterStringInput]
  status: [UpdateByFilterStringInput]
}

"""ComplianceRecords update input"""
input ComplianceRecordUpdateInput {
  building_id: ComplianceRecordsBuilding_idUpdateRelationInput

  """
  Type of compliance requirement (e.g., fire safety, health regulations).
  """
  compliance_type: String
  id: ID

  """Date when the compliance was last checked."""
  last_checked_date: DateTime

  """
  Current status of compliance (e.g., compliant, non-compliant, pending).
  """
  status: String
}

input ComplianceRecord_PermissionFilter {
  AND: [ComplianceRecord_PermissionFilter!]
  OR: [ComplianceRecord_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  compliance_type: StringPredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  last_checked_date: DateTimePredicate
  status: StringPredicate
  updatedAt: DateTimePredicate
}

input ComplianceRecord_PermissionRelationFilter {
  every: ComplianceRecord_PermissionFilter
  none: ComplianceRecord_PermissionFilter
  some: ComplianceRecord_PermissionFilter
}

"""ComplianceRecords relation input"""
input ComplianceRecordsBuilding_idRelationInput {
  create: ComplianceRecords_BuildingCreateInput
}

"""ComplianceRecords relation input"""
input ComplianceRecordsBuilding_idUpdateRelationInput {
  update: ComplianceRecords_BuildingUpdateInput
}

"""Buildings create input from ComplianceRecords"""
input ComplianceRecords_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput!
  ComplianceRecords: BuildingsComplianceRecordsRelationInput
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from ComplianceRecords"""
input ComplianceRecords_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Computed field mode"""
enum ComputedFieldMode {
  STORED
  VIRTUAL
}

"""Custom Table Field Type"""
type CustomTableField {
  computedMode: ComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: FieldType
  fieldTypeAttributes: FieldTypeAttributes
  isList: Boolean!
  isRequired: Boolean!
  isUnique: Boolean
  name: String
}

"""
A date string, such as `2007-12-25`, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Date Field Attributes"""
type DateFieldTypeAttributes {
  format: String!
}

enum DatePartFunctionType {
  DATE
  DAY
  DAY_NAME
  DAY_OF_MONTH
  DAY_OF_WEEK
  DAY_OF_YEAR
  HOUR
  LAST_DAY
  MICROSECOND
  MINUTE
  MONTH
  MONTH_NAME
  QUARTER
  SECOND
  TIME
  WEEK
  WEEK_DAY
  WEEK_OF_YEAR
  YEAR
  YEAR_WEEK
}

input DatePredicateHaving {
  AND: [DatePredicateHaving!]
  OR: [DatePredicateHaving!]
  equals: Date
  gt: Date
  gte: Date
  in: [Date!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Date
  lte: Date
  not_equals: Date
  not_in: [Date!]
}

input DateRelativePredicateType {
  op: RelativePredicateOpEnum
  unit: RelativePredicateUnitEnum
  value: String!
}

input DateRelativePredicates {
  gt: DateRelativePredicateType
  gte: DateRelativePredicateType
  lt: DateRelativePredicateType
  lte: DateRelativePredicateType
}

"""
A date-time string at UTC, such as `2007-12-25T16:15:30Z`, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimePredicate {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: DateTime
  lte: DateTime
  not_equals: DateTime
  not_in: [DateTime!]
  relative: DateRelativePredicates
}

input DateTimePredicateHaving {
  AND: [DateTimePredicateHaving!]
  OR: [DateTimePredicateHaving!]
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: DateTime
  lte: DateTime
  not_equals: DateTime
  not_in: [DateTime!]
}

"""Date Type Format Enum"""
enum DateTypeFormatEnum {
  DATE
  DATETIME
}

"""DeployDataResponse"""
type DeployDataResponse {
  buildName: String!
  uploadBuildUrl: String!
  uploadMetaDataUrl: String!
}

enum DeployModeEnum {
  FULL
  FUNCTIONS
  MIGRATIONS
  ONLY_PLUGINS
  ONLY_PROJECT
}

"""DeployOptions"""
input DeployOptions {
  extensionNames: [String]
  mode: DeployModeEnum = ONLY_PROJECT
  nodeVersion: String
  pluginNames: [String]
}

enum DeployStatusEnum {
  compiling
  complete_error
  complete_success
  deploying
  initialize
  preparing
}

"""DeployStatusResult"""
type DeployStatusResult {
  message: String
  status: DeployStatusEnum!
}

"""DeployingBuildInput"""
input DeployingBuildInput {
  buildName: String!
  options: DeployOptions
}

type DeploymentABItemResponse {
  dateDeploy: DateTime
  statusDeploy: String
  urlDeploy: String
  userDeploy: SystemMemberAccountInfo
  versionDeploy: String
  versionFrontEnd: String
}

"""
Stores building-related documents such as permits, certificates, and inspection reports.
"""
type Document {
  _description: String

  """Reference to the building related to the document."""
  building_id: Building
  createdAt: DateTime
  deletedAt: Int

  """Type of document (e.g., permit, certificate, inspection report)."""
  document_type: String

  """Path to the stored document file."""
  file_path: String
  id: ID
  updatedAt: DateTime

  """Date when the document was uploaded."""
  uploaded_date: DateTime
}

"""Documents create input"""
input DocumentCreateInput {
  building_id: DocumentsBuilding_idRelationInput

  """Type of document (e.g., permit, certificate, inspection report)."""
  document_type: String

  """Path to the stored document file."""
  file_path: String

  """Date when the document was uploaded."""
  uploaded_date: DateTime
}

"""Documents create many input"""
input DocumentCreateManyInput {
  """Type of document (e.g., permit, certificate, inspection report)."""
  document_type: String

  """Path to the stored document file."""
  file_path: String

  """Date when the document was uploaded."""
  uploaded_date: DateTime
}

"""Documents delete input"""
input DocumentDeleteInput {
  force: Boolean
  id: ID
}

"""DocumentFieldsPermissions create input"""
input DocumentFieldsPermissions {
  createdAt: Boolean
  document_type: Boolean
  file_path: Boolean
  updatedAt: Boolean
  uploaded_date: Boolean
}

input DocumentFilter {
  AND: [DocumentFilter!]
  OR: [DocumentFilter!]
  _fullText: String
  building_id: BuildingFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  document_type: StringPredicate
  file_path: StringPredicate
  id: IDPredicate
  updatedAt: DateTimePredicate
  uploaded_date: DateTimePredicate
}

input DocumentGroupBy {
  first: Int
  having: Having
  last: Int
  query: DocumentGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input DocumentGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  createdAt: [GroupByField!]
  document_type: [GroupByField!]
  file_path: [GroupByField!]
  id: [GroupByField!]
  updatedAt: [GroupByField!]
  uploaded_date: [GroupByField!]
}

input DocumentKeyFilter {
  id: ID
}

"""DocumentListResponse output"""
type DocumentListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Document!]!
}

"""DocumentManyResponse output"""
type DocumentManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Document!]!
}

"""No longer supported. Use `sort` instead."""
enum DocumentOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  document_type_ASC
  document_type_DESC
  file_path_ASC
  file_path_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  uploaded_date_ASC
  uploaded_date_DESC
}

"""Documents subscription payload"""
type DocumentPayload {
  mutation: MutationType!
  node: Document
  previousValues: Document
  updatedFields: [String]
}

input DocumentRelationFilter {
  every: DocumentFilter
  none: DocumentFilter
  some: DocumentFilter
}

input DocumentSort {
  building_id: BuildingSort
  createdAt: SortOrder
  deletedAt: SortOrder
  document_type: SortOrder
  file_path: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  uploaded_date: SortOrder
}

"""Documents subscription filter"""
input DocumentSubscriptionFilter {
  mutation_in: [MutationType]
  node: DocumentFilter
  updatedFields: UpdatedFieldsFilter
}

"""Documents update input"""
input DocumentUpdateByFilterInput {
  document_type: [UpdateByFilterStringInput]
  file_path: [UpdateByFilterStringInput]
}

"""Documents update input"""
input DocumentUpdateInput {
  building_id: DocumentsBuilding_idUpdateRelationInput

  """Type of document (e.g., permit, certificate, inspection report)."""
  document_type: String

  """Path to the stored document file."""
  file_path: String
  id: ID

  """Date when the document was uploaded."""
  uploaded_date: DateTime
}

input Document_PermissionFilter {
  AND: [Document_PermissionFilter!]
  OR: [Document_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  document_type: StringPredicate
  file_path: StringPredicate
  id: IDPredicate
  updatedAt: DateTimePredicate
  uploaded_date: DateTimePredicate
}

input Document_PermissionRelationFilter {
  every: Document_PermissionFilter
  none: Document_PermissionFilter
  some: Document_PermissionFilter
}

"""Documents relation input"""
input DocumentsBuilding_idRelationInput {
  create: Documents_BuildingCreateInput
}

"""Documents relation input"""
input DocumentsBuilding_idUpdateRelationInput {
  update: Documents_BuildingUpdateInput
}

"""Buildings create input from Documents"""
input Documents_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput
  ComplianceRecords: BuildingsComplianceRecordsRelationInput
  Documents: BuildingsDocumentsRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from Documents"""
input Documents_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Metrics related to the building's energy efficiency."""
type EnergyEfficiency {
  _description: String

  """Reference to the building where the energy efficiency was measured."""
  building_id: Building
  createdAt: DateTime
  deletedAt: Int

  """Amount of energy consumed."""
  energy_consumption: Int

  """Amount of energy saved."""
  energy_savings: Int
  id: ID

  """Date when the energy efficiency was measured."""
  measurement_date: DateTime
  updatedAt: DateTime
}

"""EnergyEfficiency relation input"""
input EnergyEfficiencyBuilding_idRelationInput {
  create: EnergyEfficiency_BuildingCreateInput
}

"""EnergyEfficiency relation input"""
input EnergyEfficiencyBuilding_idUpdateRelationInput {
  update: EnergyEfficiency_BuildingUpdateInput
}

"""EnergyEfficiency create input"""
input EnergyEfficiencyCreateInput {
  building_id: EnergyEfficiencyBuilding_idRelationInput

  """Amount of energy consumed."""
  energy_consumption: Int

  """Amount of energy saved."""
  energy_savings: Int

  """Date when the energy efficiency was measured."""
  measurement_date: DateTime
}

"""EnergyEfficiency create many input"""
input EnergyEfficiencyCreateManyInput {
  """Amount of energy consumed."""
  energy_consumption: Int

  """Amount of energy saved."""
  energy_savings: Int

  """Date when the energy efficiency was measured."""
  measurement_date: DateTime
}

"""EnergyEfficiency delete input"""
input EnergyEfficiencyDeleteInput {
  force: Boolean
  id: ID
}

"""EnergyEfficiencyFieldsPermissions create input"""
input EnergyEfficiencyFieldsPermissions {
  createdAt: Boolean
  energy_consumption: Boolean
  energy_savings: Boolean
  measurement_date: Boolean
  updatedAt: Boolean
}

input EnergyEfficiencyFilter {
  AND: [EnergyEfficiencyFilter!]
  OR: [EnergyEfficiencyFilter!]
  _fullText: String
  building_id: BuildingFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  energy_consumption: IntPredicate
  energy_savings: IntPredicate
  id: IDPredicate
  measurement_date: DateTimePredicate
  updatedAt: DateTimePredicate
}

input EnergyEfficiencyGroupBy {
  first: Int
  having: Having
  last: Int
  query: EnergyEfficiencyGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input EnergyEfficiencyGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  createdAt: [GroupByField!]
  energy_consumption: [GroupByField!]
  energy_savings: [GroupByField!]
  id: [GroupByField!]
  measurement_date: [GroupByField!]
  updatedAt: [GroupByField!]
}

input EnergyEfficiencyKeyFilter {
  id: ID
}

"""EnergyEfficiencyListResponse output"""
type EnergyEfficiencyListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [EnergyEfficiency!]!
}

"""EnergyEfficiencyManyResponse output"""
type EnergyEfficiencyManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [EnergyEfficiency!]!
}

"""No longer supported. Use `sort` instead."""
enum EnergyEfficiencyOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  energy_consumption_ASC
  energy_consumption_DESC
  energy_savings_ASC
  energy_savings_DESC
  id_ASC
  id_DESC
  measurement_date_ASC
  measurement_date_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""EnergyEfficiency subscription payload"""
type EnergyEfficiencyPayload {
  mutation: MutationType!
  node: EnergyEfficiency
  previousValues: EnergyEfficiency
  updatedFields: [String]
}

input EnergyEfficiencyRelationFilter {
  every: EnergyEfficiencyFilter
  none: EnergyEfficiencyFilter
  some: EnergyEfficiencyFilter
}

input EnergyEfficiencySort {
  building_id: BuildingSort
  createdAt: SortOrder
  deletedAt: SortOrder
  energy_consumption: SortOrder
  energy_savings: SortOrder
  id: SortOrder
  measurement_date: SortOrder
  updatedAt: SortOrder
}

"""EnergyEfficiency subscription filter"""
input EnergyEfficiencySubscriptionFilter {
  mutation_in: [MutationType]
  node: EnergyEfficiencyFilter
  updatedFields: UpdatedFieldsFilter
}

"""EnergyEfficiency update input"""
input EnergyEfficiencyUpdateByFilterInput {
  energy_consumption: [UpdateByFilterIntInput]
  energy_savings: [UpdateByFilterIntInput]
}

"""EnergyEfficiency update input"""
input EnergyEfficiencyUpdateInput {
  building_id: EnergyEfficiencyBuilding_idUpdateRelationInput

  """Amount of energy consumed."""
  energy_consumption: Int

  """Amount of energy saved."""
  energy_savings: Int
  id: ID

  """Date when the energy efficiency was measured."""
  measurement_date: DateTime
}

"""Buildings create input from EnergyEfficiency"""
input EnergyEfficiency_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput!
  ComplianceRecords: BuildingsComplianceRecordsRelationInput!
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from EnergyEfficiency"""
input EnergyEfficiency_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

input EnergyEfficiency_PermissionFilter {
  AND: [EnergyEfficiency_PermissionFilter!]
  OR: [EnergyEfficiency_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  energy_consumption: IntPredicate
  energy_savings: IntPredicate
  id: IDPredicate
  measurement_date: DateTimePredicate
  updatedAt: DateTimePredicate
}

input EnergyEfficiency_PermissionRelationFilter {
  every: EnergyEfficiency_PermissionFilter
  none: EnergyEfficiency_PermissionFilter
  some: EnergyEfficiency_PermissionFilter
}

type EnvironmentBackupItem {
  name: String!
  size: Float!
}

type EnvironmentItem {
  id: ID!
  name: String!
}

"""EnvironmentSetupInput"""
input EnvironmentSetupInput {
  deleteLock: Boolean
  introspection: Boolean
}

type EnvironmentVariable {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  id: ID
  name: String
  updatedAt: DateTime
  value: String
}

"""EnvironmentVariables create input"""
input EnvironmentVariableCreateInput {
  name: String!
  value: String!
}

"""EnvironmentVariables create many input"""
input EnvironmentVariableCreateManyInput {
  name: String!
  value: String!
}

"""EnvironmentVariables delete input"""
input EnvironmentVariableDeleteInput {
  force: Boolean
  id: ID
}

input EnvironmentVariableFilter {
  AND: [EnvironmentVariableFilter!]
  OR: [EnvironmentVariableFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  updatedAt: DateTimePredicate
  value: StringPredicate
}

input EnvironmentVariableGroupBy {
  first: Int
  having: Having
  last: Int
  query: EnvironmentVariableGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input EnvironmentVariableGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  id: [GroupByField!]
  name: [GroupByField!]
  updatedAt: [GroupByField!]
  value: [GroupByField!]
}

input EnvironmentVariableKeyFilter {
  id: ID
  name: String
}

"""EnvironmentVariableListResponse output"""
type EnvironmentVariableListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [EnvironmentVariable!]!
}

"""EnvironmentVariableManyResponse output"""
type EnvironmentVariableManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [EnvironmentVariable!]!
}

"""No longer supported. Use `sort` instead."""
enum EnvironmentVariableOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

"""EnvironmentVariables subscription payload"""
type EnvironmentVariablePayload {
  mutation: MutationType!
  node: EnvironmentVariable
  previousValues: EnvironmentVariable
  updatedFields: [String]
}

input EnvironmentVariableSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

"""EnvironmentVariables subscription filter"""
input EnvironmentVariableSubscriptionFilter {
  mutation_in: [MutationType]
  node: EnvironmentVariableFilter
  updatedFields: UpdatedFieldsFilter
}

"""EnvironmentVariables update input"""
input EnvironmentVariableUpdateByFilterInput {
  name: [UpdateByFilterStringInput]
  value: [UpdateByFilterStringInput]
}

"""EnvironmentVariables update input"""
input EnvironmentVariableUpdateInput {
  id: ID
  name: String
  value: String
}

"""EnvironmentalData relation input"""
input EnvironmentalDataBuilding_idRelationInput {
  create: EnvironmentalData_BuildingCreateInput
}

"""EnvironmentalData relation input"""
input EnvironmentalDataBuilding_idUpdateRelationInput {
  update: EnvironmentalData_BuildingUpdateInput
}

"""Buildings create input from EnvironmentalData"""
input EnvironmentalData_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput!
  ComplianceRecords: BuildingsComplianceRecordsRelationInput!
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput!
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from EnvironmentalData"""
input EnvironmentalData_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Records environmental information related to the building."""
type EnvironmentalDatum {
  _description: String

  """Reference to the building where the environmental data was recorded."""
  building_id: Building
  createdAt: DateTime
  deletedAt: Int
  id: ID

  """Date when the environmental parameter was measured."""
  measurement_date: DateTime

  """
  Environmental parameter being measured (e.g., noise level, water quality).
  """
  parameter: String
  updatedAt: DateTime

  """Value of the environmental parameter."""
  value: Int
}

"""EnvironmentalData create input"""
input EnvironmentalDatumCreateInput {
  building_id: EnvironmentalDataBuilding_idRelationInput

  """Date when the environmental parameter was measured."""
  measurement_date: DateTime

  """
  Environmental parameter being measured (e.g., noise level, water quality).
  """
  parameter: String

  """Value of the environmental parameter."""
  value: Int
}

"""EnvironmentalData create many input"""
input EnvironmentalDatumCreateManyInput {
  """Date when the environmental parameter was measured."""
  measurement_date: DateTime

  """
  Environmental parameter being measured (e.g., noise level, water quality).
  """
  parameter: String

  """Value of the environmental parameter."""
  value: Int
}

"""EnvironmentalData delete input"""
input EnvironmentalDatumDeleteInput {
  force: Boolean
  id: ID
}

"""EnvironmentalDatumFieldsPermissions create input"""
input EnvironmentalDatumFieldsPermissions {
  createdAt: Boolean
  measurement_date: Boolean
  parameter: Boolean
  updatedAt: Boolean
  value: Boolean
}

input EnvironmentalDatumFilter {
  AND: [EnvironmentalDatumFilter!]
  OR: [EnvironmentalDatumFilter!]
  _fullText: String
  building_id: BuildingFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  measurement_date: DateTimePredicate
  parameter: StringPredicate
  updatedAt: DateTimePredicate
  value: IntPredicate
}

input EnvironmentalDatumGroupBy {
  first: Int
  having: Having
  last: Int
  query: EnvironmentalDatumGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input EnvironmentalDatumGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  createdAt: [GroupByField!]
  id: [GroupByField!]
  measurement_date: [GroupByField!]
  parameter: [GroupByField!]
  updatedAt: [GroupByField!]
  value: [GroupByField!]
}

input EnvironmentalDatumKeyFilter {
  id: ID
}

"""EnvironmentalDatumListResponse output"""
type EnvironmentalDatumListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [EnvironmentalDatum!]!
}

"""EnvironmentalDatumManyResponse output"""
type EnvironmentalDatumManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [EnvironmentalDatum!]!
}

"""No longer supported. Use `sort` instead."""
enum EnvironmentalDatumOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  measurement_date_ASC
  measurement_date_DESC
  parameter_ASC
  parameter_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

"""EnvironmentalData subscription payload"""
type EnvironmentalDatumPayload {
  mutation: MutationType!
  node: EnvironmentalDatum
  previousValues: EnvironmentalDatum
  updatedFields: [String]
}

input EnvironmentalDatumRelationFilter {
  every: EnvironmentalDatumFilter
  none: EnvironmentalDatumFilter
  some: EnvironmentalDatumFilter
}

input EnvironmentalDatumSort {
  building_id: BuildingSort
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  measurement_date: SortOrder
  parameter: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

"""EnvironmentalData subscription filter"""
input EnvironmentalDatumSubscriptionFilter {
  mutation_in: [MutationType]
  node: EnvironmentalDatumFilter
  updatedFields: UpdatedFieldsFilter
}

"""EnvironmentalData update input"""
input EnvironmentalDatumUpdateByFilterInput {
  parameter: [UpdateByFilterStringInput]
  value: [UpdateByFilterIntInput]
}

"""EnvironmentalData update input"""
input EnvironmentalDatumUpdateInput {
  building_id: EnvironmentalDataBuilding_idUpdateRelationInput
  id: ID

  """Date when the environmental parameter was measured."""
  measurement_date: DateTime

  """
  Environmental parameter being measured (e.g., noise level, water quality).
  """
  parameter: String

  """Value of the environmental parameter."""
  value: Int
}

input EnvironmentalDatum_PermissionFilter {
  AND: [EnvironmentalDatum_PermissionFilter!]
  OR: [EnvironmentalDatum_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  measurement_date: DateTimePredicate
  parameter: StringPredicate
  updatedAt: DateTimePredicate
  value: IntPredicate
}

input EnvironmentalDatum_PermissionRelationFilter {
  every: EnvironmentalDatum_PermissionFilter
  none: EnvironmentalDatum_PermissionFilter
  some: EnvironmentalDatum_PermissionFilter
}

"""Details about equipment installed in the building."""
type Equipment {
  _description: String

  """Reference to the building where the equipment is installed."""
  building_id: Building
  createdAt: DateTime
  deletedAt: Int
  id: ID

  """Date when the equipment was installed."""
  installation_date: DateTime

  """Name of the equipment."""
  name: String

  """Type of the equipment."""
  type: String
  updatedAt: DateTime
}

"""Equipment relation input"""
input EquipmentBuilding_idRelationInput {
  create: Equipment_BuildingCreateInput
}

"""Equipment relation input"""
input EquipmentBuilding_idUpdateRelationInput {
  update: Equipment_BuildingUpdateInput
}

"""Equipment create input"""
input EquipmentCreateInput {
  building_id: EquipmentBuilding_idRelationInput

  """Date when the equipment was installed."""
  installation_date: DateTime

  """Name of the equipment."""
  name: String

  """Type of the equipment."""
  type: String
}

"""Equipment create many input"""
input EquipmentCreateManyInput {
  """Date when the equipment was installed."""
  installation_date: DateTime

  """Name of the equipment."""
  name: String

  """Type of the equipment."""
  type: String
}

"""Equipment delete input"""
input EquipmentDeleteInput {
  force: Boolean
  id: ID
}

"""EquipmentFieldsPermissions create input"""
input EquipmentFieldsPermissions {
  createdAt: Boolean
  installation_date: Boolean
  name: Boolean
  type: Boolean
  updatedAt: Boolean
}

input EquipmentFilter {
  AND: [EquipmentFilter!]
  OR: [EquipmentFilter!]
  _fullText: String
  building_id: BuildingFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  installation_date: DateTimePredicate
  name: StringPredicate
  type: StringPredicate
  updatedAt: DateTimePredicate
}

input EquipmentGroupBy {
  first: Int
  having: Having
  last: Int
  query: EquipmentGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input EquipmentGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  createdAt: [GroupByField!]
  id: [GroupByField!]
  installation_date: [GroupByField!]
  name: [GroupByField!]
  type: [GroupByField!]
  updatedAt: [GroupByField!]
}

input EquipmentKeyFilter {
  id: ID
}

"""EquipmentListResponse output"""
type EquipmentListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Equipment!]!
}

"""EquipmentManyResponse output"""
type EquipmentManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Equipment!]!
}

"""No longer supported. Use `sort` instead."""
enum EquipmentOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  installation_date_ASC
  installation_date_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Equipment subscription payload"""
type EquipmentPayload {
  mutation: MutationType!
  node: Equipment
  previousValues: Equipment
  updatedFields: [String]
}

input EquipmentRelationFilter {
  every: EquipmentFilter
  none: EquipmentFilter
  some: EquipmentFilter
}

input EquipmentSort {
  building_id: BuildingSort
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  installation_date: SortOrder
  name: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

"""Equipment subscription filter"""
input EquipmentSubscriptionFilter {
  mutation_in: [MutationType]
  node: EquipmentFilter
  updatedFields: UpdatedFieldsFilter
}

"""Equipment update input"""
input EquipmentUpdateByFilterInput {
  name: [UpdateByFilterStringInput]
  type: [UpdateByFilterStringInput]
}

"""Equipment update input"""
input EquipmentUpdateInput {
  building_id: EquipmentBuilding_idUpdateRelationInput
  id: ID

  """Date when the equipment was installed."""
  installation_date: DateTime

  """Name of the equipment."""
  name: String

  """Type of the equipment."""
  type: String
}

"""Buildings create input from Equipment"""
input Equipment_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput!
  ComplianceRecords: BuildingsComplianceRecordsRelationInput!
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput!
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput!
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput!
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput!
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from Equipment"""
input Equipment_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

input Equipment_PermissionFilter {
  AND: [Equipment_PermissionFilter!]
  OR: [Equipment_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  installation_date: DateTimePredicate
  name: StringPredicate
  type: StringPredicate
  updatedAt: DateTimePredicate
}

input Equipment_PermissionRelationFilter {
  every: Equipment_PermissionFilter
  none: Equipment_PermissionFilter
  some: Equipment_PermissionFilter
}

"""Facebook connection params"""
type FacebookOptions {
  app_id: String!
  app_secret: String!
  enabled: Boolean!
}

"""Facebook connection params input"""
input FacebookOptionsInput {
  app_id: String!
  app_secret: String!
  enabled: Boolean!
}

"""Field Data Features"""
type FieldDataFeatures {
  create: Boolean!
  sort: Boolean!
  update: Boolean!
}

"""Field Schema Features"""
type FieldSchemaFeatures {
  delete: Boolean!
  update: Boolean!
}

"""Field types"""
enum FieldType {
  DATE
  FILE
  GEO
  ID
  JSON
  MISSING_RELATION
  NUMBER
  ONE_WAY_RELATION
  RELATION
  SMART
  SWITCH
  TEXT
  UUID
}

"""Field Type Attributes"""
union FieldTypeAttributes = DateFieldTypeAttributes | FileFieldTypeAttributes | GeoFieldTypeAttributes | MissingRelationFieldTypeAttributes | NumberFieldTypeAttributes | SmartFieldTypeAttributes | SwitchFieldTypeAttributes | TextFieldTypeAttributes | UUIDFieldTypeAttributes

"""Field Type Attributes Input"""
input FieldTypeAttributesInput {
  autoIncrement: Boolean
  currency: String
  expiration: Int
  fieldSize: Int
  format: String
  isBigInt: Boolean
  listOptions: [String!]
  maxSize: Int
  maxValue: Float
  minValue: Float
  precision: Int
  srid: Int
  typeRestrictions: [String!]
}

type File {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int

  """No longer supported. Use `downloadUrl` instead."""
  downloadStorageUrl: String
  downloadUrl: String

  """
  No longer supported. Use `system.fileUploadSignInfo.AwsSignInfoResponse.fields` instead.
  """
  fields: JSON
  fileId: String
  filename: String
  id: ID
  meta: JSON
  mods: JSON
  previewUrl: String
  provider: String
  public: Boolean
  settings_landingPageImage(after: String, before: String, filter: SettingFilter, first: Int, groupBy: SettingGroupBy, last: Int, orderBy: [SettingOrderBy], skip: Int, sort: [SettingSort!]): SettingListResponse
  settings_menuBarLogo(after: String, before: String, filter: SettingFilter, first: Int, groupBy: SettingGroupBy, last: Int, orderBy: [SettingOrderBy], skip: Int, sort: [SettingSort!]): SettingListResponse
  shareUrl: String
  updatedAt: DateTime

  """No longer supported"""
  uploadUrl: String

  """No longer supported"""
  uploaded: Boolean
  users_avatar(after: String, before: String, filter: UserFilter, first: Int, groupBy: UserGroupBy, last: Int, orderBy: [UserOrderBy], skip: Int, sort: [UserSort!]): UserListResponse
}

"""Files create input"""
input FileCreateInput {
  fileId: String
  filename: String
  meta: JSON
  mods: JSON
  public: Boolean = false
  users_avatar: FilesUsers_avatarRelationInput
}

"""Files create many input"""
input FileCreateManyInput {
  fileId: String
  filename: String
  meta: JSON
  mods: JSON
  public: Boolean = false
  users_avatar: FilesUsers_avatarManyRelationInput
}

"""Files delete input"""
input FileDeleteInput {
  force: Boolean
  id: ID
}

"""File Field Attributes"""
type FileFieldTypeAttributes {
  expiration: Int
  format: String!
  maxSize: Int
  showTitle: Boolean @deprecated(reason: "Field is deprecated")
  showUrl: Boolean @deprecated(reason: "Field is deprecated")
  typeRestrictions: [String!]
}

"""FileFieldsPermissions create input"""
input FileFieldsPermissions {
  createdAt: Boolean
  downloadUrl: Boolean
  fields: Boolean
  fileId: Boolean
  filename: Boolean
  meta: Boolean
  mods: Boolean
  provider: Boolean
  public: Boolean
  shareUrl: Boolean
  updatedAt: Boolean
  uploadUrl: Boolean
  uploaded: Boolean
}

input FileFilter {
  AND: [FileFilter!]
  OR: [FileFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  downloadUrl: StringPredicate
  fileId: StringPredicate
  filename: StringPredicate
  id: IDPredicate
  provider: StringPredicate
  public: BoolPredicate
  settings_landingPageImage: SettingRelationFilter
  settings_menuBarLogo: SettingRelationFilter
  shareUrl: StringPredicate
  updatedAt: DateTimePredicate
  uploadUrl: StringPredicate
  uploaded: BoolPredicate
  users_avatar: UserRelationFilter
}

input FileGroupBy {
  first: Int
  having: Having
  last: Int
  query: FileGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input FileGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  downloadUrl: [GroupByField!]
  fields: [GroupByField!]
  fileId: [GroupByField!]
  filename: [GroupByField!]
  id: [GroupByField!]
  meta: [GroupByField!]
  mods: [GroupByField!]
  provider: [GroupByField!]
  public: [GroupByField!]
  settings_landingPageImage: SettingGroupByQuery
  settings_menuBarLogo: SettingGroupByQuery
  shareUrl: [GroupByField!]
  updatedAt: [GroupByField!]
  uploadUrl: [GroupByField!]
  uploaded: [GroupByField!]
  users_avatar: UserGroupByQuery
}

input FileKeyFilter {
  fileId: String
  id: ID
}

"""FileListResponse output"""
type FileListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [File!]!
}

"""FileManyResponse output"""
type FileManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [File!]!
}

"""No longer supported. Use `sort` instead."""
enum FileOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  downloadUrl_ASC
  downloadUrl_DESC
  fields_ASC
  fields_DESC
  fileId_ASC
  fileId_DESC
  filename_ASC
  filename_DESC
  id_ASC
  id_DESC
  meta_ASC
  meta_DESC
  mods_ASC
  mods_DESC
  provider_ASC
  provider_DESC
  public_ASC
  public_DESC
  shareUrl_ASC
  shareUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  uploadUrl_ASC
  uploadUrl_DESC
  uploaded_ASC
  uploaded_DESC
}

"""Files subscription payload"""
type FilePayload {
  mutation: MutationType!
  node: File
  previousValues: File
  updatedFields: [String]
}

input FileSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  downloadUrl: SortOrder
  fileId: SortOrder
  filename: SortOrder
  id: SortOrder
  provider: SortOrder
  public: SortOrder
  shareUrl: SortOrder
  updatedAt: SortOrder
  uploadUrl: SortOrder
  uploaded: SortOrder
}

type FileStackSignInfoResponse {
  apiKey: String!
  path: String!
  policy: String!
  signature: String!
}

"""Files subscription filter"""
input FileSubscriptionFilter {
  mutation_in: [MutationType]
  node: FileFilter
  updatedFields: UpdatedFieldsFilter
}

"""File Type Format Enum"""
enum FileTypeFormatEnum {
  FILE
  IMAGE
}

"""Files update input"""
input FileUpdateByFilterInput {
  downloadUrl: [UpdateByFilterStringInput]
  fields: [UpdateByFilterJsonInput]
  fileId: [UpdateByFilterStringInput]
  filename: [UpdateByFilterStringInput]
  meta: [UpdateByFilterJsonInput]
  mods: [UpdateByFilterJsonInput]
  provider: [UpdateByFilterStringInput]
  public: [UpdateByFilterBooleanSwitchInput]
  shareUrl: [UpdateByFilterStringInput]
  uploadUrl: [UpdateByFilterStringInput]
  uploaded: [UpdateByFilterBooleanSwitchInput]
}

"""Files update input"""
input FileUpdateInput {
  fileId: String
  filename: String
  id: ID
  meta: JSON
  mods: JSON
  public: Boolean
  users_avatar: FilesUsers_avatarUpdateRelationInput
}

type FileUploadInfoResponse {
  apiKey: String!
  path: String!
  policy: String!
  signature: String!
}

input File_PermissionFilter {
  AND: [File_PermissionFilter!]
  OR: [File_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  downloadUrl: StringPredicate
  fileId: StringPredicate
  filename: StringPredicate
  id: IDPredicate
  provider: StringPredicate
  public: BoolPredicate
  settings_landingPageImage: Setting_PermissionRelationFilter
  settings_menuBarLogo: Setting_PermissionRelationFilter
  shareUrl: StringPredicate
  updatedAt: DateTimePredicate
  uploadUrl: StringPredicate
  uploaded: BoolPredicate
  users_avatar: User_PermissionRelationFilter
}

type FilesSetting {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  filemanagername: String
  id: ID
  isEnabled: Boolean
  settings: JSON
  updatedAt: DateTime
}

"""FilesSettings create input"""
input FilesSettingCreateInput {
  filemanagername: String!
  isEnabled: Boolean = false
  settings: JSON!
}

"""FilesSettings create many input"""
input FilesSettingCreateManyInput {
  filemanagername: String!
  isEnabled: Boolean = false
  settings: JSON!
}

"""FilesSettings delete input"""
input FilesSettingDeleteInput {
  force: Boolean
  id: ID
}

"""FilesSettingFieldsPermissions create input"""
input FilesSettingFieldsPermissions {
  createdAt: Boolean
  filemanagername: Boolean
  isEnabled: Boolean
  settings: Boolean
  updatedAt: Boolean
}

input FilesSettingFilter {
  AND: [FilesSettingFilter!]
  OR: [FilesSettingFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  filemanagername: StringPredicate
  id: IDPredicate
  isEnabled: BoolPredicate
  updatedAt: DateTimePredicate
}

input FilesSettingGroupBy {
  first: Int
  having: Having
  last: Int
  query: FilesSettingGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input FilesSettingGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  filemanagername: [GroupByField!]
  id: [GroupByField!]
  isEnabled: [GroupByField!]
  settings: [GroupByField!]
  updatedAt: [GroupByField!]
}

input FilesSettingKeyFilter {
  filemanagername: String
  id: ID
}

"""FilesSettingListResponse output"""
type FilesSettingListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [FilesSetting!]!
}

"""FilesSettingManyResponse output"""
type FilesSettingManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [FilesSetting!]!
}

"""No longer supported. Use `sort` instead."""
enum FilesSettingOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  filemanagername_ASC
  filemanagername_DESC
  id_ASC
  id_DESC
  isEnabled_ASC
  isEnabled_DESC
  settings_ASC
  settings_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""FilesSettings subscription payload"""
type FilesSettingPayload {
  mutation: MutationType!
  node: FilesSetting
  previousValues: FilesSetting
  updatedFields: [String]
}

input FilesSettingSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  filemanagername: SortOrder
  id: SortOrder
  isEnabled: SortOrder
  updatedAt: SortOrder
}

"""FilesSettings subscription filter"""
input FilesSettingSubscriptionFilter {
  mutation_in: [MutationType]
  node: FilesSettingFilter
  updatedFields: UpdatedFieldsFilter
}

"""FilesSettings update input"""
input FilesSettingUpdateByFilterInput {
  filemanagername: [UpdateByFilterStringInput]
  isEnabled: [UpdateByFilterBooleanSwitchInput]
  settings: [UpdateByFilterJsonInput]
}

"""FilesSettings update input"""
input FilesSettingUpdateInput {
  filemanagername: String
  id: ID
  isEnabled: Boolean
  settings: JSON
}

input FilesSetting_PermissionFilter {
  AND: [FilesSetting_PermissionFilter!]
  OR: [FilesSetting_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  filemanagername: StringPredicate
  id: IDPredicate
  isEnabled: BoolPredicate
  updatedAt: DateTimePredicate
}

"""Files relation input"""
input FilesUsers_avatarManyRelationInput {
  connect: [UserKeyFilter!]
}

"""Files relation input"""
input FilesUsers_avatarRelationInput {
  connect: [UserKeyFilter!]
  create: [Avatar_UserCreateInput]
}

"""Files relation input"""
input FilesUsers_avatarUpdateRelationInput {
  connect: [UserKeyFilter!]
  create: [Avatar_UserCreateInput]
  disconnect: [UserKeyFilter!]
  reconnect: [UserKeyFilter!]
  update: [Avatar_UserUpdateInput]
}

input FloatPredicateHaving {
  AND: [FloatPredicateHaving!]
  OR: [FloatPredicateHaving!]
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Float
  lte: Float
  not_equals: Float
  not_in: [Float!]
}

type FrontendUtilizationABResponse {
  CDN: Boolean
  assets: Int
  customStates: Int
  functions: Int
  layouts: Int
  libraries: Int
  pages: Int
  requests: Int
  resources: Int
}

"""FunctionInfo"""
interface FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  name: String!
}

"""FunctionInfoCheck"""
type FunctionInfoCheck {
  version: String
}

"""FunctionInfoFilter"""
input FunctionInfoFilter {
  description: String
  functionType: FunctionType
  name: String
}

"""FunctionInfoOrderBy"""
enum FunctionInfoOrderBy {
  description_ASC
  description_DESC
  functionType_ASC
  functionType_DESC
  name_ASC
  name_DESC
}

"""FunctionListResponse output"""
type FunctionListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [FunctionInfo!]!
}

"""FunctionResolverInfo"""
type FunctionResolverInfo implements FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  gqlType: String!
  name: String!
}

"""FunctionTaskInfo"""
type FunctionTaskInfo implements FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  name: String!
  scheduleExpression: String
}

"""FunctionTriggerInfo"""
type FunctionTriggerInfo implements FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  name: String!
  operation: String!
  tableName: String!
  type: String!
}

"""FunctionType"""
enum FunctionType {
  resolver
  schedule
  task
  trigger
  webhook
}

"""FunctionWebhookInfo"""
type FunctionWebhookInfo implements FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  httpMethod: String!
  name: String!
  workspaceFullPath: String!
  workspaceRelativePath: String!
}

"""Geo Field Attributes"""
type GeoFieldTypeAttributes {
  format: String!
  srid: Int
}

"""Github connection params"""
type GithubOptions {
  client_id: String!
  client_secret: String!
  enabled: Boolean!
}

"""Github connection params input"""
input GithubOptionsInput {
  client_id: String!
  client_secret: String!
  enabled: Boolean!
}

"""Google connection params"""
type GoogleOptions {
  client_id: String!
  client_secret: String!
  enabled: Boolean!
}

"""Google connection params input"""
input GoogleOptionsInput {
  client_id: String!
  client_secret: String!
  enabled: Boolean!
}

"""GraphQLCreateFileCustomInput"""
input GraphQLCreateFileCustomInput {
  fileId: String
  filename: String
  public: Boolean
}

"""GraphQLCreateFileItemInput"""
input GraphQLCreateFileItemInput {
  create: GraphQLCreateFileCustomInput
}

"""GraphQLFileItemResponse"""
type GraphQLFileItemResponse {
  downloadUrl: String
  id: String
}

input GroupByField {
  as: String
  fn: [GroupByFieldFunction]
}

input GroupByFieldFunction {
  abs: Boolean
  aggregate: AggregationFunctionType
  ascii: Boolean
  bitLength: Boolean
  ceil: Boolean
  charLength: Boolean
  crc32: Boolean
  datePart: DatePartFunctionType
  distinct: Boolean
  floor: Boolean
  hex: Boolean
  ifNull: String
  isNull: Boolean
  left: Int
  length: Boolean
  like: PatternFunctionArguments
  locate: LocateFunctionArguments
  lower: Boolean
  lpad: StringPadFunctionArguments
  ltrim: Boolean
  mod: Int
  notLike: PatternFunctionArguments
  nullIf: String
  replace: ReplaceFunctionArguments
  reverse: Boolean
  right: Int
  round: Int
  rpad: StringPadFunctionArguments
  rtrim: Boolean
  sign: Boolean
  substring: SubstringFunctionArguments
  trim: TrimFunctionArguments
  truncate: Int
  upper: Boolean
}

type GroupByResponse {
  AirQualityGroup(after: String, before: String, filter: AirQualityFilter, first: Int, groupBy: AirQualityGroupBy, last: Int, orderBy: [AirQualityOrderBy], skip: Int, sort: [AirQualitySort!]): AirQualityListResponse!
  ApiTokenGroup(after: String, before: String, filter: ApiTokenFilter, first: Int, groupBy: ApiTokenGroupBy, last: Int, orderBy: [ApiTokenOrderBy], skip: Int, sort: [ApiTokenSort!]): ApiTokenListResponse!
  AuthenticationProfileGroup(after: String, before: String, filter: AuthenticationProfileFilter, first: Int, groupBy: AuthenticationProfileGroupBy, last: Int, orderBy: [AuthenticationProfileOrderBy], skip: Int, sort: [AuthenticationProfileSort!]): AuthenticationProfileListResponse!
  BigInt: BigInt
  Boolean: Boolean
  BuildingGroup(after: String, before: String, filter: BuildingFilter, first: Int, groupBy: BuildingGroupBy, last: Int, orderBy: [BuildingOrderBy], skip: Int, sort: [BuildingSort!]): BuildingListResponse!
  CertificationGroup(after: String, before: String, filter: CertificationFilter, first: Int, groupBy: CertificationGroupBy, last: Int, orderBy: [CertificationOrderBy], skip: Int, sort: [CertificationSort!]): CertificationListResponse!
  ComplianceRecordGroup(after: String, before: String, filter: ComplianceRecordFilter, first: Int, groupBy: ComplianceRecordGroupBy, last: Int, orderBy: [ComplianceRecordOrderBy], skip: Int, sort: [ComplianceRecordSort!]): ComplianceRecordListResponse!
  Date: Date
  DateTime: DateTime
  DocumentGroup(after: String, before: String, filter: DocumentFilter, first: Int, groupBy: DocumentGroupBy, last: Int, orderBy: [DocumentOrderBy], skip: Int, sort: [DocumentSort!]): DocumentListResponse!
  EnergyEfficiencyGroup(after: String, before: String, filter: EnergyEfficiencyFilter, first: Int, groupBy: EnergyEfficiencyGroupBy, last: Int, orderBy: [EnergyEfficiencyOrderBy], skip: Int, sort: [EnergyEfficiencySort!]): EnergyEfficiencyListResponse!
  EnvironmentVariableGroup(after: String, before: String, filter: EnvironmentVariableFilter, first: Int, groupBy: EnvironmentVariableGroupBy, last: Int, orderBy: [EnvironmentVariableOrderBy], skip: Int, sort: [EnvironmentVariableSort!]): EnvironmentVariableListResponse!
  EnvironmentalDatumGroup(after: String, before: String, filter: EnvironmentalDatumFilter, first: Int, groupBy: EnvironmentalDatumGroupBy, last: Int, orderBy: [EnvironmentalDatumOrderBy], skip: Int, sort: [EnvironmentalDatumSort!]): EnvironmentalDatumListResponse!
  EquipmentGroup(after: String, before: String, filter: EquipmentFilter, first: Int, groupBy: EquipmentGroupBy, last: Int, orderBy: [EquipmentOrderBy], skip: Int, sort: [EquipmentSort!]): EquipmentListResponse!
  FileGroup(after: String, before: String, filter: FileFilter, first: Int, groupBy: FileGroupBy, last: Int, orderBy: [FileOrderBy], skip: Int, sort: [FileSort!]): FileListResponse!
  FilesSettingGroup(after: String, before: String, filter: FilesSettingFilter, first: Int, groupBy: FilesSettingGroupBy, last: Int, orderBy: [FilesSettingOrderBy], skip: Int, sort: [FilesSettingSort!]): FilesSettingListResponse!
  Float: Float
  GroupIds: [ID!]
  ID: ID
  ImprovementGroup(after: String, before: String, filter: ImprovementFilter, first: Int, groupBy: ImprovementGroupBy, last: Int, orderBy: [ImprovementOrderBy], skip: Int, sort: [ImprovementSort!]): ImprovementListResponse!
  Int: Int
  JSON: JSON
  MaintenanceRecordGroup(after: String, before: String, filter: MaintenanceRecordFilter, first: Int, groupBy: MaintenanceRecordGroupBy, last: Int, orderBy: [MaintenanceRecordOrderBy], skip: Int, sort: [MaintenanceRecordSort!]): MaintenanceRecordListResponse!
  NotificationGroup(after: String, before: String, filter: NotificationFilter, first: Int, groupBy: NotificationGroupBy, last: Int, orderBy: [NotificationOrderBy], skip: Int, sort: [NotificationSort!]): NotificationListResponse!
  PermitGroup(after: String, before: String, filter: PermitFilter, first: Int, groupBy: PermitGroupBy, last: Int, orderBy: [PermitOrderBy], skip: Int, sort: [PermitSort!]): PermitListResponse!
  ReportGroup(after: String, before: String, filter: ReportFilter, first: Int, groupBy: ReportGroupBy, last: Int, orderBy: [ReportOrderBy], skip: Int, sort: [ReportSort!]): ReportListResponse!
  RoleGroup(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse!
  SearchCriterionGroup(after: String, before: String, filter: SearchCriterionFilter, first: Int, groupBy: SearchCriterionGroupBy, last: Int, orderBy: [SearchCriterionOrderBy], skip: Int, sort: [SearchCriterionSort!]): SearchCriterionListResponse!
  String: String
  SubscriptionsAppGroup(after: String, before: String, filter: SubscriptionsAppFilter, first: Int, groupBy: SubscriptionsAppGroupBy, last: Int, orderBy: [SubscriptionsAppOrderBy], skip: Int, sort: [SubscriptionsAppSort!]): SubscriptionsAppListResponse!
  UserGroup(after: String, before: String, filter: UserFilter, first: Int, groupBy: UserGroupBy, last: Int, orderBy: [UserOrderBy], skip: Int, sort: [UserSort!]): UserListResponse!
  WorkOrderGroup(after: String, before: String, filter: WorkOrderFilter, first: Int, groupBy: WorkOrderGroupBy, last: Int, orderBy: [WorkOrderOrderBy], skip: Int, sort: [WorkOrderSort!]): WorkOrderListResponse!
}

input GroupBySort {
  alias: String!
  direction: SortOrder!
}

input GroupIdentifiersGroupByField {
  as: String!
}

input Having {
  AND: [Having!]
  OR: [Having!]
  alias: String
  bigint: BigIntPredicateHaving
  bool: BoolPredicateHaving
  date: DatePredicateHaving
  datetime: DateTimePredicateHaving
  float: FloatPredicateHaving
  id: IDPredicateHaving
  int: IntPredicateHaving
  string: StringPredicateHaving
}

input IDPredicate {
  contains: ID
  ends_with: ID
  equals: ID
  gt: ID
  gte: ID
  in: [ID!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: ID
  lte: ID
  not_contains: ID
  not_ends_with: ID
  not_equals: ID
  not_in: [ID!]
  not_starts_with: ID
  starts_with: ID
}

input IDPredicateHaving {
  AND: [IDPredicateHaving!]
  OR: [IDPredicateHaving!]
  contains: ID
  ends_with: ID
  equals: ID
  gt: ID
  gte: ID
  in: [ID!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: ID
  lte: ID
  not_contains: ID
  not_ends_with: ID
  not_equals: ID
  not_in: [ID!]
  not_starts_with: ID
  starts_with: ID
}

"""ImportCSV"""
input ImportCSV {
  data: ImportCSVData!
  tableId: String!
}

input ImportCSVData {
  fields: String
  hasHeader: Boolean
  matchField: String
  overwrite: Boolean
  tableFields: String
  url: String!
}

"""ImportedTable"""
type ImportedTable {
  id: ID!
  name: String!
}

"""Records improvements made to the building."""
type Improvement {
  _description: String

  """Reference to the building where the improvement was made."""
  building_id: Building

  """Cost of the improvement."""
  cost: Int
  createdAt: DateTime

  """Date when the improvement was made."""
  date: DateTime
  deletedAt: Int

  """Description of the improvement made."""
  description: String
  id: ID
  updatedAt: DateTime
}

"""Improvements create input"""
input ImprovementCreateInput {
  building_id: ImprovementsBuilding_idRelationInput

  """Cost of the improvement."""
  cost: Int

  """Date when the improvement was made."""
  date: DateTime

  """Description of the improvement made."""
  description: String
}

"""Improvements create many input"""
input ImprovementCreateManyInput {
  """Cost of the improvement."""
  cost: Int

  """Date when the improvement was made."""
  date: DateTime

  """Description of the improvement made."""
  description: String
}

"""Improvements delete input"""
input ImprovementDeleteInput {
  force: Boolean
  id: ID
}

"""ImprovementFieldsPermissions create input"""
input ImprovementFieldsPermissions {
  cost: Boolean
  createdAt: Boolean
  date: Boolean
  description: Boolean
  updatedAt: Boolean
}

input ImprovementFilter {
  AND: [ImprovementFilter!]
  OR: [ImprovementFilter!]
  _fullText: String
  building_id: BuildingFilter
  cost: IntPredicate
  createdAt: DateTimePredicate
  date: DateTimePredicate
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  updatedAt: DateTimePredicate
}

input ImprovementGroupBy {
  first: Int
  having: Having
  last: Int
  query: ImprovementGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input ImprovementGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  cost: [GroupByField!]
  createdAt: [GroupByField!]
  date: [GroupByField!]
  description: [GroupByField!]
  id: [GroupByField!]
  updatedAt: [GroupByField!]
}

input ImprovementKeyFilter {
  id: ID
}

"""ImprovementListResponse output"""
type ImprovementListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Improvement!]!
}

"""ImprovementManyResponse output"""
type ImprovementManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Improvement!]!
}

"""No longer supported. Use `sort` instead."""
enum ImprovementOrderBy {
  cost_ASC
  cost_DESC
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  deletedAt_ASC
  deletedAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Improvements subscription payload"""
type ImprovementPayload {
  mutation: MutationType!
  node: Improvement
  previousValues: Improvement
  updatedFields: [String]
}

input ImprovementRelationFilter {
  every: ImprovementFilter
  none: ImprovementFilter
  some: ImprovementFilter
}

input ImprovementSort {
  building_id: BuildingSort
  cost: SortOrder
  createdAt: SortOrder
  date: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

"""Improvements subscription filter"""
input ImprovementSubscriptionFilter {
  mutation_in: [MutationType]
  node: ImprovementFilter
  updatedFields: UpdatedFieldsFilter
}

"""Improvements update input"""
input ImprovementUpdateByFilterInput {
  cost: [UpdateByFilterIntInput]
  description: [UpdateByFilterStringInput]
}

"""Improvements update input"""
input ImprovementUpdateInput {
  building_id: ImprovementsBuilding_idUpdateRelationInput

  """Cost of the improvement."""
  cost: Int

  """Date when the improvement was made."""
  date: DateTime

  """Description of the improvement made."""
  description: String
  id: ID
}

input Improvement_PermissionFilter {
  AND: [Improvement_PermissionFilter!]
  OR: [Improvement_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  cost: IntPredicate
  createdAt: DateTimePredicate
  date: DateTimePredicate
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  updatedAt: DateTimePredicate
}

input Improvement_PermissionRelationFilter {
  every: Improvement_PermissionFilter
  none: Improvement_PermissionFilter
  some: Improvement_PermissionFilter
}

"""Improvements relation input"""
input ImprovementsBuilding_idRelationInput {
  create: Improvements_BuildingCreateInput
}

"""Improvements relation input"""
input ImprovementsBuilding_idUpdateRelationInput {
  update: Improvements_BuildingUpdateInput
}

"""Buildings create input from Improvements"""
input Improvements_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput!
  ComplianceRecords: BuildingsComplianceRecordsRelationInput!
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput!
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput!
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from Improvements"""
input Improvements_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Inbox Events List Filter"""
input InboxEventsListFilter {
  isCompleted: IntPredicate
}

"""Table Create Index Input"""
input IndexCreateInput {
  columns: [TableIndexColumnInput!]!
  force: Boolean
  name: String
  tableId: ID!
  type: TableIndexType!
}

"""Table Delete Index Input"""
input IndexDeleteInput {
  id: ID!
}

"""Table Update Index Input"""
input IndexUpdateInput {
  columns: [TableIndexColumnInput!]
  force: Boolean
  id: ID!
  name: String
  type: TableIndexType
}

input IntPredicate {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Int
  lte: Int
  not_equals: Int
  not_in: [Int!]
}

input IntPredicateHaving {
  AND: [IntPredicateHaving!]
  OR: [IntPredicateHaving!]
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Int
  lte: Int
  not_equals: Int
  not_in: [Int!]
}

type IntrospectionQueryResponse {
  url: String!
}

enum InvitationRoleEnum {
  ADMIN
  EDITOR
  VIEWER
}

"""Invited By Name"""
type InvitedByName {
  email: String
  firstName: String
  lastName: String
  projectId: String
  projectName: String
  workspaceName: String
}

"""InvokeData"""
input InvokeData {
  functionName: String!
  inputArgs: String
  nodeVersion: String
}

"""InvokeFunctionResponse"""
type InvokeFunctionResponse {
  responseData: String!
}

"""IsSocialUser"""
input IsSocialUser {
  email: String!
}

type IsSocialUserResponse {
  isSocialUser: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LocateFunctionArguments {
  pos: Int
  str: String!
}

"""LoginResponse"""
type LoginResponse {
  auth: Auth
  success: Boolean
  workspaces: [WorkspaceInfo!]
}

"""Records maintenance activities performed on the building."""
type MaintenanceRecord {
  _description: String

  """Reference to the building where maintenance was performed."""
  building_id: Building
  createdAt: DateTime

  """Date when the maintenance activity was performed."""
  date: DateTime
  deletedAt: Int

  """Description of the maintenance activity."""
  description: String
  id: ID
  updatedAt: DateTime
}

"""MaintenanceRecords create input"""
input MaintenanceRecordCreateInput {
  building_id: MaintenanceRecordsBuilding_idRelationInput

  """Date when the maintenance activity was performed."""
  date: DateTime

  """Description of the maintenance activity."""
  description: String
}

"""MaintenanceRecords create many input"""
input MaintenanceRecordCreateManyInput {
  """Date when the maintenance activity was performed."""
  date: DateTime

  """Description of the maintenance activity."""
  description: String
}

"""MaintenanceRecords delete input"""
input MaintenanceRecordDeleteInput {
  force: Boolean
  id: ID
}

"""MaintenanceRecordFieldsPermissions create input"""
input MaintenanceRecordFieldsPermissions {
  createdAt: Boolean
  date: Boolean
  description: Boolean
  updatedAt: Boolean
}

input MaintenanceRecordFilter {
  AND: [MaintenanceRecordFilter!]
  OR: [MaintenanceRecordFilter!]
  _fullText: String
  building_id: BuildingFilter
  createdAt: DateTimePredicate
  date: DateTimePredicate
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  updatedAt: DateTimePredicate
}

input MaintenanceRecordGroupBy {
  first: Int
  having: Having
  last: Int
  query: MaintenanceRecordGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input MaintenanceRecordGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  createdAt: [GroupByField!]
  date: [GroupByField!]
  description: [GroupByField!]
  id: [GroupByField!]
  updatedAt: [GroupByField!]
}

input MaintenanceRecordKeyFilter {
  id: ID
}

"""MaintenanceRecordListResponse output"""
type MaintenanceRecordListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [MaintenanceRecord!]!
}

"""MaintenanceRecordManyResponse output"""
type MaintenanceRecordManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [MaintenanceRecord!]!
}

"""No longer supported. Use `sort` instead."""
enum MaintenanceRecordOrderBy {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  deletedAt_ASC
  deletedAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""MaintenanceRecords subscription payload"""
type MaintenanceRecordPayload {
  mutation: MutationType!
  node: MaintenanceRecord
  previousValues: MaintenanceRecord
  updatedFields: [String]
}

input MaintenanceRecordRelationFilter {
  every: MaintenanceRecordFilter
  none: MaintenanceRecordFilter
  some: MaintenanceRecordFilter
}

input MaintenanceRecordSort {
  building_id: BuildingSort
  createdAt: SortOrder
  date: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

"""MaintenanceRecords subscription filter"""
input MaintenanceRecordSubscriptionFilter {
  mutation_in: [MutationType]
  node: MaintenanceRecordFilter
  updatedFields: UpdatedFieldsFilter
}

"""MaintenanceRecords update input"""
input MaintenanceRecordUpdateByFilterInput {
  description: [UpdateByFilterStringInput]
}

"""MaintenanceRecords update input"""
input MaintenanceRecordUpdateInput {
  building_id: MaintenanceRecordsBuilding_idUpdateRelationInput

  """Date when the maintenance activity was performed."""
  date: DateTime

  """Description of the maintenance activity."""
  description: String
  id: ID
}

input MaintenanceRecord_PermissionFilter {
  AND: [MaintenanceRecord_PermissionFilter!]
  OR: [MaintenanceRecord_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  createdAt: DateTimePredicate
  date: DateTimePredicate
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  updatedAt: DateTimePredicate
}

input MaintenanceRecord_PermissionRelationFilter {
  every: MaintenanceRecord_PermissionFilter
  none: MaintenanceRecord_PermissionFilter
  some: MaintenanceRecord_PermissionFilter
}

"""MaintenanceRecords relation input"""
input MaintenanceRecordsBuilding_idRelationInput {
  create: MaintenanceRecords_BuildingCreateInput
}

"""MaintenanceRecords relation input"""
input MaintenanceRecordsBuilding_idUpdateRelationInput {
  update: MaintenanceRecords_BuildingUpdateInput
}

"""Buildings create input from MaintenanceRecords"""
input MaintenanceRecords_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput!
  ComplianceRecords: BuildingsComplianceRecordsRelationInput!
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput!
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput!
  Equipment: BuildingsEquipmentRelationInput!
  Improvements: BuildingsImprovementsRelationInput!
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput!
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from MaintenanceRecords"""
input MaintenanceRecords_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""MissingRelation"""
type MissingRelation {
  table: String!
}

"""MissingRelation Field Attributes"""
type MissingRelationFieldTypeAttributes {
  missingTable: String!
}

type Mutation {
  ImportCSV(data: ImportCSV!): AsyncSession
  IsSocialUser(data: IsSocialUser!): IsSocialUserResponse
  airQualityCreate(data: AirQualityCreateInput!): AirQuality!
  airQualityCreateMany(data: [AirQualityCreateManyInput]!): AirQualityManyResponse!
  airQualityDelete(data: AirQualityDeleteInput, filter: AirQualityKeyFilter, force: Boolean): SuccessResponse
  airQualityDeleteByFilter(filter: AirQualityFilter!, force: Boolean): SuccessResponse
  airQualityDestroy(filter: AirQualityKeyFilter, force: Boolean): SuccessResponse
  airQualityDestroyByFilter(filter: AirQualityFilter!, force: Boolean): SuccessResponse
  airQualityRestore(id: String!): AirQuality!
  airQualityUpdate(data: AirQualityUpdateInput!, destroyDetached: Boolean, filter: AirQualityKeyFilter, force: Boolean): AirQuality!
  airQualityUpdateByFilter(data: AirQualityUpdateByFilterInput!, filter: AirQualityFilter): AirQualityManyResponse!
  apiTokenCreate(data: ApiTokenCreateInput!): ApiTokenResponse!
  apiTokenDelete(data: ApiTokenDeleteInput, filter: ApiTokenKeyFilter, force: Boolean): SuccessResponse
  apiTokenDeleteByFilter(filter: ApiTokenFilter!, force: Boolean): SuccessResponse
  apiTokenDestroy(filter: ApiTokenKeyFilter, force: Boolean): SuccessResponse
  apiTokenDestroyByFilter(filter: ApiTokenFilter!, force: Boolean): SuccessResponse
  apiTokenRestore(id: String!): ApiToken!
  apiTokenUpdate(data: ApiTokenUpdateInput!, destroyDetached: Boolean, filter: ApiTokenKeyFilter, force: Boolean): ApiToken!
  apiTokenUpdateByFilter(data: ApiTokenUpdateByFilterInput!, filter: ApiTokenFilter): ApiTokenManyResponse!
  applicationDelete(data: ApplicationDeleteMutationInput!): SuccessResponse @deprecated(reason: "No longer supported. Use `system.applicationDelete` instead.")
  applicationInstall(data: ApplicationInstallInput!): Application @deprecated(reason: "No longer supported. Use `system.applicationInstall` instead.")
  applicationUpdate(data: ApplicationUpdateInput!): Application @deprecated(reason: "No longer supported. Use `system.applicationUpdate` instead.")
  authenticationProfileCreate(data: AuthenticationProfileCreateInput!): AuthenticationProfile!
  authenticationProfileCreateMany(data: [AuthenticationProfileCreateManyInput]!): AuthenticationProfileManyResponse!
  authenticationProfileDelete(data: AuthenticationProfileDeleteInput, filter: AuthenticationProfileKeyFilter, force: Boolean): SuccessResponse
  authenticationProfileDeleteByFilter(filter: AuthenticationProfileFilter!, force: Boolean): SuccessResponse
  authenticationProfileDestroy(filter: AuthenticationProfileKeyFilter, force: Boolean): SuccessResponse
  authenticationProfileDestroyByFilter(filter: AuthenticationProfileFilter!, force: Boolean): SuccessResponse
  authenticationProfileRestore(id: String!): AuthenticationProfile!
  authenticationProfileUpdate(data: AuthenticationProfileUpdateInput!, destroyDetached: Boolean, filter: AuthenticationProfileKeyFilter, force: Boolean): AuthenticationProfile!
  authenticationProfileUpdateByFilter(data: AuthenticationProfileUpdateByFilterInput!, filter: AuthenticationProfileFilter): AuthenticationProfileManyResponse!
  authenticationSettingsUpdate(data: AuthenticationSettingUpdateInput!): AuthenticationSetting!
  billingPlanUpdate(data: BillingPlanUpdateMutationInput!): BillingCurrentPlanResponse @deprecated(reason: "No longer supported. Use `system.billingPlanUpdate` instead.")
  buildingCreate(data: BuildingCreateInput!): Building!
  buildingCreateMany(data: [BuildingCreateManyInput]!): BuildingManyResponse!
  buildingDelete(data: BuildingDeleteInput, filter: BuildingKeyFilter, force: Boolean): SuccessResponse
  buildingDeleteByFilter(filter: BuildingFilter!, force: Boolean): SuccessResponse
  buildingDestroy(filter: BuildingKeyFilter, force: Boolean): SuccessResponse
  buildingDestroyByFilter(filter: BuildingFilter!, force: Boolean): SuccessResponse
  buildingRestore(id: String!): Building!
  buildingUpdate(data: BuildingUpdateInput!, destroyDetached: Boolean, filter: BuildingKeyFilter, force: Boolean): Building!
  buildingUpdateByFilter(data: BuildingUpdateByFilterInput!, filter: BuildingFilter): BuildingManyResponse!
  certificationCreate(data: CertificationCreateInput!): Certification!
  certificationCreateMany(data: [CertificationCreateManyInput]!): CertificationManyResponse!
  certificationDelete(data: CertificationDeleteInput, filter: CertificationKeyFilter, force: Boolean): SuccessResponse
  certificationDeleteByFilter(filter: CertificationFilter!, force: Boolean): SuccessResponse
  certificationDestroy(filter: CertificationKeyFilter, force: Boolean): SuccessResponse
  certificationDestroyByFilter(filter: CertificationFilter!, force: Boolean): SuccessResponse
  certificationRestore(id: String!): Certification!
  certificationUpdate(data: CertificationUpdateInput!, destroyDetached: Boolean, filter: CertificationKeyFilter, force: Boolean): Certification!
  certificationUpdateByFilter(data: CertificationUpdateByFilterInput!, filter: CertificationFilter): CertificationManyResponse!
  complianceRecordCreate(data: ComplianceRecordCreateInput!): ComplianceRecord!
  complianceRecordCreateMany(data: [ComplianceRecordCreateManyInput]!): ComplianceRecordManyResponse!
  complianceRecordDelete(data: ComplianceRecordDeleteInput, filter: ComplianceRecordKeyFilter, force: Boolean): SuccessResponse
  complianceRecordDeleteByFilter(filter: ComplianceRecordFilter!, force: Boolean): SuccessResponse
  complianceRecordDestroy(filter: ComplianceRecordKeyFilter, force: Boolean): SuccessResponse
  complianceRecordDestroyByFilter(filter: ComplianceRecordFilter!, force: Boolean): SuccessResponse
  complianceRecordRestore(id: String!): ComplianceRecord!
  complianceRecordUpdate(data: ComplianceRecordUpdateInput!, destroyDetached: Boolean, filter: ComplianceRecordKeyFilter, force: Boolean): ComplianceRecord!
  complianceRecordUpdateByFilter(data: ComplianceRecordUpdateByFilterInput!, filter: ComplianceRecordFilter): ComplianceRecordManyResponse!
  deploy(data: DeployingBuildInput): Boolean @deprecated(reason: "No longer supported. Use `system.deploy` instead.")
  documentCreate(data: DocumentCreateInput!): Document!
  documentCreateMany(data: [DocumentCreateManyInput]!): DocumentManyResponse!
  documentDelete(data: DocumentDeleteInput, filter: DocumentKeyFilter, force: Boolean): SuccessResponse
  documentDeleteByFilter(filter: DocumentFilter!, force: Boolean): SuccessResponse
  documentDestroy(filter: DocumentKeyFilter, force: Boolean): SuccessResponse
  documentDestroyByFilter(filter: DocumentFilter!, force: Boolean): SuccessResponse
  documentRestore(id: String!): Document!
  documentUpdate(data: DocumentUpdateInput!, destroyDetached: Boolean, filter: DocumentKeyFilter, force: Boolean): Document!
  documentUpdateByFilter(data: DocumentUpdateByFilterInput!, filter: DocumentFilter): DocumentManyResponse!
  energyEfficiencyCreate(data: EnergyEfficiencyCreateInput!): EnergyEfficiency!
  energyEfficiencyCreateMany(data: [EnergyEfficiencyCreateManyInput]!): EnergyEfficiencyManyResponse!
  energyEfficiencyDelete(data: EnergyEfficiencyDeleteInput, filter: EnergyEfficiencyKeyFilter, force: Boolean): SuccessResponse
  energyEfficiencyDeleteByFilter(filter: EnergyEfficiencyFilter!, force: Boolean): SuccessResponse
  energyEfficiencyDestroy(filter: EnergyEfficiencyKeyFilter, force: Boolean): SuccessResponse
  energyEfficiencyDestroyByFilter(filter: EnergyEfficiencyFilter!, force: Boolean): SuccessResponse
  energyEfficiencyRestore(id: String!): EnergyEfficiency!
  energyEfficiencyUpdate(data: EnergyEfficiencyUpdateInput!, destroyDetached: Boolean, filter: EnergyEfficiencyKeyFilter, force: Boolean): EnergyEfficiency!
  energyEfficiencyUpdateByFilter(data: EnergyEfficiencyUpdateByFilterInput!, filter: EnergyEfficiencyFilter): EnergyEfficiencyManyResponse!
  environmentVariableCreate(data: EnvironmentVariableCreateInput!): EnvironmentVariable!
  environmentVariableCreateMany(data: [EnvironmentVariableCreateManyInput]!): EnvironmentVariableManyResponse!
  environmentVariableDelete(data: EnvironmentVariableDeleteInput, filter: EnvironmentVariableKeyFilter, force: Boolean): SuccessResponse
  environmentVariableDeleteByFilter(filter: EnvironmentVariableFilter!, force: Boolean): SuccessResponse
  environmentVariableDestroy(filter: EnvironmentVariableKeyFilter, force: Boolean): SuccessResponse
  environmentVariableDestroyByFilter(filter: EnvironmentVariableFilter!, force: Boolean): SuccessResponse
  environmentVariableRestore(id: String!): EnvironmentVariable!
  environmentVariableUpdate(data: EnvironmentVariableUpdateInput!, destroyDetached: Boolean, filter: EnvironmentVariableKeyFilter, force: Boolean): EnvironmentVariable!
  environmentVariableUpdateByFilter(data: EnvironmentVariableUpdateByFilterInput!, filter: EnvironmentVariableFilter): EnvironmentVariableManyResponse!
  environmentalDatumCreate(data: EnvironmentalDatumCreateInput!): EnvironmentalDatum!
  environmentalDatumCreateMany(data: [EnvironmentalDatumCreateManyInput]!): EnvironmentalDatumManyResponse!
  environmentalDatumDelete(data: EnvironmentalDatumDeleteInput, filter: EnvironmentalDatumKeyFilter, force: Boolean): SuccessResponse
  environmentalDatumDeleteByFilter(filter: EnvironmentalDatumFilter!, force: Boolean): SuccessResponse
  environmentalDatumDestroy(filter: EnvironmentalDatumKeyFilter, force: Boolean): SuccessResponse
  environmentalDatumDestroyByFilter(filter: EnvironmentalDatumFilter!, force: Boolean): SuccessResponse
  environmentalDatumRestore(id: String!): EnvironmentalDatum!
  environmentalDatumUpdate(data: EnvironmentalDatumUpdateInput!, destroyDetached: Boolean, filter: EnvironmentalDatumKeyFilter, force: Boolean): EnvironmentalDatum!
  environmentalDatumUpdateByFilter(data: EnvironmentalDatumUpdateByFilterInput!, filter: EnvironmentalDatumFilter): EnvironmentalDatumManyResponse!
  equipmentCreate(data: EquipmentCreateInput!): Equipment!
  equipmentCreateMany(data: [EquipmentCreateManyInput]!): EquipmentManyResponse!
  equipmentDelete(data: EquipmentDeleteInput, filter: EquipmentKeyFilter, force: Boolean): SuccessResponse
  equipmentDeleteByFilter(filter: EquipmentFilter!, force: Boolean): SuccessResponse
  equipmentDestroy(filter: EquipmentKeyFilter, force: Boolean): SuccessResponse
  equipmentDestroyByFilter(filter: EquipmentFilter!, force: Boolean): SuccessResponse
  equipmentRestore(id: String!): Equipment!
  equipmentUpdate(data: EquipmentUpdateInput!, destroyDetached: Boolean, filter: EquipmentKeyFilter, force: Boolean): Equipment!
  equipmentUpdateByFilter(data: EquipmentUpdateByFilterInput!, filter: EquipmentFilter): EquipmentManyResponse!
  fieldCreate(data: TableFieldCreateInput!): TableField! @deprecated(reason: "No longer supported. Use `system.fieldCreate` instead.")
  fieldDelete(data: TableFieldDeleteInput!): SuccessResponse! @deprecated(reason: "No longer supported. Use `system.fieldDelete` instead.")
  fieldUpdate(data: TableFieldUpdateInput!): TableField! @deprecated(reason: "No longer supported. Use `system.fieldUpdate` instead.")
  fieldUpdatePosition(data: TableFieldPositionUpdateInput!): SuccessResponse! @deprecated(reason: "No longer supported. Use `system.fieldUpdatePosition` instead.")
  fileCreate(data: FileCreateInput!): File!
  fileCreateMany(data: [FileCreateManyInput]!): FileManyResponse!
  fileDelete(data: FileDeleteInput, filter: FileKeyFilter, force: Boolean): SuccessResponse
  fileDeleteByFilter(filter: FileFilter!, force: Boolean): SuccessResponse
  fileDestroy(filter: FileKeyFilter, force: Boolean): SuccessResponse
  fileDestroyByFilter(filter: FileFilter!, force: Boolean): SuccessResponse
  fileRestore(id: String!): File!
  fileUpdate(data: FileUpdateInput!, destroyDetached: Boolean, filter: FileKeyFilter, force: Boolean): File!
  fileUpdateByFilter(data: FileUpdateByFilterInput!, filter: FileFilter): FileManyResponse!
  filesSettingCreate(data: FilesSettingCreateInput!): FilesSetting!
  filesSettingCreateMany(data: [FilesSettingCreateManyInput]!): FilesSettingManyResponse!
  filesSettingDelete(data: FilesSettingDeleteInput, filter: FilesSettingKeyFilter, force: Boolean): SuccessResponse
  filesSettingDeleteByFilter(filter: FilesSettingFilter!, force: Boolean): SuccessResponse
  filesSettingDestroy(filter: FilesSettingKeyFilter, force: Boolean): SuccessResponse
  filesSettingDestroyByFilter(filter: FilesSettingFilter!, force: Boolean): SuccessResponse
  filesSettingRestore(id: String!): FilesSetting!
  filesSettingUpdate(data: FilesSettingUpdateInput!, destroyDetached: Boolean, filter: FilesSettingKeyFilter, force: Boolean): FilesSetting!
  filesSettingUpdateByFilter(data: FilesSettingUpdateByFilterInput!, filter: FilesSettingFilter): FilesSettingManyResponse!
  improvementCreate(data: ImprovementCreateInput!): Improvement!
  improvementCreateMany(data: [ImprovementCreateManyInput]!): ImprovementManyResponse!
  improvementDelete(data: ImprovementDeleteInput, filter: ImprovementKeyFilter, force: Boolean): SuccessResponse
  improvementDeleteByFilter(filter: ImprovementFilter!, force: Boolean): SuccessResponse
  improvementDestroy(filter: ImprovementKeyFilter, force: Boolean): SuccessResponse
  improvementDestroyByFilter(filter: ImprovementFilter!, force: Boolean): SuccessResponse
  improvementRestore(id: String!): Improvement!
  improvementUpdate(data: ImprovementUpdateInput!, destroyDetached: Boolean, filter: ImprovementKeyFilter, force: Boolean): Improvement!
  improvementUpdateByFilter(data: ImprovementUpdateByFilterInput!, filter: ImprovementFilter): ImprovementManyResponse!
  indexCreate(data: IndexCreateInput!): TableIndex!
  indexDelete(data: IndexDeleteInput!): SuccessResponse
  indexUpdate(data: IndexUpdateInput!): TableIndex!
  invoke(data: InvokeData): InvokeFunctionResponse @deprecated(reason: "No longer supported. Use `system.invoke` instead.")
  maintenanceRecordCreate(data: MaintenanceRecordCreateInput!): MaintenanceRecord!
  maintenanceRecordCreateMany(data: [MaintenanceRecordCreateManyInput]!): MaintenanceRecordManyResponse!
  maintenanceRecordDelete(data: MaintenanceRecordDeleteInput, filter: MaintenanceRecordKeyFilter, force: Boolean): SuccessResponse
  maintenanceRecordDeleteByFilter(filter: MaintenanceRecordFilter!, force: Boolean): SuccessResponse
  maintenanceRecordDestroy(filter: MaintenanceRecordKeyFilter, force: Boolean): SuccessResponse
  maintenanceRecordDestroyByFilter(filter: MaintenanceRecordFilter!, force: Boolean): SuccessResponse
  maintenanceRecordRestore(id: String!): MaintenanceRecord!
  maintenanceRecordUpdate(data: MaintenanceRecordUpdateInput!, destroyDetached: Boolean, filter: MaintenanceRecordKeyFilter, force: Boolean): MaintenanceRecord!
  maintenanceRecordUpdateByFilter(data: MaintenanceRecordUpdateByFilterInput!, filter: MaintenanceRecordFilter): MaintenanceRecordManyResponse!
  notificationCreate(data: NotificationCreateInput!): Notification!
  notificationCreateMany(data: [NotificationCreateManyInput]!): NotificationManyResponse!
  notificationDelete(data: NotificationDeleteInput, filter: NotificationKeyFilter, force: Boolean): SuccessResponse
  notificationDeleteByFilter(filter: NotificationFilter!, force: Boolean): SuccessResponse
  notificationDestroy(filter: NotificationKeyFilter, force: Boolean): SuccessResponse
  notificationDestroyByFilter(filter: NotificationFilter!, force: Boolean): SuccessResponse
  notificationRestore(id: String!): Notification!
  notificationUpdate(data: NotificationUpdateInput!, destroyDetached: Boolean, filter: NotificationKeyFilter, force: Boolean): Notification!
  notificationUpdateByFilter(data: NotificationUpdateByFilterInput!, filter: NotificationFilter): NotificationManyResponse!
  permitCreate(data: PermitCreateInput!): Permit!
  permitCreateMany(data: [PermitCreateManyInput]!): PermitManyResponse!
  permitDelete(data: PermitDeleteInput, filter: PermitKeyFilter, force: Boolean): SuccessResponse
  permitDeleteByFilter(filter: PermitFilter!, force: Boolean): SuccessResponse
  permitDestroy(filter: PermitKeyFilter, force: Boolean): SuccessResponse
  permitDestroyByFilter(filter: PermitFilter!, force: Boolean): SuccessResponse
  permitRestore(id: String!): Permit!
  permitUpdate(data: PermitUpdateInput!, destroyDetached: Boolean, filter: PermitKeyFilter, force: Boolean): Permit!
  permitUpdateByFilter(data: PermitUpdateByFilterInput!, filter: PermitFilter): PermitManyResponse!
  prepareDeploy: DeployDataResponse! @deprecated(reason: "No longer supported. Use `system.prepareDeploy` instead.")
  reportCreate(data: ReportCreateInput!): Report!
  reportCreateMany(data: [ReportCreateManyInput]!): ReportManyResponse!
  reportDelete(data: ReportDeleteInput, filter: ReportKeyFilter, force: Boolean): SuccessResponse
  reportDeleteByFilter(filter: ReportFilter!, force: Boolean): SuccessResponse
  reportDestroy(filter: ReportKeyFilter, force: Boolean): SuccessResponse
  reportDestroyByFilter(filter: ReportFilter!, force: Boolean): SuccessResponse
  reportRestore(id: String!): Report!
  reportUpdate(data: ReportUpdateInput!, destroyDetached: Boolean, filter: ReportKeyFilter, force: Boolean): Report!
  reportUpdateByFilter(data: ReportUpdateByFilterInput!, filter: ReportFilter): ReportManyResponse!
  roleCreate(data: RoleCreateInput!): Role!
  roleCreateMany(data: [RoleCreateManyInput]!): RoleManyResponse!
  roleDelete(data: RoleDeleteInput, filter: RoleKeyFilter, force: Boolean): SuccessResponse
  roleDeleteByFilter(filter: RoleFilter!, force: Boolean): SuccessResponse
  roleDestroy(filter: RoleKeyFilter, force: Boolean): SuccessResponse
  roleDestroyByFilter(filter: RoleFilter!, force: Boolean): SuccessResponse
  roleRestore(id: String!): Role!
  roleUpdate(data: RoleUpdateInput!, destroyDetached: Boolean, filter: RoleKeyFilter, force: Boolean): Role!
  roleUpdateByFilter(data: RoleUpdateByFilterInput!, filter: RoleFilter): RoleManyResponse!
  searchCriterionCreate(data: SearchCriterionCreateInput!): SearchCriterion!
  searchCriterionCreateMany(data: [SearchCriterionCreateManyInput]!): SearchCriterionManyResponse!
  searchCriterionDelete(data: SearchCriterionDeleteInput, filter: SearchCriterionKeyFilter, force: Boolean): SuccessResponse
  searchCriterionDeleteByFilter(filter: SearchCriterionFilter!, force: Boolean): SuccessResponse
  searchCriterionDestroy(filter: SearchCriterionKeyFilter, force: Boolean): SuccessResponse
  searchCriterionDestroyByFilter(filter: SearchCriterionFilter!, force: Boolean): SuccessResponse
  searchCriterionRestore(id: String!): SearchCriterion!
  searchCriterionUpdate(data: SearchCriterionUpdateInput!, destroyDetached: Boolean, filter: SearchCriterionKeyFilter, force: Boolean): SearchCriterion!
  searchCriterionUpdateByFilter(data: SearchCriterionUpdateByFilterInput!, filter: SearchCriterionFilter): SearchCriterionManyResponse!
  sendInvitationTo8base(inviteEmail: String!): SuccessResponse
  settingsUpdate(data: SettingUpdateInput!): Setting!
  subscriptionsAppCreate(data: SubscriptionsAppCreateInput!): SubscriptionsApp!
  subscriptionsAppCreateMany(data: [SubscriptionsAppCreateManyInput]!): SubscriptionsAppManyResponse!
  subscriptionsAppDelete(data: SubscriptionsAppDeleteInput, filter: SubscriptionsAppKeyFilter, force: Boolean): SuccessResponse
  subscriptionsAppDeleteByFilter(filter: SubscriptionsAppFilter!, force: Boolean): SuccessResponse
  subscriptionsAppDestroy(filter: SubscriptionsAppKeyFilter, force: Boolean): SuccessResponse
  subscriptionsAppDestroyByFilter(filter: SubscriptionsAppFilter!, force: Boolean): SuccessResponse
  subscriptionsAppRestore(id: String!): SubscriptionsApp!
  subscriptionsAppUpdate(data: SubscriptionsAppUpdateInput!, destroyDetached: Boolean, filter: SubscriptionsAppKeyFilter, force: Boolean): SubscriptionsApp!
  subscriptionsAppUpdateByFilter(data: SubscriptionsAppUpdateByFilterInput!, filter: SubscriptionsAppFilter): SubscriptionsAppManyResponse!
  system: SystemMutation
  tableCreate(data: TableCreateInput!): Table! @deprecated(reason: "No longer supported. Use `system.tableCreate` instead.")
  tableDelete(data: TableDeleteInput!): SuccessResponse! @deprecated(reason: "No longer supported. Use `system.tableDelete` instead.")
  tableUpdate(data: TableUpdateInput!): Table! @deprecated(reason: "No longer supported. Use `system.tableUpdate` instead.")
  userChangePassword(data: ChangePasswordInput!): SuccessResponse
  userCreate(data: UserCreateInput!): User!
  userCreateMany(data: [UserCreateManyInput]!): UserManyResponse!
  userDelete(data: UserDeleteInput, filter: UserKeyFilter, force: Boolean): SuccessResponse
  userDeleteByFilter(filter: UserFilter!, force: Boolean): SuccessResponse
  userDestroy(filter: UserKeyFilter, force: Boolean): SuccessResponse
  userDestroyByFilter(filter: UserFilter!, force: Boolean): SuccessResponse
  userLogin(data: UserLoginInput!): LoginResponse
  userPasswordForgot(data: PasswordForgotInput!): SuccessResponse
  userPasswordForgotConfirm(data: PasswordForgotConfirmInput!): SuccessResponse
  userRefreshToken(data: RefreshTokenInput!): Auth
  userRestore(id: String!): User!
  userSignUp(authProfileId: ID, user: UserCreateInput!): User! @deprecated(reason: "No longer supported. Use `userSignUpWithToken` instead.")
  userSignUpResend(data: SignUpResendInput!): SuccessResponse @deprecated(reason: "No longer supported. Use `userVerificationEmailResend` instead.")
  userSignUpWithPassword(authProfileId: ID, password: String!, user: UserCreateInput!): User!
  userSignUpWithToken(authProfileId: ID, user: UserCreateInput!): User!
  userUpdate(data: UserUpdateInput!, destroyDetached: Boolean, filter: UserKeyFilter, force: Boolean): User!
  userUpdateByFilter(data: UserUpdateByFilterInput!, filter: UserFilter): UserManyResponse!
  userVerificationEmailResend(authProfileId: ID, data: VerificationEmailResendInput!): SuccessResponse
  viewCreate(data: ViewCreateInput!): Table! @deprecated(reason: "No longer supported. Use `system.viewCreate` instead.")
  viewUpdate(data: ViewUpdateInput!): Table!
  workOrderCreate(data: WorkOrderCreateInput!): WorkOrder!
  workOrderCreateMany(data: [WorkOrderCreateManyInput]!): WorkOrderManyResponse!
  workOrderDelete(data: WorkOrderDeleteInput, filter: WorkOrderKeyFilter, force: Boolean): SuccessResponse
  workOrderDeleteByFilter(filter: WorkOrderFilter!, force: Boolean): SuccessResponse
  workOrderDestroy(filter: WorkOrderKeyFilter, force: Boolean): SuccessResponse
  workOrderDestroyByFilter(filter: WorkOrderFilter!, force: Boolean): SuccessResponse
  workOrderRestore(id: String!): WorkOrder!
  workOrderUpdate(data: WorkOrderUpdateInput!, destroyDetached: Boolean, filter: WorkOrderKeyFilter, force: Boolean): WorkOrder!
  workOrderUpdateByFilter(data: WorkOrderUpdateByFilterInput!, filter: WorkOrderFilter): WorkOrderManyResponse!
  workspaceCreate(data: WorkspaceCreateMutationInput!): WorkspaceCreateResponse @deprecated(reason: "No longer supported. Use `system.workspaceCreate` instead.")
  workspaceCreateAsync(data: WorkspaceCreateMutationInput!): WorkspaceCreateResponse @deprecated(reason: "No longer supported. Use `system.workspaceCreateAsync` instead.")
  workspaceDelete(data: WorkspaceDeleteMutationInput!): SuccessResponse
  workspaceLeave(force: Boolean): SuccessResponse @deprecated(reason: "No longer supported. Use `system.workspaceLeave` instead.")
  workspaceUpdate(data: WorkspaceUpdateMutationInput!): WorkspaceUpdateResponse @deprecated(reason: "No longer supported. Use `system.workspaceUpdate` instead.")
}

enum MutationType {
  create
  delete
  destroy
  update
}

"""
Stores notifications sent to users regarding compliance deadlines, maintenance tasks, and updates.
"""
type Notification {
  _description: String
  createdAt: DateTime
  deletedAt: Int
  id: ID

  """Indicates if the notification has been read."""
  is_read: Boolean

  """The notification message content."""
  message: String

  """Type of the notification (e.g., compliance, maintenance, update)."""
  type: String
  updatedAt: DateTime

  """Reference to the user who received the notification."""
  user_id: User
}

"""Notifications create input"""
input NotificationCreateInput {
  """Indicates if the notification has been read."""
  is_read: Boolean

  """The notification message content."""
  message: String

  """Type of the notification (e.g., compliance, maintenance, update)."""
  type: String
  user_id: NotificationsUser_idRelationInput
}

"""Notifications create many input"""
input NotificationCreateManyInput {
  """Indicates if the notification has been read."""
  is_read: Boolean

  """The notification message content."""
  message: String

  """Type of the notification (e.g., compliance, maintenance, update)."""
  type: String
}

"""Notifications delete input"""
input NotificationDeleteInput {
  force: Boolean
  id: ID
}

"""NotificationFieldsPermissions create input"""
input NotificationFieldsPermissions {
  createdAt: Boolean
  is_read: Boolean
  message: Boolean
  type: Boolean
  updatedAt: Boolean
}

input NotificationFilter {
  AND: [NotificationFilter!]
  OR: [NotificationFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  is_read: BoolPredicate
  message: StringPredicate
  type: StringPredicate
  updatedAt: DateTimePredicate
  user_id: UserFilter
}

input NotificationGroupBy {
  first: Int
  having: Having
  last: Int
  query: NotificationGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input NotificationGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  id: [GroupByField!]
  is_read: [GroupByField!]
  message: [GroupByField!]
  type: [GroupByField!]
  updatedAt: [GroupByField!]
  user_id: UserGroupByQuery
}

input NotificationKeyFilter {
  id: ID
}

"""NotificationListResponse output"""
type NotificationListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Notification!]!
}

"""NotificationManyResponse output"""
type NotificationManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Notification!]!
}

"""No longer supported. Use `sort` instead."""
enum NotificationOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  is_read_ASC
  is_read_DESC
  message_ASC
  message_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Notifications subscription payload"""
type NotificationPayload {
  mutation: MutationType!
  node: Notification
  previousValues: Notification
  updatedFields: [String]
}

input NotificationRelationFilter {
  every: NotificationFilter
  none: NotificationFilter
  some: NotificationFilter
}

input NotificationSort {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  is_read: SortOrder
  message: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  user_id: UserSort
}

enum NotificationStatusType {
  done
}

"""Notifications subscription filter"""
input NotificationSubscriptionFilter {
  mutation_in: [MutationType]
  node: NotificationFilter
  updatedFields: UpdatedFieldsFilter
}

"""Notifications update input"""
input NotificationUpdateByFilterInput {
  is_read: [UpdateByFilterBooleanSwitchInput]
  message: [UpdateByFilterStringInput]
  type: [UpdateByFilterStringInput]
}

"""Notifications update input"""
input NotificationUpdateInput {
  id: ID

  """Indicates if the notification has been read."""
  is_read: Boolean

  """The notification message content."""
  message: String

  """Type of the notification (e.g., compliance, maintenance, update)."""
  type: String
  user_id: NotificationsUser_idUpdateRelationInput
}

input Notification_PermissionFilter {
  AND: [Notification_PermissionFilter!]
  OR: [Notification_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  is_read: BoolPredicate
  message: StringPredicate
  type: StringPredicate
  updatedAt: DateTimePredicate
  user_id: User_PermissionFilter
}

input Notification_PermissionRelationFilter {
  every: Notification_PermissionFilter
  none: Notification_PermissionFilter
  some: Notification_PermissionFilter
}

"""Notifications relation input"""
input NotificationsUser_idRelationInput {
  create: Notifications_UserCreateInput
}

"""Notifications relation input"""
input NotificationsUser_idUpdateRelationInput {
  update: Notifications_UserUpdateInput
}

"""Users create input from Notifications"""
input Notifications_UserCreateInput {
  Notifications: UsersNotificationsRelationInput
  Reports: UsersReportsRelationInput!
  SearchCriteria: UsersSearchCriteriaRelationInput!
  SubscriptionsApps: UsersSubscriptionsAppsRelationInput
  WorkOrders: UsersWorkOrdersRelationInput
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users update input from Notifications"""
input Notifications_UserUpdateInput {
  Notifications: UsersNotificationsUpdateRelationInput
  Reports: UsersReportsUpdateRelationInput
  SearchCriteria: UsersSearchCriteriaUpdateRelationInput
  SubscriptionsApps: UsersSubscriptionsAppsUpdateRelationInput
  WorkOrders: UsersWorkOrdersUpdateRelationInput
  avatar: UsersAvatarUpdateRelationInput
  email: String
  firstName: String
  lastName: String
  roles: UsersRolesUpdateRelationInput
  status: String
  timezone: String
}

"""Number Field Attributes"""
type NumberFieldTypeAttributes {
  autoIncrement: Boolean
  currency: String
  format: String!
  isBigInt: Boolean
  maxValue: Float
  minValue: Float
  precision: Int
}

"""Number Type Format Enum"""
enum NumberTypeFormatEnum {
  CURRENCY
  FRACTION
  NUMBER
  PERCENTAGE
  SCIENTIFIC
}

type OrganizationUpgradeResponse {
  organizationId: String!
}

type OrganizationUserInvitationResponse {
  invitationId: String!
}

"""PasswordForgotConfirmInput"""
input PasswordForgotConfirmInput {
  authProfileId: ID!
  code: String!
  email: String!
  newPassword: String!
}

"""PasswordForgotInput"""
input PasswordForgotInput {
  authProfileId: ID!
  email: String!
}

input PatternFunctionArguments {
  escape: String
  pattern: String!
}

type Permission {
  _description: String
  appId: String
  createdAt: DateTime
  createdBy: User
  permission: JSON
  resource: String
  resourceType: String
  role: Role
  updatedAt: DateTime
}

input PermissionFilter {
  AND: [PermissionFilter!]
  OR: [PermissionFilter!]
  _fullText: String
  appId: StringPredicate
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  resource: StringPredicate
  resourceType: StringPredicate
  role: RoleFilter
  updatedAt: DateTimePredicate
}

input PermissionGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  appId: [GroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  permission: [GroupByField!]
  resource: [GroupByField!]
  resourceType: [GroupByField!]
  role: RoleGroupByQuery
  updatedAt: [GroupByField!]
}

"""Permission Filter"""
input PermissionInputFilter {
  action: String
  applicationName: String
  resource: String
  resourceType: PermissionResourceTypeEnum
}

"""PermissionListResponse output"""
type PermissionListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Permission!]!
}

"""Permissions subscription payload"""
type PermissionPayload {
  mutation: MutationType!
  node: Permission
  previousValues: Permission
  updatedFields: [String]
}

input PermissionRelationFilter {
  every: PermissionFilter
  none: PermissionFilter
  some: PermissionFilter
}

enum PermissionResourceTypeEnum {
  custom
  data
}

"""Permissions subscription filter"""
input PermissionSubscriptionFilter {
  mutation_in: [MutationType]
  node: PermissionFilter
  updatedFields: UpdatedFieldsFilter
}

input Permission_PermissionFilter {
  AND: [Permission_PermissionFilter!]
  OR: [Permission_PermissionFilter!]
  _fullText: String
  appId: StringPredicate
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  resource: StringPredicate
  resourceType: StringPredicate
  role: Role_PermissionFilter
  updatedAt: DateTimePredicate
}

input Permission_PermissionRelationFilter {
  every: Permission_PermissionFilter
  none: Permission_PermissionFilter
  some: Permission_PermissionFilter
}

"""custom permissions input"""
input PermissionsCustom {
  data: PermissionsCustomData
  logic: PermissionsCustomLogic
  settings: PermissionsCustomSettings
  users: PermissionsCustomUsers
}

input PermissionsCustomData {
  schemaManagement: PermissionsCustomDataSchemaManagement
  viewerAccess: PermissionsCustomDataViewerAccess
}

input PermissionsCustomDataSchemaManagement {
  allow: Boolean!
}

input PermissionsCustomDataViewerAccess {
  allow: Boolean!
}

input PermissionsCustomLogic {
  deploy: PermissionsCustomLogicDeploy
  invoke: PermissionsCustomLogicInvoke
  logs: PermissionsCustomLogicLogs
  view: PermissionsCustomLogicView
}

input PermissionsCustomLogicDeploy {
  allow: Boolean!
}

input PermissionsCustomLogicInvoke {
  allow: Boolean!
}

input PermissionsCustomLogicLogs {
  allow: Boolean!
}

input PermissionsCustomLogicView {
  allow: Boolean!
}

input PermissionsCustomSettings {
  workspaceAdministration: PermissionsCustomSettingsWorkspaceAdministration
}

input PermissionsCustomSettingsWorkspaceAdministration {
  allow: Boolean!
}

input PermissionsCustomUsers {
  teamAdministration: PermissionsCustomUsersTeamAdministration
}

input PermissionsCustomUsersTeamAdministration {
  allow: Boolean!
}

"""Schema tables permissions input"""
input PermissionsData {
  AirQuality: PermissionsDataAirQuality
  Buildings: PermissionsDataBuildings
  Certifications: PermissionsDataCertifications
  ComplianceRecords: PermissionsDataComplianceRecords
  Documents: PermissionsDataDocuments
  EnergyEfficiency: PermissionsDataEnergyEfficiency
  EnvironmentalData: PermissionsDataEnvironmentalData
  Equipment: PermissionsDataEquipment
  Files: PermissionsDataFiles
  FilesSettings: PermissionsDataFilesSettings
  Improvements: PermissionsDataImprovements
  MaintenanceRecords: PermissionsDataMaintenanceRecords
  Notifications: PermissionsDataNotifications
  Permits: PermissionsDataPermits
  Reports: PermissionsDataReports
  Roles: PermissionsDataRoles
  SearchCriteria: PermissionsDataSearchCriteria
  SubscriptionsApps: PermissionsDataSubscriptionsApps
  Users: PermissionsDataUsers
  WorkOrders: PermissionsDataWorkOrders
}

input PermissionsDataAirQuality {
  create: PermissionsDataAirQualityCreate
  delete: PermissionsDataAirQualityDelete
  destroy: PermissionsDataAirQualityDestroy
  read: PermissionsDataAirQualityRead
  update: PermissionsDataAirQualityUpdate
}

input PermissionsDataAirQualityCreate {
  allow: Boolean!
}

input PermissionsDataAirQualityDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataAirQualityDestroy {
  allow: Boolean!
}

input PermissionsDataAirQualityRead {
  allow: Boolean!
  fields: AirQualityFieldsPermissions
  filter: AirQuality_PermissionFilter
}

input PermissionsDataAirQualityUpdate {
  allow: Boolean!
  fields: AirQualityFieldsPermissions
  filter: AirQuality_PermissionFilter
}

input PermissionsDataBuildings {
  create: PermissionsDataBuildingsCreate
  delete: PermissionsDataBuildingsDelete
  destroy: PermissionsDataBuildingsDestroy
  read: PermissionsDataBuildingsRead
  update: PermissionsDataBuildingsUpdate
}

input PermissionsDataBuildingsCreate {
  allow: Boolean!
}

input PermissionsDataBuildingsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataBuildingsDestroy {
  allow: Boolean!
}

input PermissionsDataBuildingsRead {
  allow: Boolean!
  fields: BuildingFieldsPermissions
  filter: Building_PermissionFilter
}

input PermissionsDataBuildingsUpdate {
  allow: Boolean!
  fields: BuildingFieldsPermissions
  filter: Building_PermissionFilter
}

input PermissionsDataCertifications {
  create: PermissionsDataCertificationsCreate
  delete: PermissionsDataCertificationsDelete
  destroy: PermissionsDataCertificationsDestroy
  read: PermissionsDataCertificationsRead
  update: PermissionsDataCertificationsUpdate
}

input PermissionsDataCertificationsCreate {
  allow: Boolean!
}

input PermissionsDataCertificationsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataCertificationsDestroy {
  allow: Boolean!
}

input PermissionsDataCertificationsRead {
  allow: Boolean!
  fields: CertificationFieldsPermissions
  filter: Certification_PermissionFilter
}

input PermissionsDataCertificationsUpdate {
  allow: Boolean!
  fields: CertificationFieldsPermissions
  filter: Certification_PermissionFilter
}

input PermissionsDataComplianceRecords {
  create: PermissionsDataComplianceRecordsCreate
  delete: PermissionsDataComplianceRecordsDelete
  destroy: PermissionsDataComplianceRecordsDestroy
  read: PermissionsDataComplianceRecordsRead
  update: PermissionsDataComplianceRecordsUpdate
}

input PermissionsDataComplianceRecordsCreate {
  allow: Boolean!
}

input PermissionsDataComplianceRecordsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataComplianceRecordsDestroy {
  allow: Boolean!
}

input PermissionsDataComplianceRecordsRead {
  allow: Boolean!
  fields: ComplianceRecordFieldsPermissions
  filter: ComplianceRecord_PermissionFilter
}

input PermissionsDataComplianceRecordsUpdate {
  allow: Boolean!
  fields: ComplianceRecordFieldsPermissions
  filter: ComplianceRecord_PermissionFilter
}

input PermissionsDataDocuments {
  create: PermissionsDataDocumentsCreate
  delete: PermissionsDataDocumentsDelete
  destroy: PermissionsDataDocumentsDestroy
  read: PermissionsDataDocumentsRead
  update: PermissionsDataDocumentsUpdate
}

input PermissionsDataDocumentsCreate {
  allow: Boolean!
}

input PermissionsDataDocumentsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataDocumentsDestroy {
  allow: Boolean!
}

input PermissionsDataDocumentsRead {
  allow: Boolean!
  fields: DocumentFieldsPermissions
  filter: Document_PermissionFilter
}

input PermissionsDataDocumentsUpdate {
  allow: Boolean!
  fields: DocumentFieldsPermissions
  filter: Document_PermissionFilter
}

input PermissionsDataEnergyEfficiency {
  create: PermissionsDataEnergyEfficiencyCreate
  delete: PermissionsDataEnergyEfficiencyDelete
  destroy: PermissionsDataEnergyEfficiencyDestroy
  read: PermissionsDataEnergyEfficiencyRead
  update: PermissionsDataEnergyEfficiencyUpdate
}

input PermissionsDataEnergyEfficiencyCreate {
  allow: Boolean!
}

input PermissionsDataEnergyEfficiencyDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataEnergyEfficiencyDestroy {
  allow: Boolean!
}

input PermissionsDataEnergyEfficiencyRead {
  allow: Boolean!
  fields: EnergyEfficiencyFieldsPermissions
  filter: EnergyEfficiency_PermissionFilter
}

input PermissionsDataEnergyEfficiencyUpdate {
  allow: Boolean!
  fields: EnergyEfficiencyFieldsPermissions
  filter: EnergyEfficiency_PermissionFilter
}

input PermissionsDataEnvironmentalData {
  create: PermissionsDataEnvironmentalDataCreate
  delete: PermissionsDataEnvironmentalDataDelete
  destroy: PermissionsDataEnvironmentalDataDestroy
  read: PermissionsDataEnvironmentalDataRead
  update: PermissionsDataEnvironmentalDataUpdate
}

input PermissionsDataEnvironmentalDataCreate {
  allow: Boolean!
}

input PermissionsDataEnvironmentalDataDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataEnvironmentalDataDestroy {
  allow: Boolean!
}

input PermissionsDataEnvironmentalDataRead {
  allow: Boolean!
  fields: EnvironmentalDatumFieldsPermissions
  filter: EnvironmentalDatum_PermissionFilter
}

input PermissionsDataEnvironmentalDataUpdate {
  allow: Boolean!
  fields: EnvironmentalDatumFieldsPermissions
  filter: EnvironmentalDatum_PermissionFilter
}

input PermissionsDataEquipment {
  create: PermissionsDataEquipmentCreate
  delete: PermissionsDataEquipmentDelete
  destroy: PermissionsDataEquipmentDestroy
  read: PermissionsDataEquipmentRead
  update: PermissionsDataEquipmentUpdate
}

input PermissionsDataEquipmentCreate {
  allow: Boolean!
}

input PermissionsDataEquipmentDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataEquipmentDestroy {
  allow: Boolean!
}

input PermissionsDataEquipmentRead {
  allow: Boolean!
  fields: EquipmentFieldsPermissions
  filter: Equipment_PermissionFilter
}

input PermissionsDataEquipmentUpdate {
  allow: Boolean!
  fields: EquipmentFieldsPermissions
  filter: Equipment_PermissionFilter
}

input PermissionsDataFiles {
  create: PermissionsDataFilesCreate
  delete: PermissionsDataFilesDelete
  destroy: PermissionsDataFilesDestroy
  read: PermissionsDataFilesRead
  update: PermissionsDataFilesUpdate
}

input PermissionsDataFilesCreate {
  allow: Boolean!
}

input PermissionsDataFilesDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataFilesDestroy {
  allow: Boolean!
}

input PermissionsDataFilesRead {
  allow: Boolean!
  fields: FileFieldsPermissions
  filter: File_PermissionFilter
}

input PermissionsDataFilesSettings {
  create: PermissionsDataFilesSettingsCreate
  delete: PermissionsDataFilesSettingsDelete
  destroy: PermissionsDataFilesSettingsDestroy
  read: PermissionsDataFilesSettingsRead
  update: PermissionsDataFilesSettingsUpdate
}

input PermissionsDataFilesSettingsCreate {
  allow: Boolean!
}

input PermissionsDataFilesSettingsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataFilesSettingsDestroy {
  allow: Boolean!
}

input PermissionsDataFilesSettingsRead {
  allow: Boolean!
  fields: FilesSettingFieldsPermissions
  filter: FilesSetting_PermissionFilter
}

input PermissionsDataFilesSettingsUpdate {
  allow: Boolean!
  fields: FilesSettingFieldsPermissions
  filter: FilesSetting_PermissionFilter
}

input PermissionsDataFilesUpdate {
  allow: Boolean!
  fields: FileFieldsPermissions
  filter: File_PermissionFilter
}

input PermissionsDataImprovements {
  create: PermissionsDataImprovementsCreate
  delete: PermissionsDataImprovementsDelete
  destroy: PermissionsDataImprovementsDestroy
  read: PermissionsDataImprovementsRead
  update: PermissionsDataImprovementsUpdate
}

input PermissionsDataImprovementsCreate {
  allow: Boolean!
}

input PermissionsDataImprovementsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataImprovementsDestroy {
  allow: Boolean!
}

input PermissionsDataImprovementsRead {
  allow: Boolean!
  fields: ImprovementFieldsPermissions
  filter: Improvement_PermissionFilter
}

input PermissionsDataImprovementsUpdate {
  allow: Boolean!
  fields: ImprovementFieldsPermissions
  filter: Improvement_PermissionFilter
}

input PermissionsDataMaintenanceRecords {
  create: PermissionsDataMaintenanceRecordsCreate
  delete: PermissionsDataMaintenanceRecordsDelete
  destroy: PermissionsDataMaintenanceRecordsDestroy
  read: PermissionsDataMaintenanceRecordsRead
  update: PermissionsDataMaintenanceRecordsUpdate
}

input PermissionsDataMaintenanceRecordsCreate {
  allow: Boolean!
}

input PermissionsDataMaintenanceRecordsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataMaintenanceRecordsDestroy {
  allow: Boolean!
}

input PermissionsDataMaintenanceRecordsRead {
  allow: Boolean!
  fields: MaintenanceRecordFieldsPermissions
  filter: MaintenanceRecord_PermissionFilter
}

input PermissionsDataMaintenanceRecordsUpdate {
  allow: Boolean!
  fields: MaintenanceRecordFieldsPermissions
  filter: MaintenanceRecord_PermissionFilter
}

input PermissionsDataNotifications {
  create: PermissionsDataNotificationsCreate
  delete: PermissionsDataNotificationsDelete
  destroy: PermissionsDataNotificationsDestroy
  read: PermissionsDataNotificationsRead
  update: PermissionsDataNotificationsUpdate
}

input PermissionsDataNotificationsCreate {
  allow: Boolean!
}

input PermissionsDataNotificationsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataNotificationsDestroy {
  allow: Boolean!
}

input PermissionsDataNotificationsRead {
  allow: Boolean!
  fields: NotificationFieldsPermissions
  filter: Notification_PermissionFilter
}

input PermissionsDataNotificationsUpdate {
  allow: Boolean!
  fields: NotificationFieldsPermissions
  filter: Notification_PermissionFilter
}

input PermissionsDataPermits {
  create: PermissionsDataPermitsCreate
  delete: PermissionsDataPermitsDelete
  destroy: PermissionsDataPermitsDestroy
  read: PermissionsDataPermitsRead
  update: PermissionsDataPermitsUpdate
}

input PermissionsDataPermitsCreate {
  allow: Boolean!
}

input PermissionsDataPermitsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataPermitsDestroy {
  allow: Boolean!
}

input PermissionsDataPermitsRead {
  allow: Boolean!
  fields: PermitFieldsPermissions
  filter: Permit_PermissionFilter
}

input PermissionsDataPermitsUpdate {
  allow: Boolean!
  fields: PermitFieldsPermissions
  filter: Permit_PermissionFilter
}

input PermissionsDataReports {
  create: PermissionsDataReportsCreate
  delete: PermissionsDataReportsDelete
  destroy: PermissionsDataReportsDestroy
  read: PermissionsDataReportsRead
  update: PermissionsDataReportsUpdate
}

input PermissionsDataReportsCreate {
  allow: Boolean!
}

input PermissionsDataReportsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataReportsDestroy {
  allow: Boolean!
}

input PermissionsDataReportsRead {
  allow: Boolean!
  fields: ReportFieldsPermissions
  filter: Report_PermissionFilter
}

input PermissionsDataReportsUpdate {
  allow: Boolean!
  fields: ReportFieldsPermissions
  filter: Report_PermissionFilter
}

input PermissionsDataRoles {
  create: PermissionsDataRolesCreate
  delete: PermissionsDataRolesDelete
  destroy: PermissionsDataRolesDestroy
  read: PermissionsDataRolesRead
  update: PermissionsDataRolesUpdate
}

input PermissionsDataRolesCreate {
  allow: Boolean!
}

input PermissionsDataRolesDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataRolesDestroy {
  allow: Boolean!
}

input PermissionsDataRolesRead {
  allow: Boolean!
  fields: RoleFieldsPermissions
  filter: Role_PermissionFilter
}

input PermissionsDataRolesUpdate {
  allow: Boolean!
  fields: RoleFieldsPermissions
  filter: Role_PermissionFilter
}

input PermissionsDataSearchCriteria {
  create: PermissionsDataSearchCriteriaCreate
  delete: PermissionsDataSearchCriteriaDelete
  destroy: PermissionsDataSearchCriteriaDestroy
  read: PermissionsDataSearchCriteriaRead
  update: PermissionsDataSearchCriteriaUpdate
}

input PermissionsDataSearchCriteriaCreate {
  allow: Boolean!
}

input PermissionsDataSearchCriteriaDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataSearchCriteriaDestroy {
  allow: Boolean!
}

input PermissionsDataSearchCriteriaRead {
  allow: Boolean!
  fields: SearchCriterionFieldsPermissions
  filter: SearchCriterion_PermissionFilter
}

input PermissionsDataSearchCriteriaUpdate {
  allow: Boolean!
  fields: SearchCriterionFieldsPermissions
  filter: SearchCriterion_PermissionFilter
}

input PermissionsDataSubscriptionsApps {
  create: PermissionsDataSubscriptionsAppsCreate
  delete: PermissionsDataSubscriptionsAppsDelete
  destroy: PermissionsDataSubscriptionsAppsDestroy
  read: PermissionsDataSubscriptionsAppsRead
  update: PermissionsDataSubscriptionsAppsUpdate
}

input PermissionsDataSubscriptionsAppsCreate {
  allow: Boolean!
}

input PermissionsDataSubscriptionsAppsDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataSubscriptionsAppsDestroy {
  allow: Boolean!
}

input PermissionsDataSubscriptionsAppsRead {
  allow: Boolean!
  fields: SubscriptionsAppFieldsPermissions
  filter: SubscriptionsApp_PermissionFilter
}

input PermissionsDataSubscriptionsAppsUpdate {
  allow: Boolean!
  fields: SubscriptionsAppFieldsPermissions
  filter: SubscriptionsApp_PermissionFilter
}

input PermissionsDataUsers {
  create: PermissionsDataUsersCreate
  delete: PermissionsDataUsersDelete
  destroy: PermissionsDataUsersDestroy
  read: PermissionsDataUsersRead
  update: PermissionsDataUsersUpdate
}

input PermissionsDataUsersCreate {
  allow: Boolean!
}

input PermissionsDataUsersDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataUsersDestroy {
  allow: Boolean!
}

input PermissionsDataUsersRead {
  allow: Boolean!
  fields: UserFieldsPermissions
  filter: User_PermissionFilter
}

input PermissionsDataUsersUpdate {
  allow: Boolean!
  fields: UserFieldsPermissions
  filter: User_PermissionFilter
}

input PermissionsDataWorkOrders {
  create: PermissionsDataWorkOrdersCreate
  delete: PermissionsDataWorkOrdersDelete
  destroy: PermissionsDataWorkOrdersDestroy
  read: PermissionsDataWorkOrdersRead
  update: PermissionsDataWorkOrdersUpdate
}

input PermissionsDataWorkOrdersCreate {
  allow: Boolean!
}

input PermissionsDataWorkOrdersDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataWorkOrdersDestroy {
  allow: Boolean!
}

input PermissionsDataWorkOrdersRead {
  allow: Boolean!
  fields: WorkOrderFieldsPermissions
  filter: WorkOrder_PermissionFilter
}

input PermissionsDataWorkOrdersUpdate {
  allow: Boolean!
  fields: WorkOrderFieldsPermissions
  filter: WorkOrder_PermissionFilter
}

"""PermissionsInput create input"""
input PermissionsInput {
  custom: PermissionsCustom
  data: PermissionsData
}

"""Records permits issued for the building."""
type Permit {
  _description: String

  """Reference to the building for which the permit was issued."""
  building_id: Building
  createdAt: DateTime
  deletedAt: Int

  """Date when the permit expires."""
  expiry_date: DateTime
  id: ID

  """Date when the permit was issued."""
  issue_date: DateTime

  """Unique identifier for the permit."""
  permit_number: String
  updatedAt: DateTime
}

"""Permits create input"""
input PermitCreateInput {
  building_id: PermitsBuilding_idRelationInput

  """Date when the permit expires."""
  expiry_date: DateTime

  """Date when the permit was issued."""
  issue_date: DateTime

  """Unique identifier for the permit."""
  permit_number: String
}

"""Permits create many input"""
input PermitCreateManyInput {
  """Date when the permit expires."""
  expiry_date: DateTime

  """Date when the permit was issued."""
  issue_date: DateTime

  """Unique identifier for the permit."""
  permit_number: String
}

"""Permits delete input"""
input PermitDeleteInput {
  force: Boolean
  id: ID
}

"""PermitFieldsPermissions create input"""
input PermitFieldsPermissions {
  createdAt: Boolean
  expiry_date: Boolean
  issue_date: Boolean
  permit_number: Boolean
  updatedAt: Boolean
}

input PermitFilter {
  AND: [PermitFilter!]
  OR: [PermitFilter!]
  _fullText: String
  building_id: BuildingFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  expiry_date: DateTimePredicate
  id: IDPredicate
  issue_date: DateTimePredicate
  permit_number: StringPredicate
  updatedAt: DateTimePredicate
}

input PermitGroupBy {
  first: Int
  having: Having
  last: Int
  query: PermitGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input PermitGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  building_id: BuildingGroupByQuery
  createdAt: [GroupByField!]
  expiry_date: [GroupByField!]
  id: [GroupByField!]
  issue_date: [GroupByField!]
  permit_number: [GroupByField!]
  updatedAt: [GroupByField!]
}

input PermitKeyFilter {
  id: ID
}

"""PermitListResponse output"""
type PermitListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Permit!]!
}

"""PermitManyResponse output"""
type PermitManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Permit!]!
}

"""No longer supported. Use `sort` instead."""
enum PermitOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  expiry_date_ASC
  expiry_date_DESC
  id_ASC
  id_DESC
  issue_date_ASC
  issue_date_DESC
  permit_number_ASC
  permit_number_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Permits subscription payload"""
type PermitPayload {
  mutation: MutationType!
  node: Permit
  previousValues: Permit
  updatedFields: [String]
}

input PermitRelationFilter {
  every: PermitFilter
  none: PermitFilter
  some: PermitFilter
}

input PermitSort {
  building_id: BuildingSort
  createdAt: SortOrder
  deletedAt: SortOrder
  expiry_date: SortOrder
  id: SortOrder
  issue_date: SortOrder
  permit_number: SortOrder
  updatedAt: SortOrder
}

"""Permits subscription filter"""
input PermitSubscriptionFilter {
  mutation_in: [MutationType]
  node: PermitFilter
  updatedFields: UpdatedFieldsFilter
}

"""Permits update input"""
input PermitUpdateByFilterInput {
  permit_number: [UpdateByFilterStringInput]
}

"""Permits update input"""
input PermitUpdateInput {
  building_id: PermitsBuilding_idUpdateRelationInput

  """Date when the permit expires."""
  expiry_date: DateTime
  id: ID

  """Date when the permit was issued."""
  issue_date: DateTime

  """Unique identifier for the permit."""
  permit_number: String
}

input Permit_PermissionFilter {
  AND: [Permit_PermissionFilter!]
  OR: [Permit_PermissionFilter!]
  _fullText: String
  building_id: Building_PermissionFilter
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  expiry_date: DateTimePredicate
  id: IDPredicate
  issue_date: DateTimePredicate
  permit_number: StringPredicate
  updatedAt: DateTimePredicate
}

input Permit_PermissionRelationFilter {
  every: Permit_PermissionFilter
  none: Permit_PermissionFilter
  some: Permit_PermissionFilter
}

"""Permits relation input"""
input PermitsBuilding_idRelationInput {
  create: Permits_BuildingCreateInput
}

"""Permits relation input"""
input PermitsBuilding_idUpdateRelationInput {
  update: Permits_BuildingUpdateInput
}

"""Buildings create input from Permits"""
input Permits_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput!
  ComplianceRecords: BuildingsComplianceRecordsRelationInput!
  Documents: BuildingsDocumentsRelationInput!
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput!
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput!
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput!
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput!

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from Permits"""
input Permits_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

type ProjectItemWS {
  description: String
  id: ID!
  image: WorkspaceImage
  name: String!
  region: String
}

type Query {
  airQualitiesList(after: String, before: String, filter: AirQualityFilter, first: Int, groupBy: AirQualityGroupBy, last: Int, orderBy: [AirQualityOrderBy], skip: Int, sort: [AirQualitySort!], withDeleted: Boolean): AirQualityListResponse!
  airQuality(id: ID, withDeleted: Boolean): AirQuality
  apiToken(id: ID, name: String, withDeleted: Boolean): ApiToken
  apiTokensList(after: String, before: String, filter: ApiTokenFilter, first: Int, groupBy: ApiTokenGroupBy, last: Int, orderBy: [ApiTokenOrderBy], skip: Int, sort: [ApiTokenSort!], withDeleted: Boolean): ApiTokenListResponse!
  application(id: String!): Application @deprecated(reason: "No longer supported. Use `system.application` instead.")
  applicationsList: ApplicationListResponse @deprecated(reason: "No longer supported. Use `system.applicationsList` instead.")
  asyncSessionStatus(sessionId: String!): AsyncSessionStatusResponse @deprecated(reason: "No longer supported. Use `system.asyncSessionStatus` instead.")
  authenticationProfile(id: ID, name: String, withDeleted: Boolean): AuthenticationProfile
  authenticationProfilesList(after: String, before: String, filter: AuthenticationProfileFilter, first: Int, groupBy: AuthenticationProfileGroupBy, last: Int, orderBy: [AuthenticationProfileOrderBy], skip: Int, sort: [AuthenticationProfileSort!], withDeleted: Boolean): AuthenticationProfileListResponse!
  authenticationSettings: AuthenticationSetting
  billingCurrentPlan(organizationId: ID): BillingCurrentPlanResponse @deprecated(reason: "No longer supported. Use `system.billingCurrentPlan` instead.")
  billingDetails: BillingDetailsResponse @deprecated(reason: "No longer supported. Use `system.memberPaymentDetails, system.organizationPaymentDetails or system.workspacePaymentDetails` instead.")
  billingInvoicesList(after: ID, before: ID, by: BillingInvoicesListFilterType, limit: Int, projectId: ID): BillingInvoicesListResponse! @deprecated(reason: "No longer supported. Use `system.memberBillingHistory, system.organizationBillingHistory or system.workspaceBillingHistory` instead.")
  billingMetricUsageQuotasList(organizationId: ID, projectId: ID): BillingMetricUsageQuotasListResponse! @deprecated(reason: "No longer supported. Use `system.billingMetricUsageQuotasList` instead.")
  billingMetricUsagesList(filter: BillingMetricUsagesListFilter, organizationId: ID, projectId: ID): BillingMetricUsagesListResponse! @deprecated(reason: "No longer supported. Use `system.billingMetricUsagesList` instead.")
  building(id: ID, name: String, withDeleted: Boolean): Building
  buildingsList(after: String, before: String, filter: BuildingFilter, first: Int, groupBy: BuildingGroupBy, last: Int, orderBy: [BuildingOrderBy], skip: Int, sort: [BuildingSort!], withDeleted: Boolean): BuildingListResponse!
  certification(id: ID, withDeleted: Boolean): Certification
  certificationsList(after: String, before: String, filter: CertificationFilter, first: Int, groupBy: CertificationGroupBy, last: Int, orderBy: [CertificationOrderBy], skip: Int, sort: [CertificationSort!], withDeleted: Boolean): CertificationListResponse!
  companyName: String
  complianceRecord(id: ID, withDeleted: Boolean): ComplianceRecord
  complianceRecordsList(after: String, before: String, filter: ComplianceRecordFilter, first: Int, groupBy: ComplianceRecordGroupBy, last: Int, orderBy: [ComplianceRecordOrderBy], skip: Int, sort: [ComplianceRecordSort!], withDeleted: Boolean): ComplianceRecordListResponse!
  deployStatus(buildName: String!): DeployStatusResult! @deprecated(reason: "No longer supported. Use `system.deployStatus` instead.")
  document(id: ID, withDeleted: Boolean): Document
  documentsList(after: String, before: String, filter: DocumentFilter, first: Int, groupBy: DocumentGroupBy, last: Int, orderBy: [DocumentOrderBy], skip: Int, sort: [DocumentSort!], withDeleted: Boolean): DocumentListResponse!
  energyEfficienciesList(after: String, before: String, filter: EnergyEfficiencyFilter, first: Int, groupBy: EnergyEfficiencyGroupBy, last: Int, orderBy: [EnergyEfficiencyOrderBy], skip: Int, sort: [EnergyEfficiencySort!], withDeleted: Boolean): EnergyEfficiencyListResponse!
  energyEfficiency(id: ID, withDeleted: Boolean): EnergyEfficiency
  environmentVariable(id: ID, name: String, withDeleted: Boolean): EnvironmentVariable
  environmentVariablesList(after: String, before: String, filter: EnvironmentVariableFilter, first: Int, groupBy: EnvironmentVariableGroupBy, last: Int, orderBy: [EnvironmentVariableOrderBy], skip: Int, sort: [EnvironmentVariableSort!], withDeleted: Boolean): EnvironmentVariableListResponse!
  environmentalDataList(after: String, before: String, filter: EnvironmentalDatumFilter, first: Int, groupBy: EnvironmentalDatumGroupBy, last: Int, orderBy: [EnvironmentalDatumOrderBy], skip: Int, sort: [EnvironmentalDatumSort!], withDeleted: Boolean): EnvironmentalDatumListResponse!
  environmentalDatum(id: ID, withDeleted: Boolean): EnvironmentalDatum
  equipment(id: ID, withDeleted: Boolean): Equipment
  equipmentList(after: String, before: String, filter: EquipmentFilter, first: Int, groupBy: EquipmentGroupBy, last: Int, orderBy: [EquipmentOrderBy], skip: Int, sort: [EquipmentSort!], withDeleted: Boolean): EquipmentListResponse!
  file(fileId: String, id: ID, withDeleted: Boolean): File
  fileUploadInfo: FileUploadInfoResponse @deprecated(reason: "No longer supported. Use `fileUploadSignInfo` instead.")
  filesList(after: String, before: String, filter: FileFilter, first: Int, groupBy: FileGroupBy, last: Int, orderBy: [FileOrderBy], skip: Int, sort: [FileSort!], withDeleted: Boolean): FileListResponse!
  filesSetting(filemanagername: String, id: ID, withDeleted: Boolean): FilesSetting
  filesSettingsList(after: String, before: String, filter: FilesSettingFilter, first: Int, groupBy: FilesSettingGroupBy, last: Int, orderBy: [FilesSettingOrderBy], skip: Int, sort: [FilesSettingSort!], withDeleted: Boolean): FilesSettingListResponse!
  functionsList(applicationId: String, filter: FunctionInfoFilter, orderBy: [FunctionInfoOrderBy]): FunctionListResponse @deprecated(reason: "No longer supported. Use `system.functionsList` instead.")
  functionsVersionCheck: FunctionInfoCheck
  improvement(id: ID, withDeleted: Boolean): Improvement
  improvementsList(after: String, before: String, filter: ImprovementFilter, first: Int, groupBy: ImprovementGroupBy, last: Int, orderBy: [ImprovementOrderBy], skip: Int, sort: [ImprovementSort!], withDeleted: Boolean): ImprovementListResponse!
  isAllowedCallbackURL(callbackURL: String!): isAllowedCallbackURLQueryResponse
  logs(applicationId: String, endTime: DateTime, functionName: String!, limit: Int, startTime: DateTime): [String] @deprecated(reason: "No longer supported. Use `system.logsList` instead.")
  maintenanceRecord(id: ID, withDeleted: Boolean): MaintenanceRecord
  maintenanceRecordsList(after: String, before: String, filter: MaintenanceRecordFilter, first: Int, groupBy: MaintenanceRecordGroupBy, last: Int, orderBy: [MaintenanceRecordOrderBy], skip: Int, sort: [MaintenanceRecordSort!], withDeleted: Boolean): MaintenanceRecordListResponse!
  notification(id: ID, withDeleted: Boolean): Notification
  notificationsList(after: String, before: String, filter: NotificationFilter, first: Int, groupBy: NotificationGroupBy, last: Int, orderBy: [NotificationOrderBy], skip: Int, sort: [NotificationSort!], withDeleted: Boolean): NotificationListResponse!
  permit(id: ID, withDeleted: Boolean): Permit
  permitsList(after: String, before: String, filter: PermitFilter, first: Int, groupBy: PermitGroupBy, last: Int, orderBy: [PermitOrderBy], skip: Int, sort: [PermitSort!], withDeleted: Boolean): PermitListResponse!
  report(id: ID, withDeleted: Boolean): Report
  reportsList(after: String, before: String, filter: ReportFilter, first: Int, groupBy: ReportGroupBy, last: Int, orderBy: [ReportOrderBy], skip: Int, sort: [ReportSort!], withDeleted: Boolean): ReportListResponse!
  role(id: ID, name: String, withDeleted: Boolean): Role
  rolesList(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!], withDeleted: Boolean): RoleListResponse!
  searchCriteriaList(after: String, before: String, filter: SearchCriterionFilter, first: Int, groupBy: SearchCriterionGroupBy, last: Int, orderBy: [SearchCriterionOrderBy], skip: Int, sort: [SearchCriterionSort!], withDeleted: Boolean): SearchCriterionListResponse!
  searchCriterion(id: ID, withDeleted: Boolean): SearchCriterion
  settings: Setting
  subscriptionsApp(id: ID, withDeleted: Boolean): SubscriptionsApp
  subscriptionsAppsList(after: String, before: String, filter: SubscriptionsAppFilter, first: Int, groupBy: SubscriptionsAppGroupBy, last: Int, orderBy: [SubscriptionsAppOrderBy], skip: Int, sort: [SubscriptionsAppSort!], withDeleted: Boolean): SubscriptionsAppListResponse!
  system: SystemQuery
  table(id: ID, name: String): Table @deprecated(reason: "No longer supported. Use `system.table` instead.")
  tableField(id: ID!): TableField @deprecated(reason: "No longer supported. Use `system.tableField` instead.")
  tablesList(filter: TableListFilter): TableListResponse! @deprecated(reason: "No longer supported. Use `system.tablesList` instead.")
  user(email: String, id: ID, withDeleted: Boolean): User
  userBillingConfiguration(filterPlanProjects: Boolean, kind: String, organizationId: ID, region: String): UserBillingConfigurationResponse!
  userBillingConfigurationArchie(ideaId: ID, kind: String, organizationId: ID, region: String): UserBillingConfigurationResponse!
  userInvitationsList: UserInvitationList @deprecated(reason: "No longer supported. Use `system.userInvitationsList` instead.")
  usersList(after: String, before: String, filter: UserFilter, first: Int, groupBy: UserGroupBy, last: Int, orderBy: [UserOrderBy], skip: Int, sort: [UserSort!], withDeleted: Boolean): UserListResponse!
  viewDryRun(sql: String!): ViewDryRunOutput
  workOrder(id: ID, withDeleted: Boolean): WorkOrder
  workOrdersList(after: String, before: String, filter: WorkOrderFilter, first: Int, groupBy: WorkOrderGroupBy, last: Int, orderBy: [WorkOrderOrderBy], skip: Int, sort: [WorkOrderSort!], withDeleted: Boolean): WorkOrderListResponse!
  workspacesList: WorkspaceListResponse @deprecated(reason: "No longer supported. Use `system.workspacesList` instead.")
}

"""RefreshTokenInput"""
input RefreshTokenInput {
  authProfileId: ID
  email: String
  refreshToken: String!
}

"""Relation"""
type Relation {
  refField: TableField
  refFieldDisplayName: String
  refFieldIsList: Boolean
  refFieldIsRequired: Boolean
  refFieldName: String
  refTable: Table!
  relationFieldName: String
  relationTableName: String
}

"""Relation Create Input"""
input RelationCreateInput {
  refFieldDisplayName: String
  refFieldIsList: Boolean!
  refFieldIsRequired: Boolean!
  refFieldName: String
  refTableId: ID!
}

"""Relation Update Input"""
input RelationUpdateInput {
  refFieldDisplayName: String
  refFieldIsList: Boolean
  refFieldIsRequired: Boolean
  refFieldName: String
  refTableId: ID
}

"""Relative Date Predicate Operation Enum"""
enum RelativePredicateOpEnum {
  ADD
  SUB
}

"""Relative Date Predicate Unit Enum"""
enum RelativePredicateUnitEnum {
  DAY
  DAY_HOUR
  DAY_MICROSECOND
  DAY_MINUTE
  DAY_SECOND
  HOUR
  HOUR_MICROSECOND
  HOUR_MINUTE
  HOUR_SECOND
  MICROSECOND
  MINUTE
  MINUTE_MICROSECOND
  MINUTE_SECOND
  MONTH
  QUARTER
  SECOND
  SECOND_MICROSECOND
  WEEK
  YEAR
  YEAR_MONTH
}

input ReplaceFunctionArguments {
  from: String!
  to: String!
}

"""Represents custom reports generated by users based on building data."""
type Report {
  _description: String

  """Content of the report in JSON format."""
  content: JSON
  createdAt: DateTime
  deletedAt: Int

  """Date when the report was generated."""
  generated_date: DateTime
  id: ID

  """Title of the report."""
  title: String
  updatedAt: DateTime

  """Reference to the user who generated the report."""
  user_id: User
}

"""Reports create input"""
input ReportCreateInput {
  """Content of the report in JSON format."""
  content: JSON

  """Date when the report was generated."""
  generated_date: DateTime

  """Title of the report."""
  title: String
  user_id: ReportsUser_idRelationInput
}

"""Reports create many input"""
input ReportCreateManyInput {
  """Content of the report in JSON format."""
  content: JSON

  """Date when the report was generated."""
  generated_date: DateTime

  """Title of the report."""
  title: String
}

"""Reports delete input"""
input ReportDeleteInput {
  force: Boolean
  id: ID
}

"""ReportFieldsPermissions create input"""
input ReportFieldsPermissions {
  content: Boolean
  createdAt: Boolean
  generated_date: Boolean
  title: Boolean
  updatedAt: Boolean
}

input ReportFilter {
  AND: [ReportFilter!]
  OR: [ReportFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  generated_date: DateTimePredicate
  id: IDPredicate
  title: StringPredicate
  updatedAt: DateTimePredicate
  user_id: UserFilter
}

input ReportGroupBy {
  first: Int
  having: Having
  last: Int
  query: ReportGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input ReportGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  content: [GroupByField!]
  createdAt: [GroupByField!]
  generated_date: [GroupByField!]
  id: [GroupByField!]
  title: [GroupByField!]
  updatedAt: [GroupByField!]
  user_id: UserGroupByQuery
}

input ReportKeyFilter {
  id: ID
}

"""ReportListResponse output"""
type ReportListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Report!]!
}

"""ReportManyResponse output"""
type ReportManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Report!]!
}

"""No longer supported. Use `sort` instead."""
enum ReportOrderBy {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  generated_date_ASC
  generated_date_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Reports subscription payload"""
type ReportPayload {
  mutation: MutationType!
  node: Report
  previousValues: Report
  updatedFields: [String]
}

input ReportRelationFilter {
  every: ReportFilter
  none: ReportFilter
  some: ReportFilter
}

input ReportSort {
  createdAt: SortOrder
  deletedAt: SortOrder
  generated_date: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  user_id: UserSort
}

"""Reports subscription filter"""
input ReportSubscriptionFilter {
  mutation_in: [MutationType]
  node: ReportFilter
  updatedFields: UpdatedFieldsFilter
}

"""Reports update input"""
input ReportUpdateByFilterInput {
  content: [UpdateByFilterJsonInput]
  title: [UpdateByFilterStringInput]
}

"""Reports update input"""
input ReportUpdateInput {
  """Content of the report in JSON format."""
  content: JSON

  """Date when the report was generated."""
  generated_date: DateTime
  id: ID

  """Title of the report."""
  title: String
  user_id: ReportsUser_idUpdateRelationInput
}

input Report_PermissionFilter {
  AND: [Report_PermissionFilter!]
  OR: [Report_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  generated_date: DateTimePredicate
  id: IDPredicate
  title: StringPredicate
  updatedAt: DateTimePredicate
  user_id: User_PermissionFilter
}

input Report_PermissionRelationFilter {
  every: Report_PermissionFilter
  none: Report_PermissionFilter
  some: Report_PermissionFilter
}

"""Reports relation input"""
input ReportsUser_idRelationInput {
  create: Reports_UserCreateInput
}

"""Reports relation input"""
input ReportsUser_idUpdateRelationInput {
  update: Reports_UserUpdateInput
}

"""Users create input from Reports"""
input Reports_UserCreateInput {
  Notifications: UsersNotificationsRelationInput
  Reports: UsersReportsRelationInput
  SearchCriteria: UsersSearchCriteriaRelationInput!
  SubscriptionsApps: UsersSubscriptionsAppsRelationInput
  WorkOrders: UsersWorkOrdersRelationInput
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users update input from Reports"""
input Reports_UserUpdateInput {
  Notifications: UsersNotificationsUpdateRelationInput
  Reports: UsersReportsUpdateRelationInput
  SearchCriteria: UsersSearchCriteriaUpdateRelationInput
  SubscriptionsApps: UsersSubscriptionsAppsUpdateRelationInput
  WorkOrders: UsersWorkOrdersUpdateRelationInput
  avatar: UsersAvatarUpdateRelationInput
  email: String
  firstName: String
  lastName: String
  roles: UsersRolesUpdateRelationInput
  status: String
  timezone: String
}

input ResizeImageDirectiveCropOptions {
  height: Int!
  offsetX: Int = 0
  offsetY: Int = 0
  width: Int!
}

input ResizeImageDirectiveFlipOptions {
  horizontally: Boolean
  vertically: Boolean
}

input ResizeImageDirectiveResizeOptions {
  height: Int
  width: Int
}

type Role {
  _description: String
  apiTokens(after: String, before: String, filter: ApiTokenFilter, first: Int, groupBy: ApiTokenGroupBy, last: Int, orderBy: [ApiTokenOrderBy], skip: Int, sort: [ApiTokenSort!]): ApiTokenListResponse
  authenticationProfiles(after: String, before: String, filter: AuthenticationProfileFilter, first: Int, groupBy: AuthenticationProfileGroupBy, last: Int, orderBy: [AuthenticationProfileOrderBy], skip: Int, sort: [AuthenticationProfileSort!]): AuthenticationProfileListResponse
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  description: String
  id: ID
  membersCount: Int!
  name: String
  permissions(filter: PermissionInputFilter): PermissionListResponse
  updatedAt: DateTime
  users(after: String, before: String, filter: UserFilter, first: Int, groupBy: UserGroupBy, last: Int, orderBy: [UserOrderBy], skip: Int, sort: [UserSort!]): UserListResponse
}

"""Roles create input"""
input RoleCreateInput {
  apiTokens: RolesApiTokensRelationInput
  authenticationProfiles: RolesAuthenticationProfilesRelationInput
  description: String
  name: String!
  permissions: PermissionsInput
  users: RolesUsersRelationInput
}

"""Roles create many input"""
input RoleCreateManyInput {
  apiTokens: RolesApiTokensManyRelationInput
  authenticationProfiles: RolesAuthenticationProfilesManyRelationInput
  description: String
  name: String!
  users: RolesUsersManyRelationInput
}

"""Roles delete input"""
input RoleDeleteInput {
  force: Boolean
  id: ID
}

enum RoleEnum {
  ADMIN
  EDITOR
  VIEWER
}

"""RoleFieldsPermissions create input"""
input RoleFieldsPermissions {
  createdAt: Boolean
  description: Boolean
  name: Boolean
  updatedAt: Boolean
}

input RoleFilter {
  AND: [RoleFilter!]
  OR: [RoleFilter!]
  _fullText: String
  apiTokens: ApiTokenRelationFilter
  authenticationProfiles: AuthenticationProfileRelationFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  name: StringPredicate
  permissions: PermissionRelationFilter
  updatedAt: DateTimePredicate
  users: UserRelationFilter
}

input RoleGroupBy {
  first: Int
  having: Having
  last: Int
  query: RoleGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input RoleGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  apiTokens: ApiTokenGroupByQuery
  authenticationProfiles: AuthenticationProfileGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  description: [GroupByField!]
  id: [GroupByField!]
  name: [GroupByField!]
  permissions: PermissionGroupByQuery
  updatedAt: [GroupByField!]
  users: UserGroupByQuery
}

input RoleKeyFilter {
  id: ID
  name: String
}

"""RoleListResponse output"""
type RoleListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Role!]!
}

"""RoleManyResponse output"""
type RoleManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [Role!]!
}

"""No longer supported. Use `sort` instead."""
enum RoleOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  systemType_ASC
  systemType_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Roles subscription payload"""
type RolePayload {
  mutation: MutationType!
  node: Role
  previousValues: Role
  updatedFields: [String]
}

input RoleRelationFilter {
  every: RoleFilter
  none: RoleFilter
  some: RoleFilter
}

input RoleSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

"""Roles subscription filter"""
input RoleSubscriptionFilter {
  mutation_in: [MutationType]
  node: RoleFilter
  updatedFields: UpdatedFieldsFilter
}

"""Roles update input"""
input RoleUpdateByFilterInput {
  description: [UpdateByFilterStringInput]
  name: [UpdateByFilterStringInput]
  systemType: [UpdateByFilterStringInput]
}

"""Roles update input"""
input RoleUpdateInput {
  apiTokens: RolesApiTokensUpdateRelationInput
  authenticationProfiles: RolesAuthenticationProfilesUpdateRelationInput
  description: String
  id: ID
  name: String
  permissions: PermissionsInput
  users: RolesUsersUpdateRelationInput
}

input Role_PermissionFilter {
  AND: [Role_PermissionFilter!]
  OR: [Role_PermissionFilter!]
  _fullText: String
  apiTokens: ApiToken_PermissionRelationFilter
  authenticationProfiles: AuthenticationProfile_PermissionRelationFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  name: StringPredicate
  permissions: Permission_PermissionRelationFilter
  updatedAt: DateTimePredicate
  users: User_PermissionRelationFilter
}

input Role_PermissionRelationFilter {
  every: Role_PermissionFilter
  none: Role_PermissionFilter
  some: Role_PermissionFilter
}

"""Roles relation input"""
input RolesApiTokensManyRelationInput {
  connect: [ApiTokenKeyFilter!]
}

"""Roles relation input"""
input RolesApiTokensRelationInput {
  connect: [ApiTokenKeyFilter!]
}

"""Roles relation input"""
input RolesApiTokensUpdateRelationInput {
  connect: [ApiTokenKeyFilter!]
  disconnect: [ApiTokenKeyFilter!]
  reconnect: [ApiTokenKeyFilter!]
  update: [Roles_ApiTokenUpdateInput]
}

"""Roles relation input"""
input RolesAuthenticationProfilesManyRelationInput {
  connect: [AuthenticationProfileKeyFilter!]
}

"""Roles relation input"""
input RolesAuthenticationProfilesRelationInput {
  connect: [AuthenticationProfileKeyFilter!]
  create: [Roles_AuthenticationProfileCreateInput]
}

"""Roles relation input"""
input RolesAuthenticationProfilesUpdateRelationInput {
  connect: [AuthenticationProfileKeyFilter!]
  create: [Roles_AuthenticationProfileCreateInput]
  disconnect: [AuthenticationProfileKeyFilter!]
  reconnect: [AuthenticationProfileKeyFilter!]
  update: [Roles_AuthenticationProfileUpdateInput]
}

"""Roles relation input"""
input RolesUsersManyRelationInput {
  connect: [UserKeyFilter!]
}

"""Roles relation input"""
input RolesUsersRelationInput {
  connect: [UserKeyFilter!]
  create: [Roles_UserCreateInput]
}

"""Roles relation input"""
input RolesUsersUpdateRelationInput {
  connect: [UserKeyFilter!]
  create: [Roles_UserCreateInput]
  disconnect: [UserKeyFilter!]
  reconnect: [UserKeyFilter!]
  update: [Roles_UserUpdateInput]
}

"""ApiTokens update input from roles"""
input Roles_ApiTokenUpdateInput {
  data: ApiTokenUpdateInput!
  filter: ApiTokenKeyFilter
}

"""AuthenticationProfiles create input from roles"""
input Roles_AuthenticationProfileCreateInput {
  audiences: [String]
  clientId: String
  databaseName: String
  domain: String
  managementDomain: String
  name: String!
  roles: AuthenticationProfilesRolesRelationInput
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean = false
  type: String = "8BASE"
}

"""AuthenticationProfiles update input from roles"""
input Roles_AuthenticationProfileUpdateInput {
  data: AuthenticationProfileUpdateInput!
  filter: AuthenticationProfileKeyFilter
}

"""Users create input from roles"""
input Roles_UserCreateInput {
  Notifications: UsersNotificationsRelationInput!
  Reports: UsersReportsRelationInput!
  SearchCriteria: UsersSearchCriteriaRelationInput!
  SubscriptionsApps: UsersSubscriptionsAppsRelationInput!
  WorkOrders: UsersWorkOrdersRelationInput
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users update input from roles"""
input Roles_UserUpdateInput {
  data: UserUpdateInput!
  filter: UserKeyFilter
}

"""Schema Origin"""
type SchemaOrigin {
  provider: String
  type: SchemaOriginType!
}

"""Schema Origin Type Enum"""
enum SchemaOriginType {
  LOCAL
  REMOTE
  VIEW
}

"""SearchCriteria relation input"""
input SearchCriteriaUser_idRelationInput {
  create: SearchCriteria_UserCreateInput
}

"""SearchCriteria relation input"""
input SearchCriteriaUser_idUpdateRelationInput {
  update: SearchCriteria_UserUpdateInput
}

"""Users create input from SearchCriteria"""
input SearchCriteria_UserCreateInput {
  Notifications: UsersNotificationsRelationInput
  Reports: UsersReportsRelationInput
  SearchCriteria: UsersSearchCriteriaRelationInput
  SubscriptionsApps: UsersSubscriptionsAppsRelationInput
  WorkOrders: UsersWorkOrdersRelationInput
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users update input from SearchCriteria"""
input SearchCriteria_UserUpdateInput {
  Notifications: UsersNotificationsUpdateRelationInput
  Reports: UsersReportsUpdateRelationInput
  SearchCriteria: UsersSearchCriteriaUpdateRelationInput
  SubscriptionsApps: UsersSubscriptionsAppsUpdateRelationInput
  WorkOrders: UsersWorkOrdersUpdateRelationInput
  avatar: UsersAvatarUpdateRelationInput
  email: String
  firstName: String
  lastName: String
  roles: UsersRolesUpdateRelationInput
  status: String
  timezone: String
}

"""Stores saved search parameters for users."""
type SearchCriterion {
  _description: String
  createdAt: DateTime

  """Search criteria details in JSON format."""
  criteria: JSON
  deletedAt: Int
  id: ID

  """Name of the saved search criteria."""
  name: String
  updatedAt: DateTime

  """Reference to the user who saved the search criteria."""
  user_id: User
}

"""SearchCriteria create input"""
input SearchCriterionCreateInput {
  """Search criteria details in JSON format."""
  criteria: JSON

  """Name of the saved search criteria."""
  name: String
  user_id: SearchCriteriaUser_idRelationInput
}

"""SearchCriteria create many input"""
input SearchCriterionCreateManyInput {
  """Search criteria details in JSON format."""
  criteria: JSON

  """Name of the saved search criteria."""
  name: String
}

"""SearchCriteria delete input"""
input SearchCriterionDeleteInput {
  force: Boolean
  id: ID
}

"""SearchCriterionFieldsPermissions create input"""
input SearchCriterionFieldsPermissions {
  createdAt: Boolean
  criteria: Boolean
  name: Boolean
  updatedAt: Boolean
}

input SearchCriterionFilter {
  AND: [SearchCriterionFilter!]
  OR: [SearchCriterionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  updatedAt: DateTimePredicate
  user_id: UserFilter
}

input SearchCriterionGroupBy {
  first: Int
  having: Having
  last: Int
  query: SearchCriterionGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input SearchCriterionGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  criteria: [GroupByField!]
  id: [GroupByField!]
  name: [GroupByField!]
  updatedAt: [GroupByField!]
  user_id: UserGroupByQuery
}

input SearchCriterionKeyFilter {
  id: ID
}

"""SearchCriterionListResponse output"""
type SearchCriterionListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [SearchCriterion!]!
}

"""SearchCriterionManyResponse output"""
type SearchCriterionManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SearchCriterion!]!
}

"""No longer supported. Use `sort` instead."""
enum SearchCriterionOrderBy {
  createdAt_ASC
  createdAt_DESC
  criteria_ASC
  criteria_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""SearchCriteria subscription payload"""
type SearchCriterionPayload {
  mutation: MutationType!
  node: SearchCriterion
  previousValues: SearchCriterion
  updatedFields: [String]
}

input SearchCriterionRelationFilter {
  every: SearchCriterionFilter
  none: SearchCriterionFilter
  some: SearchCriterionFilter
}

input SearchCriterionSort {
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  user_id: UserSort
}

"""SearchCriteria subscription filter"""
input SearchCriterionSubscriptionFilter {
  mutation_in: [MutationType]
  node: SearchCriterionFilter
  updatedFields: UpdatedFieldsFilter
}

"""SearchCriteria update input"""
input SearchCriterionUpdateByFilterInput {
  criteria: [UpdateByFilterJsonInput]
  name: [UpdateByFilterStringInput]
}

"""SearchCriteria update input"""
input SearchCriterionUpdateInput {
  """Search criteria details in JSON format."""
  criteria: JSON
  id: ID

  """Name of the saved search criteria."""
  name: String
  user_id: SearchCriteriaUser_idUpdateRelationInput
}

input SearchCriterion_PermissionFilter {
  AND: [SearchCriterion_PermissionFilter!]
  OR: [SearchCriterion_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  updatedAt: DateTimePredicate
  user_id: User_PermissionFilter
}

input SearchCriterion_PermissionRelationFilter {
  every: SearchCriterion_PermissionFilter
  none: SearchCriterion_PermissionFilter
  some: SearchCriterion_PermissionFilter
}

type Setting {
  _description: String
  bgColor: String
  buttonLinkColor: String
  containerColor: String
  createdAt: DateTime
  createdBy: User
  currency: String
  dateFormat: String
  landingPageImage: File
  language: String
  leftNavColor: String
  menuBarBGColor: String
  menuBarIconsColor: String
  menuBarLogo: File
  passwordMinLength: Int
  passwordRequireLowercase: Boolean
  passwordRequireNumbers: Boolean
  passwordRequireSpecial: Boolean
  passwordRequireUppercase: Boolean
  passwordUpdateInterval: Int
  rememberDevice: String
  timezone: String
  updatedAt: DateTime
  userInterfaceStyle: String
  vanityUrl: String
}

input SettingFilter {
  AND: [SettingFilter!]
  OR: [SettingFilter!]
  _fullText: String
  bgColor: StringPredicate
  buttonLinkColor: StringPredicate
  containerColor: StringPredicate
  createdAt: DateTimePredicate
  createdBy: UserFilter
  currency: StringPredicate
  dateFormat: StringPredicate
  deletedAt: IntPredicate
  landingPageImage: FileFilter
  language: StringPredicate
  leftNavColor: StringPredicate
  menuBarBGColor: StringPredicate
  menuBarIconsColor: StringPredicate
  menuBarLogo: FileFilter
  passwordMinLength: IntPredicate
  passwordRequireLowercase: BoolPredicate
  passwordRequireNumbers: BoolPredicate
  passwordRequireSpecial: BoolPredicate
  passwordRequireUppercase: BoolPredicate
  passwordUpdateInterval: IntPredicate
  rememberDevice: StringPredicate
  timezone: StringPredicate
  updatedAt: DateTimePredicate
  userInterfaceStyle: StringPredicate
  vanityUrl: StringPredicate
}

input SettingGroupBy {
  first: Int
  having: Having
  last: Int
  query: SettingGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input SettingGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  bgColor: [GroupByField!]
  buttonLinkColor: [GroupByField!]
  containerColor: [GroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  currency: [GroupByField!]
  dateFormat: [GroupByField!]
  landingPageImage: FileGroupByQuery
  language: [GroupByField!]
  leftNavColor: [GroupByField!]
  menuBarBGColor: [GroupByField!]
  menuBarIconsColor: [GroupByField!]
  menuBarLogo: FileGroupByQuery
  passwordMinLength: [GroupByField!]
  passwordRequireLowercase: [GroupByField!]
  passwordRequireNumbers: [GroupByField!]
  passwordRequireSpecial: [GroupByField!]
  passwordRequireUppercase: [GroupByField!]
  passwordUpdateInterval: [GroupByField!]
  rememberDevice: [GroupByField!]
  timezone: [GroupByField!]
  updatedAt: [GroupByField!]
  userInterfaceStyle: [GroupByField!]
  vanityUrl: [GroupByField!]
}

"""SettingListResponse output"""
type SettingListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [Setting!]!
}

"""No longer supported. Use `sort` instead."""
enum SettingOrderBy {
  bgColor_ASC
  bgColor_DESC
  buttonLinkColor_ASC
  buttonLinkColor_DESC
  containerColor_ASC
  containerColor_DESC
  createdAt_ASC
  createdAt_DESC
  currency_ASC
  currency_DESC
  dateFormat_ASC
  dateFormat_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  language_ASC
  language_DESC
  leftNavColor_ASC
  leftNavColor_DESC
  menuBarBGColor_ASC
  menuBarBGColor_DESC
  menuBarIconsColor_ASC
  menuBarIconsColor_DESC
  passwordMinLength_ASC
  passwordMinLength_DESC
  passwordRequireLowercase_ASC
  passwordRequireLowercase_DESC
  passwordRequireNumbers_ASC
  passwordRequireNumbers_DESC
  passwordRequireSpecial_ASC
  passwordRequireSpecial_DESC
  passwordRequireUppercase_ASC
  passwordRequireUppercase_DESC
  passwordUpdateInterval_ASC
  passwordUpdateInterval_DESC
  rememberDevice_ASC
  rememberDevice_DESC
  timezone_ASC
  timezone_DESC
  updatedAt_ASC
  updatedAt_DESC
  userInterfaceStyle_ASC
  userInterfaceStyle_DESC
  vanityUrl_ASC
  vanityUrl_DESC
}

"""Settings subscription payload"""
type SettingPayload {
  mutation: MutationType!
  node: Setting
  previousValues: Setting
  updatedFields: [String]
}

input SettingRelationFilter {
  every: SettingFilter
  none: SettingFilter
  some: SettingFilter
}

input SettingSort {
  bgColor: SortOrder
  buttonLinkColor: SortOrder
  containerColor: SortOrder
  createdAt: SortOrder
  createdBy: UserSort
  currency: SortOrder
  dateFormat: SortOrder
  deletedAt: SortOrder
  landingPageImage: FileSort
  language: SortOrder
  leftNavColor: SortOrder
  menuBarBGColor: SortOrder
  menuBarIconsColor: SortOrder
  menuBarLogo: FileSort
  passwordMinLength: SortOrder
  passwordRequireLowercase: SortOrder
  passwordRequireNumbers: SortOrder
  passwordRequireSpecial: SortOrder
  passwordRequireUppercase: SortOrder
  passwordUpdateInterval: SortOrder
  rememberDevice: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
  userInterfaceStyle: SortOrder
  vanityUrl: SortOrder
}

"""Settings subscription filter"""
input SettingSubscriptionFilter {
  mutation_in: [MutationType]
  node: SettingFilter
  updatedFields: UpdatedFieldsFilter
}

"""Settings update input"""
input SettingUpdateInput {
  bgColor: String
  buttonLinkColor: String
  containerColor: String
  currency: String
  dateFormat: String
  language: String
  leftNavColor: String
  menuBarBGColor: String
  menuBarIconsColor: String
  passwordMinLength: Int
  passwordRequireLowercase: Boolean
  passwordRequireNumbers: Boolean
  passwordRequireSpecial: Boolean
  passwordRequireUppercase: Boolean
  passwordUpdateInterval: Int
  rememberDevice: String
  timezone: String
  userInterfaceStyle: String
  vanityUrl: String
}

input Setting_PermissionFilter {
  AND: [Setting_PermissionFilter!]
  OR: [Setting_PermissionFilter!]
  _fullText: String
  bgColor: StringPredicate
  buttonLinkColor: StringPredicate
  containerColor: StringPredicate
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  currency: StringPredicate
  dateFormat: StringPredicate
  deletedAt: IntPredicate
  landingPageImage: File_PermissionFilter
  language: StringPredicate
  leftNavColor: StringPredicate
  menuBarBGColor: StringPredicate
  menuBarIconsColor: StringPredicate
  menuBarLogo: File_PermissionFilter
  passwordMinLength: IntPredicate
  passwordRequireLowercase: BoolPredicate
  passwordRequireNumbers: BoolPredicate
  passwordRequireSpecial: BoolPredicate
  passwordRequireUppercase: BoolPredicate
  passwordUpdateInterval: IntPredicate
  rememberDevice: StringPredicate
  timezone: StringPredicate
  updatedAt: DateTimePredicate
  userInterfaceStyle: StringPredicate
  vanityUrl: StringPredicate
}

input Setting_PermissionRelationFilter {
  every: Setting_PermissionFilter
  none: Setting_PermissionFilter
  some: Setting_PermissionFilter
}

"""SignUpResendInput"""
input SignUpResendInput {
  email: String!
}

"""Smart Field Attributes"""
type SmartFieldTypeAttributes {
  format: String!
  innerFields: [CustomTableField]
}

"""Smart Type Format Enum"""
enum SmartTypeFormatEnum {
  ADDRESS
  PHONE
}

"""SortOrder"""
enum SortOrder {
  ASC
  DESC
}

input StringPadFunctionArguments {
  len: Int!
  str: String!
}

input StringPredicate {
  contains: String
  ends_with: String
  equals: String
  in: [String!]
  is_empty: Boolean
  is_not_empty: Boolean
  not_contains: String
  not_ends_with: String
  not_equals: String
  not_in: [String!]
  not_starts_with: String
  starts_with: String
}

input StringPredicateHaving {
  AND: [StringPredicateHaving!]
  OR: [StringPredicateHaving!]
  contains: String
  ends_with: String
  equals: String
  in: [String!]
  is_empty: Boolean
  is_not_empty: Boolean
  not_contains: String
  not_ends_with: String
  not_equals: String
  not_in: [String!]
  not_starts_with: String
  starts_with: String
}

enum StringTrimMode {
  BOTH
  LEADING
  TRAILING
}

type Subscription {
  AirQuality(filter: AirQualitySubscriptionFilter): AirQualityPayload
  ApiTokens(filter: ApiTokenSubscriptionFilter): ApiTokenPayload
  AuthenticationProfiles(filter: AuthenticationProfileSubscriptionFilter): AuthenticationProfilePayload
  AuthenticationSettings(filter: AuthenticationSettingSubscriptionFilter): AuthenticationSettingPayload
  Buildings(filter: BuildingSubscriptionFilter): BuildingPayload
  Certifications(filter: CertificationSubscriptionFilter): CertificationPayload
  ComplianceRecords(filter: ComplianceRecordSubscriptionFilter): ComplianceRecordPayload
  Documents(filter: DocumentSubscriptionFilter): DocumentPayload
  EnergyEfficiency(filter: EnergyEfficiencySubscriptionFilter): EnergyEfficiencyPayload
  EnvironmentVariables(filter: EnvironmentVariableSubscriptionFilter): EnvironmentVariablePayload
  EnvironmentalData(filter: EnvironmentalDatumSubscriptionFilter): EnvironmentalDatumPayload
  Equipment(filter: EquipmentSubscriptionFilter): EquipmentPayload
  Files(filter: FileSubscriptionFilter): FilePayload
  FilesSettings(filter: FilesSettingSubscriptionFilter): FilesSettingPayload
  Improvements(filter: ImprovementSubscriptionFilter): ImprovementPayload
  MaintenanceRecords(filter: MaintenanceRecordSubscriptionFilter): MaintenanceRecordPayload
  Notifications(filter: NotificationSubscriptionFilter): NotificationPayload
  Permissions(filter: PermissionSubscriptionFilter): PermissionPayload
  Permits(filter: PermitSubscriptionFilter): PermitPayload
  Reports(filter: ReportSubscriptionFilter): ReportPayload
  Roles(filter: RoleSubscriptionFilter): RolePayload
  SearchCriteria(filter: SearchCriterionSubscriptionFilter): SearchCriterionPayload
  Settings(filter: SettingSubscriptionFilter): SettingPayload
  SubscriptionsApps(filter: SubscriptionsAppSubscriptionFilter): SubscriptionsAppPayload
  Users(filter: UserSubscriptionFilter): UserPayload
  WorkOrders(filter: WorkOrderSubscriptionFilter): WorkOrderPayload
}

"""Details the subscription tier and access level of a user."""
type SubscriptionsApp {
  _description: String
  createdAt: DateTime
  deletedAt: Int

  """Description of the subscription tier."""
  description: String
  id: ID

  """Price of the subscription tier."""
  price: Int

  """Name of the subscription tier."""
  tier_name: String
  updatedAt: DateTime

  """Reference to the user who owns the subscription."""
  user_id: User
}

"""SubscriptionsApps create input"""
input SubscriptionsAppCreateInput {
  """Description of the subscription tier."""
  description: String

  """Price of the subscription tier."""
  price: Int

  """Name of the subscription tier."""
  tier_name: String
  user_id: SubscriptionsAppsUser_idRelationInput
}

"""SubscriptionsApps create many input"""
input SubscriptionsAppCreateManyInput {
  """Description of the subscription tier."""
  description: String

  """Price of the subscription tier."""
  price: Int

  """Name of the subscription tier."""
  tier_name: String
}

"""SubscriptionsApps delete input"""
input SubscriptionsAppDeleteInput {
  force: Boolean
  id: ID
}

"""SubscriptionsAppFieldsPermissions create input"""
input SubscriptionsAppFieldsPermissions {
  createdAt: Boolean
  description: Boolean
  price: Boolean
  tier_name: Boolean
  updatedAt: Boolean
}

input SubscriptionsAppFilter {
  AND: [SubscriptionsAppFilter!]
  OR: [SubscriptionsAppFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  price: IntPredicate
  tier_name: StringPredicate
  updatedAt: DateTimePredicate
  user_id: UserFilter
}

input SubscriptionsAppGroupBy {
  first: Int
  having: Having
  last: Int
  query: SubscriptionsAppGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input SubscriptionsAppGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  description: [GroupByField!]
  id: [GroupByField!]
  price: [GroupByField!]
  tier_name: [GroupByField!]
  updatedAt: [GroupByField!]
  user_id: UserGroupByQuery
}

input SubscriptionsAppKeyFilter {
  id: ID
}

"""SubscriptionsAppListResponse output"""
type SubscriptionsAppListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [SubscriptionsApp!]!
}

"""SubscriptionsAppManyResponse output"""
type SubscriptionsAppManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SubscriptionsApp!]!
}

"""No longer supported. Use `sort` instead."""
enum SubscriptionsAppOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  price_ASC
  price_DESC
  tier_name_ASC
  tier_name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""SubscriptionsApps subscription payload"""
type SubscriptionsAppPayload {
  mutation: MutationType!
  node: SubscriptionsApp
  previousValues: SubscriptionsApp
  updatedFields: [String]
}

input SubscriptionsAppRelationFilter {
  every: SubscriptionsAppFilter
  none: SubscriptionsAppFilter
  some: SubscriptionsAppFilter
}

input SubscriptionsAppSort {
  createdAt: SortOrder
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  price: SortOrder
  tier_name: SortOrder
  updatedAt: SortOrder
  user_id: UserSort
}

"""SubscriptionsApps subscription filter"""
input SubscriptionsAppSubscriptionFilter {
  mutation_in: [MutationType]
  node: SubscriptionsAppFilter
  updatedFields: UpdatedFieldsFilter
}

"""SubscriptionsApps update input"""
input SubscriptionsAppUpdateByFilterInput {
  description: [UpdateByFilterStringInput]
  price: [UpdateByFilterIntInput]
  tier_name: [UpdateByFilterStringInput]
}

"""SubscriptionsApps update input"""
input SubscriptionsAppUpdateInput {
  """Description of the subscription tier."""
  description: String
  id: ID

  """Price of the subscription tier."""
  price: Int

  """Name of the subscription tier."""
  tier_name: String
  user_id: SubscriptionsAppsUser_idUpdateRelationInput
}

input SubscriptionsApp_PermissionFilter {
  AND: [SubscriptionsApp_PermissionFilter!]
  OR: [SubscriptionsApp_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  price: IntPredicate
  tier_name: StringPredicate
  updatedAt: DateTimePredicate
  user_id: User_PermissionFilter
}

input SubscriptionsApp_PermissionRelationFilter {
  every: SubscriptionsApp_PermissionFilter
  none: SubscriptionsApp_PermissionFilter
  some: SubscriptionsApp_PermissionFilter
}

"""SubscriptionsApps relation input"""
input SubscriptionsAppsUser_idRelationInput {
  create: SubscriptionsApps_UserCreateInput
}

"""SubscriptionsApps relation input"""
input SubscriptionsAppsUser_idUpdateRelationInput {
  update: SubscriptionsApps_UserUpdateInput
}

"""Users create input from SubscriptionsApps"""
input SubscriptionsApps_UserCreateInput {
  Notifications: UsersNotificationsRelationInput!
  Reports: UsersReportsRelationInput!
  SearchCriteria: UsersSearchCriteriaRelationInput!
  SubscriptionsApps: UsersSubscriptionsAppsRelationInput
  WorkOrders: UsersWorkOrdersRelationInput
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users update input from SubscriptionsApps"""
input SubscriptionsApps_UserUpdateInput {
  Notifications: UsersNotificationsUpdateRelationInput
  Reports: UsersReportsUpdateRelationInput
  SearchCriteria: UsersSearchCriteriaUpdateRelationInput
  SubscriptionsApps: UsersSubscriptionsAppsUpdateRelationInput
  WorkOrders: UsersWorkOrdersUpdateRelationInput
  avatar: UsersAvatarUpdateRelationInput
  email: String
  firstName: String
  lastName: String
  roles: UsersRolesUpdateRelationInput
  status: String
  timezone: String
}

input SubstringFunctionArguments {
  len: Int
  pos: Int!
}

type SuccessResponse {
  success: Boolean
}

type SuccessWithMessageResponse {
  message: String
  success: Boolean
}

"""Switch Field Attributes"""
type SwitchFieldTypeAttributes {
  format: String!
  listOptions: [String]
}

"""Switch Type Format Enum"""
enum SwitchTypeFormatEnum {
  ACTIVE_INACTIVE
  CUSTOM
  HIGH_LOW
  ON_OFF
  TRUE_FALSE
  YES_NO
}

input SystemAIIdeasInput {
  examples: [String]
  name: String
}

"""Application"""
type SystemApplication {
  appType: String!
  createdAt: DateTime!
  description: String
  displayName: String
  id: ID!
  name: String!
  status: SystemApplicationStatusEnum!
}

"""ApplicationDeleteMutationInput"""
input SystemApplicationDeleteMutationInput {
  force: Boolean
  id: String!
}

"""Application install input"""
input SystemApplicationInstallInput {
  appType: String!
  description: String
  displayName: String
  name: String!
  status: SystemApplicationStatusEnum = INACTIVE
}

"""SystemApplicationListResponse output"""
type SystemApplicationListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemApplication!]!
}

"""Application Status Enum"""
enum SystemApplicationStatusEnum {
  ACTIVE
  INACTIVE
}

"""Application update input"""
input SystemApplicationUpdateInput {
  description: String
  displayName: String
  id: String!
  name: String
  status: SystemApplicationStatusEnum
}

type SystemAsyncSessionStatusResponse {
  result: JSON
  status: String!
}

type SystemAuthProfile {
  id: String
  name: String
  type: String
}

type SystemAuthenticationInfo {
  authProfile: [SystemAuthProfile]
  environmentId: String
  environmentName: String
}

type SystemBackendUtilizationResponse {
  authProfiles: Int
  databaseRows: Int
  field: Int
  fileStorageSize: Int
  functions: Int
  roles: Int
  tables: Int
}

type SystemBasicSectionConfigurationForPromptExecutionResponse {
  content: JSON
}

type SystemBasicSectionConfigurationItem {
  criteria: String!
  description: String!
  enabledWith8base: Boolean
  id: ID!
  name: String!
}

type SystemBasicSectionConfigurationResponse {
  application_classification: [SystemBasicSectionConfigurationItem]
  building_blocks: [SystemBasicSectionConfigurationItem]
  commercialization_model: [SystemBasicSectionConfigurationItem]
}

type SystemBillingCurrentPlanResponse {
  customerId: String
  displayName: String
  features: [SystemBillingPlanFeature]
  id: ID
  limitMetrics: [SystemBillingPlanLimitMetrics]
  name: String
  nextPlan: SystemBillingNextPlanResponse
  paymentDate: DateTime
  paymentDetails: String
  pdf: String
  price: Int
  status: SystemWorkspaceStatus
  subscriptionId: String
  trialEnd: DateTime
}

enum SystemBillingDetailsOrigin {
  member
  organization
  workspace
}

type SystemBillingDetailsResponse {
  brand: String
  expMonth: Int
  expYear: Int
  last4: String
  origin: SystemBillingDetailsOrigin!
}

type SystemBillingInvoiceItem {
  amountDue: Float
  amountPaid: Float
  amountRemaining: Float
  description: String
  endingBalance: Float
  id: ID!
  invoicePdf: String
  number: String
  organization: SystemBillingInvoiceItemOrganizationInfo
  paid: Boolean
  periodEnd: DateTime
  periodStart: DateTime
  plan: SystemBillingInvoiceItemPlanInfo
  project: SystemBillingInvoiceItemProjectInfo
  status: String
  total: Float
}

type SystemBillingInvoiceItemOrganizationInfo {
  id: ID
  name: String
}

type SystemBillingInvoiceItemPlanInfo {
  displayName: String
  id: ID
  name: String
}

type SystemBillingInvoiceItemProjectInfo {
  id: ID
  name: String
}

enum SystemBillingInvoicesListFilterType {
  CUSTOMER
  PROJECT
}

"""SystemBillingInvoicesListResponse output"""
type SystemBillingInvoicesListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemBillingInvoiceItem!]!
}

type SystemBillingLimitMetricItem {
  description: String
  displayName: String
  name: String
  showPriority: Int
  tooltip: String
  unit: String
}

type SystemBillingMetricOverageItem {
  value: Float
  warning: String
}

type SystemBillingMetricUsageItem {
  limitMetric: SystemBillingLimitMetricItem
  overage: SystemBillingMetricOverageItem
  value: Float
}

type SystemBillingMetricUsageQuotaItem {
  limitMetric: SystemBillingLimitMetricItem
  value: Float
}

"""SystemBillingMetricUsageQuotasListResponse output"""
type SystemBillingMetricUsageQuotasListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemBillingMetricUsageQuotaItem!]!
}

input SystemBillingMetricUsagesListFilter {
  entryDate: DateTimePredicate!
}

"""SystemBillingMetricUsagesListResponse output"""
type SystemBillingMetricUsagesListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemBillingMetricUsageItem!]!
}

type SystemBillingNextPlanResponse {
  displayName: String
  id: ID
  name: String
  pdf: String
  price: Int
}

type SystemBillingPlanBaseInfo {
  capacity: String
  description: String
  displayName: String
  featuresTitle: String
  id: ID
  isCustom: Boolean
  isLegacy: Boolean
  limitMetrics: [SystemBillingPlanLimitMetricItem]
  name: String
  pdf: String
  price: Int
  status: String
}

type SystemBillingPlanFeature {
  displayName: String
  isActive: Boolean
  name: String
}

type SystemBillingPlanLimitMetricItem {
  displayName: String
  hardLimit: Float
  name: String
  overagePrice: Int
  softLimit: Float
}

type SystemBillingPlanLimitMetrics {
  hardLimit: String
  id: String
  name: String
  overagePrice: String
  softLimit: String
}

"""BillingPlanUpdateMutationInput"""
input SystemBillingPlanUpdateMutationInput {
  planId: ID!
  projectID: ID!
}

enum SystemBranchEnvironmentMode {
  FULL
  SYSTEM
}

type SystemCacheEvictResponse {
  evicted: [String]!
}

input SystemChangePlanIdeaMutationInput {
  archieId: ID!
  couponId: String
  couponName: String
  id: ID!
  newPlan: String!
}

input SystemChangeRoleIdeaMemberMutationInput {
  email: String!
  ideaId: ID!
  role: InvitationRoleEnum!
}

input SystemChangeRoleIdeaMutationInputList {
  recipients: [SystemChangeRoleIdeaMemberMutationInput!]!
}

"""Ci Commit Mode"""
enum SystemCiCommitMode {
  FULL
  ONLY_MIGRATIONS
  ONLY_PROJECT
}

"""Ci Status"""
type SystemCiStatusOutput {
  migrations: [String]
  status: String!
}

"""CloudLogs Entry"""
type SystemCloudLogsEntry {
  message: String
  timestamp: DateTime
}

"""Computed field mode"""
enum SystemComputedFieldMode {
  STORED
  VIRTUAL
}

"""Custom Table Field Type"""
type SystemCustomTableField {
  computedMode: SystemComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: SystemFieldType
  fieldTypeAttributes: SystemFieldTypeAttributes
  isList: Boolean!
  isRequired: Boolean!
  isUnique: Boolean
  name: String
}

"""Date Field Attributes"""
type SystemDateFieldTypeAttributes {
  format: String!
}

"""Date Type Format Enum"""
enum SystemDateTypeFormatEnum {
  DATE
  DATETIME
}

"""Delete Member From Organization Response"""
type SystemDeleteArchieMemberFromOrganizationResponse {
  success: Boolean!
}

input SystemDeleteIdeaMutationInput {
  id: ID!
}

input SystemDeleteMemberIdeaMutationInput {
  email: String!
  ideaId: ID!
}

input SystemDeleteMemberIdeaMutationInputList {
  members: [SystemDeleteMemberIdeaMutationInput!]!
}

"""DeployDataResponse"""
type SystemDeployDataResponse {
  buildName: String!
  uploadBuildUrl: String!
  uploadMetaDataUrl: String!
}

enum SystemDeployModeEnum {
  FULL
  FUNCTIONS
  MIGRATIONS
  ONLY_PLUGINS
  ONLY_PROJECT
}

"""DeployOptions"""
input SystemDeployOptions {
  extensionNames: [String]
  mode: SystemDeployModeEnum = ONLY_PROJECT
  nodeVersion: String
  pluginNames: [String]
}

enum SystemDeployStatusEnum {
  compiling
  complete_error
  complete_success
  deploying
  initialize
  preparing
}

"""SystemDeployStatusResult"""
type SystemDeployStatusResult {
  message: String
  status: SystemDeployStatusEnum!
}

"""DeployingBuildInput"""
input SystemDeployingBuildInput {
  buildName: String!
  options: SystemDeployOptions
}

type SystemDeploymentABItemResponse {
  dateDeploy: DateTime
  statusDeploy: String
  urlDeploy: String
  userDeploy: SystemMemberAccountInfo
  versionDeploy: String
  versionFrontEnd: String
}

type SystemDeploymentProjectItemResponse {
  dateDeploy: DateTime
  name: String
  statusDeploy: String
  urlDeploy: String
  versionDeploy: String
  versionFrontEnd: String
  workspaceId: ID
}

"""SystemDeploymentProjectListResponse output"""
type SystemDeploymentProjectListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemDeploymentProjectItemResponse!]!
}

"""SystemEnvironmentBackupListResponse output"""
type SystemEnvironmentBackupListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [EnvironmentBackupItem!]!
}

type SystemEnvironmentMember {
  avatar: SystemEnvironmentMemberAvatar
  createdAt: DateTime
  email: String!
  firstName: String
  lastName: String
  permissions: SystemEnvironmentMemberPermissionsList
  registeredAt: DateTime
  roles: SystemEnvironmentMemberRolesList
  status: String!
}

type SystemEnvironmentMemberAvatar {
  downloadUrl: String
  id: String
}

input SystemEnvironmentMemberFilter {
  email: String
  workspaceId: String
}

type SystemEnvironmentMemberPermission {
  permission: JSON
  resource: String
  resourceType: String
}

type SystemEnvironmentMemberPermissionsList {
  count: Int!
  items: [SystemEnvironmentMemberPermission!]
}

type SystemEnvironmentMemberRole {
  id: String!
  name: String!
}

input SystemEnvironmentMemberRoleIdFilterPredicate {
  equals: ID
  not_equals: ID
}

type SystemEnvironmentMemberRolesList {
  count: Int!
  items: [SystemEnvironmentMemberRole!]
}

input SystemEnvironmentMemberStatusFilterPredicate {
  equals: String
  not_equals: String
}

input SystemEnvironmentMemberUpdateData {
  roles: [String]
}

input SystemEnvironmentMembersFilter {
  email: String!
}

input SystemEnvironmentMembersListFilter {
  email: String
  firstName: String
  lastName: String
  roleId: SystemEnvironmentMemberRoleIdFilterPredicate
  status: SystemEnvironmentMemberStatusFilterPredicate
  workspaceId: ID
}

"""SystemEnvironmentMembersListResponse output"""
type SystemEnvironmentMembersListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemEnvironmentMember!]!
}

input SystemEnvironmentMembersListSort {
  email: SortOrder
  firstName: SortOrder
  isOwner: SortOrder
  lastName: SortOrder
  status: SortOrder
}

type SystemEnvironmentProjectItem {
  fields: String
  functions: String
  id: ID!
  name: String!
  tables: String
  worksApiHost: String
  workspaceId: ID!
  workspaceName: String!
}

enum SystemEnvironmentRelationModeEnum {
  ForeignKey
  Pivot
}

type SystemEnvironmentRoleBaseInfo {
  id: String!
  name: String!
}

type SystemEnvironmentRoleList {
  assignedRoles: [SystemEnvironmentRoleBaseInfo]
  environmentId: String!
  environmentName: String!
  exists: Boolean
  roles: [SystemEnvironmentRoleBaseInfo]
}

type SystemEnvironmentSettings {
  deleteLock: Boolean
  fileManagementProvider: SystemFileManagerProviderTypeEnum
  introspection: Boolean
  relationMode: SystemEnvironmentRelationModeEnum
}

"""SystemEnvironmentsListResponse output"""
type SystemEnvironmentsListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [EnvironmentItem!]!
}

"""SystemEnvironmentsProjectListResponse output"""
type SystemEnvironmentsProjectListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemEnvironmentProjectItem!]!
}

input SystemExportIdeaToDocumentInput {
  advancedConsiderations: Boolean
  applicationServices: Boolean
  applicationServicesDetails: Boolean
  designGeneral: Boolean
  ideaId: ID!
  includeAll: Boolean
  modules: Boolean
  modulesDetails: Boolean
  output: String
  overview: Boolean
  screens: Boolean
  siteMap: Boolean
  userTypes: Boolean
}

type SystemExportIdeaToDocumentResponse {
  content: JSON
  documentType: String!
}

"""Field Data Features"""
type SystemFieldDataFeatures {
  create: Boolean!
  sort: Boolean!
  update: Boolean!
}

"""Field Schema Features"""
type SystemFieldSchemaFeatures {
  delete: Boolean!
  update: Boolean!
}

"""Field types"""
enum SystemFieldType {
  DATE
  FILE
  GEO
  ID
  JSON
  MISSING_RELATION
  NUMBER
  ONE_WAY_RELATION
  RELATION
  SMART
  SWITCH
  TEXT
  UUID
}

"""Field Type Attributes"""
union SystemFieldTypeAttributes = SystemDateFieldTypeAttributes | SystemFileFieldTypeAttributes | SystemGeoFieldTypeAttributes | SystemMissingRelationFieldTypeAttributes | SystemNumberFieldTypeAttributes | SystemSmartFieldTypeAttributes | SystemSwitchFieldTypeAttributes | SystemTextFieldTypeAttributes | SystemUUIDFieldTypeAttributes

"""Field Type Attributes Input"""
input SystemFieldTypeAttributesInput {
  autoIncrement: Boolean
  currency: String
  expiration: Int
  fieldSize: Int
  format: String
  isBigInt: Boolean
  listOptions: [String!]
  maxSize: Int
  maxValue: Float
  minValue: Float
  precision: Int
  srid: Int
  typeRestrictions: [String!]
}

type SystemFileBaseInfo {
  downloadUrl: String
  id: String
}

"""File Field Attributes"""
type SystemFileFieldTypeAttributes {
  expiration: Int
  format: String!
  maxSize: Int
  showTitle: Boolean @deprecated(reason: "Field is deprecated")
  showUrl: Boolean @deprecated(reason: "Field is deprecated")
  typeRestrictions: [String!]
}

enum SystemFileManagerProviderTypeEnum {
  aws
  filestack
  uploadcare
}

"""File Type Format Enum"""
enum SystemFileTypeFormatEnum {
  FILE
  IMAGE
}

"""FileUploadByUrlInput"""
input SystemFileUploadByUrlInput {
  url: String!
}

"""FileUploadByUrlResponse"""
type SystemFileUploadByUrlResponse {
  fileId: String!
  meta: JSON!
}

union SystemFileUploadSignInfo = AwsSignInfoResponse | FileStackSignInfoResponse | UploadcareSignInfoResponse

type SystemFrontendUtilizationABResponse {
  CDN: Boolean
  assets: Int
  customStates: Int
  functions: Int
  layouts: Int
  libraries: Int
  pages: Int
  requests: Int
  resources: Int
}

type SystemFrontendUtilizationResponse {
  assets: Int
  customStates: Int
  functions: Int
  layouts: Int
  libraries: Int
  pages: Int
  requests: Int
  resources: Int
}

"""FunctionInfo"""
interface SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  name: String!
}

"""FunctionInfoCheck"""
type SystemFunctionInfoCheck {
  version: String
}

"""FunctionInfoFilter"""
input SystemFunctionInfoFilter {
  description: String
  functionType: SystemFunctionType
  name: String
}

"""FunctionInfoOrderBy"""
enum SystemFunctionInfoOrderBy {
  description_ASC
  description_DESC
  functionType_ASC
  functionType_DESC
  name_ASC
  name_DESC
}

"""SystemFunctionListResponse output"""
type SystemFunctionListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemFunctionInfo!]!
}

"""FunctionResolverInfo"""
type SystemFunctionResolverInfo implements SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  gqlType: String!
  name: String!
}

"""FunctionTaskInfo"""
type SystemFunctionTaskInfo implements SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  name: String!
  scheduleExpression: String
}

"""FunctionTriggerInfo"""
type SystemFunctionTriggerInfo implements SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  name: String!
  operation: String!
  tableName: String!
  type: String!
}

"""FunctionType"""
enum SystemFunctionType {
  resolver
  schedule
  task
  trigger
  webhook
}

"""FunctionWebhookInfo"""
type SystemFunctionWebhookInfo implements SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  httpMethod: String!
  name: String!
  workspaceFullPath: String!
  workspaceRelativePath: String!
}

"""Diff Environment Input"""
type SystemGenerateEnvironmentOutput {
  url: String
}

"""Geo Field Attributes"""
type SystemGeoFieldTypeAttributes {
  format: String!
  srid: Int
}

type SystemGetCouponResponse {
  amount_off: Float
  duration: String!
  duration_in_months: Int!
  id: String!
  name: String!
  percent_off: Float
  valid: Boolean!
}

type SystemGetInvitationIdeaResponse {
  archieId: ID!
  ideaId: ID!
  invitationId: ID!
  nickName: String!
  role: InvitationRoleEnum!
  status: String!
}

type SystemGraphQLArchitecturesResponse {
  enabling_technologies: JSON
  id: ID!
  infrastructure_diagram: JSON
  integrations: JSON
}

type SystemGraphQLBlueprintResponse {
  ai_enablement_ideas: JSON
  application_classification: JSON
  building_blocks: JSON
  commercialization_model: JSON
  design_preview: JSON
  design_principles: JSON
  id: ID!
  insights: JSON
  modules: JSON
  originalPrompt: JSON
  problem_statement: JSON
  solution_statement: JSON
  user_types: JSON
}

type SystemGraphQLBuildingBlocksRequirementsResponse {
  description: String
  details: String
  id: ID!
  label: String
  status: String
  stories: JSON
}

type SystemGraphQLBuildingBlocksResponse {
  buildingBlocksRequirements: [SystemGraphQLBuildingBlocksRequirementsResponse]
  checked: Boolean
  description: String
  id: ID!
  name: String
  order: Int
  status: String
}

type SystemGraphQLBuildingBlocksScreensResponse {
  id: ID
  name: String
  order: Int
  purpose: String
  screensWireframes: [SystemGraphQLScreensWireFramesResponse]
  status: String
  urlPath: String
}

type SystemGraphQLFeaturesBreakdownResponse {
  functionality: String
  id: ID!
  name: String
  technicalRequirements: JSON
  userInterfaces: JSON
}

type SystemGraphQLModulesRequirementsResponse {
  description: String
  details: String
  id: ID!
  label: String
  status: String
  stories: JSON
}

type SystemGraphQLModulesResponse {
  description: String
  icon: String
  id: ID!
  modulesRequirements: [SystemGraphQLModulesRequirementsResponse]
  name: String
  order: Int
  status: String
  uiPattern: JSON
}

type SystemGraphQLOverviewResponse {
  accessibility_requirements: JSON
  application_classification: JSON
  commercialization_model: JSON
  compliance_requirements: JSON
  design_principles: JSON
  id: ID!
  performance_requirements: JSON
  problem_statement: JSON
  security_requirements: JSON
  solution_statement: JSON
  status: String
}

type SystemGraphQLScreensWireFramesResponse {
  html: String
  id: ID!
  name: String
  status: String
}

input SystemGraphQLSectionResultRegenerateMutationInput {
  archieId: ID!
  idea: ID!
  instructions: String
  package: String!
  provisionalData: Boolean
  requirementsDescription: String
  sectionCategoriesWithIds: JSON
}

type SystemGraphQLUserAccountsResponse {
  email: String
  firstName: String
}

type SystemGraphQLUserInterfacesResponse {
  requirements_design_guidelines: JSON
  requirements_site_map: JSON
  requirements_ui_ux_general: JSON
  status: String
  wireframe_layout: JSON
}

type SystemGraphQLUserTypeDetailsResponse {
  comprehensive_needs: JSON
  comprehensive_painpoints: JSON
  id: ID!
  status: String
}

type SystemGraphQLUserTypeUseCaseResponse {
  description: String
  id: ID!
  name: String
}

type SystemGraphQLUserTypesResponse {
  description: String
  deviceusages: [String]
  id: ID!
  name: String
  order: Int
  softwareproficiency: String
  status: String
  userTypesDetails: [SystemGraphQLUserTypeDetailsResponse]
  userTypesUseCases: [SystemGraphQLUserTypeUseCaseResponse]
}

type SystemIdeaDetailsResponse {
  archieId: ID!
  architectures: [SystemGraphQLArchitecturesResponse]
  blueprints: [SystemGraphQLBlueprintResponse]
  buildingBlocks: [SystemGraphQLBuildingBlocksResponse]
  createdAt: DateTime
  description: String
  detailedProgress: JSON
  elevatorDescription: String
  executedDesign: Boolean
  featuresBreakdown: [SystemGraphQLFeaturesBreakdownResponse]
  id: ID!
  invitations: [SystemIdeaInvitationBaseResponse]
  isDemoProject: Boolean
  members: [SystemIdeaMemberBaseResponse]
  modules: [SystemGraphQLModulesResponse]
  nextStep: String!
  nickName: String!
  overviews: [SystemGraphQLOverviewResponse]
  owner: SystemMemberAccountInfo
  ownerType: String
  plan: SystemPlanInfoIdea
  progress: Float!
  requirementsDescription: String
  screens: [SystemGraphQLBuildingBlocksScreensResponse]
  updatedAt: DateTime
  userInterfaces: [SystemGraphQLUserInterfacesResponse]
  userTypes: [SystemGraphQLUserTypesResponse]
}

input SystemIdeaGeneralCreateMutationInput {
  description: String!
  nickName: String
  organizationId: String
}

type SystemIdeaGeneralResponse {
  archieId: ID!
  description: String!
  id: ID!
  nickName: String!
}

input SystemIdeaGeneralUpdateMutationInput {
  description: String
  elevatorDescription: String
  id: ID!
  nickName: String
  requirementsDescription: String
}

input SystemIdeaImproveMutationInput {
  description: String
}

type SystemIdeaImproveResponse {
  suggestion: String!
}

input SystemIdeaImproveWithAIMutationInput {
  aiIdeas: [SystemAIIdeasInput]
  archieId: ID!
}

type SystemIdeaImproveWithAIResponse {
  expectedBenefits: [String]
  kpis: [String]
  statement: String!
}

type SystemIdeaInvitationBaseResponse {
  email: String!
  id: ID!
  role: InvitationRoleEnum!
}

"""Idea Invitation Member"""
type SystemIdeaInvitationMember {
  id: String
  role: String
  status: String
  userAccounts: SystemGraphQLUserAccountsResponse
}

type SystemIdeaItemOrganizationMember {
  archieId: ID!
  createdAt: DateTime
  description: String!
  detailedProgress: JSON
  id: ID!
  nextStep: String
  nickName: String!
  progress: Float!
  updatedAt: DateTime
}

type SystemIdeaItemRespSingle {
  archieId: ID!
  createdAt: DateTime
  description: String!
  detailedProgress: JSON
  id: ID!
  lastActivityAt: DateTime
  members: [SystemMemberAccountInfo]
  nextStep: String!
  nickName: String!
  owner: SystemMemberAccountInfo
  progress: Float!
  updatedAt: DateTime
}

"""SystemIdeaItemResponse output"""
type SystemIdeaItemResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemIdeaItemRespSingle!]!
}

type SystemIdeaMemberBaseResponse {
  avatar: GraphQLFileItemResponse
  email: String!
  firstName: String!
  lastName: String!
  onboardingStatus: JSON!
  organizationId: ID!
  role: InvitationRoleEnum!
}

type SystemIdeaUserResponse {
  ideas: SystemIdeaItemResponse!
}

union SystemInboxEventDetailsUnion = SystemInboxEventEnvironmentInvitationDetails | SystemInboxEventNotificationDetailsType | SystemInboxEventOrganizationInvitationDetails

type SystemInboxEventEnvironmentInvitationDetails {
  environmentName: String
  invitedBy: SystemInboxEventInvitedBy
  project: SystemInboxEventProject
  status: SystemInboxEventStatusEnum
  uuid: String
  workspace: SystemInboxEventWorkspace
}

type SystemInboxEventInvitedBy {
  avatar: GraphQLFileItemResponse
  email: String
  firstName: String
  lastName: String
}

type SystemInboxEventItem {
  createdAt: DateTime!
  details: SystemInboxEventDetailsUnion
  id: ID!
  isCompleted: Boolean
  type: SystemInboxEventTypeEnum
}

type SystemInboxEventNotificationDetailsType {
  details: JSON
  kind: String
}

type SystemInboxEventOrganization {
  avatar: GraphQLFileItemResponse
  id: ID!
  name: String
}

type SystemInboxEventOrganizationInvitationDetails {
  invitedBy: SystemInboxEventInvitedBy
  organization: SystemInboxEventOrganization
  status: SystemInboxEventStatusEnum
  uuid: String
}

type SystemInboxEventProject {
  apiHost: String
  avatar: GraphQLFileItemResponse
  id: ID!
  kind: String
  name: String
}

enum SystemInboxEventStatusEnum {
  accepted
  declined
  sent
}

enum SystemInboxEventTypeEnum {
  EnvironmentInvitation
  Notification
  OrganizationInvitation
}

type SystemInboxEventWorkspace {
  apiHost: String
  avatar: GraphQLFileItemResponse
  id: ID!
  kind: String
  name: String
}

"""SystemInboxEventsListResponse output"""
type SystemInboxEventsListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemInboxEventItem!]!
}

"""Table Create Index Input"""
input SystemIndexCreateInput {
  columns: [SystemTableIndexColumnInput!]!
  force: Boolean
  name: String
  tableId: ID!
  type: TableIndexType!
}

"""Table Delete Index Input"""
input SystemIndexDeleteInput {
  id: ID!
}

"""Table Update Index Input"""
input SystemIndexUpdateInput {
  columns: [SystemTableIndexColumnInput!]
  force: Boolean
  id: ID!
  name: String
  type: TableIndexType
}

"""Idea Invitation Accept/Cancel Response"""
type SystemInvitationAcceptCancelResponse {
  success: Boolean!
}

"""Idea invitation accept/Cancel input"""
input SystemInvitationIdeaAcceptCancelInput {
  accepted: Boolean!
  id: String!
}

"""Idea Invitation Cancel Response"""
type SystemInvitationIdeaResendResponse {
  success: Boolean!
}

"""Idea invitation cancel input"""
input SystemInvitationIdeaResendlInput {
  id: String!
}

"""Invite recipient input"""
input SystemInviteIdeaRecipientInput {
  email: String!
  ideaId: String!
  organizationUserId: String
  role: RoleEnum!
}

"""Invite idea input"""
input SystemInviteMembersIdeaInput {
  organizationId: String
  recipients: [SystemInviteIdeaRecipientInput!]!
}

"""Invite members input"""
input SystemInviteMembersInput {
  recipients: [SystemInviteRecipientInput!]!
}

"""Invite recipient input"""
input SystemInviteRecipientInput {
  email: String!
  firstName: String
  lastName: String
  roles: [ID!]
}

"""Invited By Name"""
type SystemInvitedByName {
  email: String
  firstName: String
  lastName: String
  projectId: String
  projectName: String
  workspaceName: String
}

"""InvokeData"""
input SystemInvokeData {
  functionName: String!
  inputArgs: String
  nodeVersion: String
}

"""InvokeFunctionResponse"""
type SystemInvokeFunctionResponse {
  responseData: String!
}

"""LogsListFiltered Response"""
type SystemLogsListFilteredResponse {
  count: Int
  items: [SystemCloudLogsEntry]
  nextToken: String
}

"""
Member - list of workspaces you are member of
Owner - list of workspaces you are owner of
OrganizationUser - list of organizations you are part of
"""
type SystemMemberAccountDeleteDetails {
  member: [SystemOrganizationWorkspaceItem]
  organizationUser: [SystemOrganizationBaseItem]
  owner: [SystemOrganizationWorkspaceItem]
}

type SystemMemberAccountDeleteResponse {
  details: SystemMemberAccountDeleteDetails
  success: Boolean!
}

type SystemMemberAccountInfo {
  aboutMe: String
  addressLine1: String
  addressLine2: String
  archieRole: String
  authCreateMethod: String
  avatar: GraphQLFileItemResponse
  city: String
  companyName: String
  country: String
  createdAt: DateTime
  email: String!
  firstName: String
  githubUsername: String
  id: String
  intendedUse: String
  isADemoUser: Boolean
  isArchieAdmin: Boolean
  isDeveloper: Boolean
  isEmailVerified: Boolean
  isOrganizationOwner: Boolean
  lastName: String
  learningMode: Boolean
  linkedInUsername: String
  onboardingStatus: JSON
  projectDescription: String
  role: String
  sourceAccount: String
  state: String
  status: String
  timezone: String
  twitterUsername: String
  type: SystemUserType
  website: String
  zipCode: String
}

input SystemMemberAccountUpsertDataInput {
  aboutMe: String
  addressLine1: String
  addressLine2: String
  archieRole: String
  authCreateMethod: String
  avatar: GraphQLCreateFileItemInput
  city: String
  companyName: String
  country: String
  createdAt: DateTime
  email: String
  firstName: String
  githubUsername: String
  id: String
  intendedUse: String
  isADemoUser: Boolean
  isArchieAdmin: Boolean
  isDeveloper: Boolean
  isEmailVerified: Boolean
  isOrganizationOwner: Boolean
  lastName: String
  learningMode: Boolean
  linkedInUsername: String
  onboardingStatus: JSON
  organizationCreatorRole: String
  organizationKind: String
  organizationNeed: String
  organizationSize: String
  projectDescription: String
  role: String
  sourceAccount: String
  state: String
  status: String
  timezone: String
  twitterUsername: String
  type: SystemUserType
  website: String
  zipCode: String
}

input SystemMemberArchieInviteOrganizationInput {
  email: String!
  role: String!
}

"""Member Change Organization Role Input"""
input SystemMemberChangeOrganizationRoleInput {
  id: String!
  role: String!
}

"""Member Change Organization Role Response"""
type SystemMemberChangeOrganizationRoleResponse {
  success: Boolean!
}

"""Member Invitation"""
type SystemMemberInvitation {
  accepted: Boolean
  acceptedOn: DateTime
  apiHost: String
  email: String
  firstName: String
  id: String
  invitedBy: SystemInvitedByName
  isRegistered: Boolean
  lastName: String
  resentOn: DateTime
}

"""Member invitation accept input"""
input SystemMemberInvitationAcceptInput {
  accepted: Boolean!
  id: String!
}

"""Member Invitation Accept Response"""
type SystemMemberInvitationAcceptResponse {
  success: Boolean!
}

"""Cancel members invitations input"""
input SystemMemberInvitationCancelInput {
  email: String!
}

"""Resend member invitation input"""
input SystemMemberInvitationResendInput {
  email: ID!
}

type SystemMemberInvitationsList {
  count: Int
  items: [SystemMemberInvitation]
}

type SystemMemberOrganizationAccountInfo {
  aboutMe: String
  addressLine1: String
  addressLine2: String
  archieRole: String
  authCreateMethod: String
  avatar: GraphQLFileItemResponse
  city: String
  companyName: String
  country: String
  createdAt: DateTime
  email: String!
  firstName: String
  githubUsername: String
  id: String
  ideas: [SystemIdeaItemOrganizationMember]
  intendedUse: String
  isADemoUser: Boolean
  isArchieAdmin: Boolean
  isDeveloper: Boolean
  isEmailVerified: Boolean
  isOrganizationOwner: Boolean
  lastName: String
  learningMode: Boolean
  linkedInUsername: String
  onboardingStatus: JSON
  organization: SystemOrganizationBaseItem
  projectDescription: String
  role: String
  sourceAccount: String
  state: String
  status: String
  timezone: String
  twitterUsername: String
  type: SystemUserType
  website: String
  zipCode: String
}

"""Member Change Organization Role Input"""
input SystemMemberOrganizationInviteMutationInput {
  ideaId: String
  ideaRole: String
  invitedByName: String!
  members: [SystemMemberArchieInviteOrganizationInput]
  organizationId: ID!
  organizationName: String!
}

"""Member Change Organization Role Input"""
input SystemMemberOrganizationResendInviteMutationInput {
  email: String!
  invitedByName: String!
  organizationId: ID!
  organizationName: String!
}

"""MemberPaymentDetailsUpdateMutationInput"""
input SystemMemberPaymentDetailsUpdateMutationInput {
  cardToken: String
}

"""Member Resend Verify Account Email Response"""
type SystemMemberResendVerifyAccountEmailResponse {
  success: Boolean!
}

"""Member Resend Verify Account Email input"""
input SystemMemberResendVerifyAccountEmaillInput {
  email: String!
}

type SystemMembersAccountList {
  items: [SystemMemberOrganizationAccountInfo]
}

type SystemMembersIdeaList {
  count: Int
  items: [SystemIdeaInvitationMember]
}

"""MissingRelation Field Attributes"""
type SystemMissingRelationFieldTypeAttributes {
  missingTable: String!
}

type SystemMutation {
  ExportIdeaToDocument(data: SystemExportIdeaToDocumentInput!): SystemExportIdeaToDocumentResponse
  applicationDelete(data: SystemApplicationDeleteMutationInput!): SuccessResponse
  applicationInstall(data: SystemApplicationInstallInput!): SystemApplication
  applicationUpdate(data: SystemApplicationUpdateInput!): SystemApplication
  billingContextCacheEvict(keys: [String!]!, projectKeys: [String!]!): SystemCacheEvictResponse
  billingPlanUpdate(data: SystemBillingPlanUpdateMutationInput!): SystemBillingCurrentPlanResponse
  changePlanIdea(data: SystemChangePlanIdeaMutationInput!): SystemBillingCurrentPlanResponse
  changeRoleIdeaInvitation(data: SystemChangeRoleIdeaMutationInputList!): SuccessResponse
  changeRoleIdeaMember(data: SystemChangeRoleIdeaMutationInputList!): SuccessResponse
  ciCommit(build: String, migrationNames: [String], mode: SystemCiCommitMode, nodeVersion: String): AsyncSession
  ciInstall: SuccessResponse
  createOrganizationSettingsTech(description: String, name: String!, organizationSettingsId: ID!): SystemOrganizationSettingsTech!
  deleteArchieMemberFromOrganization(email: String!, organizationId: String!): SystemDeleteArchieMemberFromOrganizationResponse!
  deleteIdea(data: SystemDeleteIdeaMutationInput!): SuccessResponse
  deleteMemberIdea(data: SystemDeleteMemberIdeaMutationInputList!): SuccessResponse
  deploy(data: SystemDeployingBuildInput): Boolean
  environmentBackup(environmentName: String!): AsyncSession
  environmentBranch(force: Boolean, mode: SystemBranchEnvironmentMode, name: String!): AsyncSession
  environmentDelete(environmentName: String!): SuccessResponse
  environmentDeleteAsync(environmentName: String!): AsyncSession
  environmentMemberDelete(filter: SystemEnvironmentMembersFilter): SuccessResponse!
  environmentMemberUpdate(data: SystemEnvironmentMemberUpdateData, filter: SystemEnvironmentMembersFilter): SystemEnvironmentMember
  environmentRestore(backup: String!, environmentName: String!): AsyncSession
  environmentSetup(data: EnvironmentSetupInput): SuccessResponse
  fieldCreate(data: SystemTableFieldCreateInput!): SystemTableField!
  fieldDelete(data: SystemTableFieldDeleteInput!): SuccessResponse!
  fieldUpdate(data: SystemTableFieldUpdateInput!): SystemTableField!
  fieldUpdatePosition(data: SystemTableFieldPositionUpdateInput!): SuccessResponse!
  fileUploadByUrl(data: SystemFileUploadByUrlInput!): SystemFileUploadByUrlResponse!
  ideaImprove(data: SystemIdeaImproveMutationInput!): SystemIdeaImproveResponse
  ideaImproveWithAI(data: SystemIdeaImproveWithAIMutationInput!): SystemIdeaImproveWithAIResponse
  ideaTransferOwner(data: SystemTransferIdeaOwnerMutationInput!): SuccessResponse
  ideaUserCreate(data: SystemIdeaGeneralCreateMutationInput!): SystemIdeaGeneralResponse
  ideaUserUpdate(data: SystemIdeaGeneralUpdateMutationInput!): SystemIdeaGeneralResponse
  indexCreate(data: SystemIndexCreateInput!): SystemTableIndex!
  indexDelete(data: SystemIndexDeleteInput!): SuccessResponse
  indexUpdate(data: SystemIndexUpdateInput!): SystemTableIndex!
  invitationIdeaAcceptCancel(data: SystemInvitationIdeaAcceptCancelInput!): SystemInvitationAcceptCancelResponse!
  invitationIdeaResend(data: SystemInvitationIdeaResendlInput!): SystemInvitationIdeaResendResponse!
  inviteMembers(data: SystemInviteMembersInput!, force: Boolean): [SystemTeamInvitationDetails]!
  inviteToIdea(data: SystemInviteMembersIdeaInput!): SuccessResponse
  invoke(data: SystemInvokeData): SystemInvokeFunctionResponse
  memberAccountDelete: SystemMemberAccountDeleteResponse
  memberAccountUpsert(data: SystemMemberAccountUpsertDataInput): SystemMemberAccountInfo
  memberChangeOrganizationRole(data: SystemMemberChangeOrganizationRoleInput!): SystemMemberChangeOrganizationRoleResponse!
  memberInvitationAccept(data: SystemMemberInvitationAcceptInput!): SystemMemberInvitationAcceptResponse!
  memberInvitationCancel(data: SystemMemberInvitationCancelInput!): SuccessResponse
  memberInvitationResend(data: SystemMemberInvitationResendInput!): SuccessResponse
  memberPaymentDetailsUpdate(data: SystemMemberPaymentDetailsUpdateMutationInput!): SystemPaymentDetailsResponse
  memberResendVerifyAccountEmail(data: SystemMemberResendVerifyAccountEmaillInput!): SystemMemberResendVerifyAccountEmailResponse!
  notificationUpdate(id: String!, status: NotificationStatusType!): SuccessResponse
  onboardingUpdate(data: SystemMemberAccountUpsertDataInput): SystemMemberAccountInfo
  organizationArchieUpgrade(data: SystemOrganizationUpgradeMutationInput!): OrganizationUpgradeResponse
  organizationInviteUser(email: String!, firstName: String, lastName: String, organizationId: ID!, projectRoles: [SystemOrganizationProjectWithEnvironmentRolesInput], role: String!): OrganizationUserInvitationResponse
  organizationInviteUserAccept(invitationId: String!): SuccessResponse
  organizationInviteUserCancel(invitationId: String!): SuccessResponse
  organizationMemberInvite(data: SystemMemberOrganizationInviteMutationInput!): SuccessResponse
  organizationMemberResendInvite(data: SystemMemberOrganizationResendInviteMutationInput!): SuccessResponse
  organizationPaymentDetailsUpdate(data: SystemOrganizationPaymentDetailsUpdateMutationInput!): SystemPaymentDetailsResponse
  organizationProjectUserRemove(email: String!, projectId: ID!): SuccessResponse
  organizationProjectUserShare(email: String!, environmentRoles: [SystemOrganizationProjectEnvironmentRolesInput], projectId: ID!): SuccessResponse
  organizationUpdate(description: String, id: String!, image: GraphQLCreateFileItemInput, name: String, type: SystemOrganizationTypeEnum): SystemOrganizationItem
  organizationUserRemove(email: String!, organizationId: String!): SuccessResponse
  organizationUserUpdate(email: String!, organizationId: ID!, role: String!): SystemOrganizationUserInfo
  partnerCreate(data: SystemPartnerGeneralCreateMutationInput!): SystemPartnerGeneralResponse
  postMessageToQueue(data: SystemPostMessageToQueueInput!): SuccessResponse
  prepareDeploy: SystemDeployDataResponse!
  projectCreate(data: SystemProjectCreateMutationInput!): AsyncSession
  projectDelete(projectId: ID!): AsyncSession
  projectLeave(projectId: ID!): SuccessResponse
  projectUpdate(data: SystemProjectUpdateMutationInput!): SystemProjectUpdateResponse
  removeOrganizationSettingsTech(organizationSettingsTechId: ID!): SuccessResponse!
  rolePermissionsCacheEvict(keys: [String!]!): SystemCacheEvictResponse
  sectionResultCreate(data: SystemSectionResultCreateMutationInput!): SystemSectionResultResponse
  sectionResultGenerate(data: SystemSectionResultGenerateMutationInput!): SuccessResponse
  sectionResultPropagate(data: SystemSectionResultPropagateUpdateMutationInput!): SuccessResponse
  sectionResultRegenerate(data: SystemGraphQLSectionResultRegenerateMutationInput!): SuccessResponse
  sectionResultUpdate(data: SystemSectionResultUpdateMutationInput!): SuccessResponse
  tableCreate(data: SystemTableCreateInput!): SystemTable!
  tableDelete(data: SystemTableDeleteInput!): SuccessResponse!
  tableUpdate(data: SystemTableUpdateInput!): SystemTable!
  updateOrganizationSettings(fileId: String, id: ID!, isWhiteLabelActive: Boolean, statementOfWork: String): SystemOrganizationSettings!
  viewCreate(data: SystemViewCreateInput!): SystemTable!
  viewUpdate(data: SystemViewUpdateInput!): SystemTable!
  workspaceCreate(data: SystemWorkspaceCreateMutationInput!): SystemWorkspaceCreateResponse
  workspaceCreateAsync(data: SystemWorkspaceCreateMutationInput!): SystemWorkspaceCreateResponse
  workspaceDelete(data: SystemWorkspaceDeleteMutationInput!): SuccessResponse
  workspaceLeave(force: Boolean): SuccessResponse
  workspaceUpdate(data: SystemWorkspaceUpdateMutationInput!): SystemWorkspaceUpdateResponse
}

"""Number Field Attributes"""
type SystemNumberFieldTypeAttributes {
  autoIncrement: Boolean
  currency: String
  format: String!
  isBigInt: Boolean
  maxValue: Float
  minValue: Float
  precision: Int
}

"""Number Type Format Enum"""
enum SystemNumberTypeFormatEnum {
  CURRENCY
  FRACTION
  NUMBER
  PERCENTAGE
  SCIENTIFIC
}

type SystemOrganizationArchieBaseItem {
  description: String
  id: ID!
  image: SystemFileBaseInfo
  isOrganizationOwner: Boolean!
  name: String!
  organizationCreatorRole: String
  organizationKind: String
  organizationSize: String
  role: String!
  type: SystemOrganizationTypeEnum
}

type SystemOrganizationBaseItem {
  description: String
  id: ID!
  image: SystemFileBaseInfo
  name: String!
  type: SystemOrganizationTypeEnum
}

type SystemOrganizationInvitation {
  accepted: Boolean
  email: String!
  emailFrom: String!
  firstName: String
  firstNameFrom: String
  id: ID!
  lastName: String
  lastNameFrom: String
  organization: SystemOrganizationBaseItem!
  role: String!
}

type SystemOrganizationItem {
  description: String
  id: ID!
  image: SystemOrganizationItemImage
  name: String!
  type: SystemOrganizationTypeEnum
  users: [SystemOrganizationUserInfo]
}

type SystemOrganizationItemImage {
  downloadUrl: String
  id: String
}

"""OrganizationPaymentDetailsUpdateMutationInput"""
input SystemOrganizationPaymentDetailsUpdateMutationInput {
  cardToken: String!
  organizationId: ID!
}

"""environmentId to add to with roles (array of ids)."""
input SystemOrganizationProjectEnvironmentRolesInput {
  environmentId: String!
  roles: [ID]
}

type SystemOrganizationProjectItem {
  description: String
  id: ID!
  image: SystemFileBaseInfo
  kind: String!
  name: String!
  organization: SystemOrganizationBaseItem
}

input SystemOrganizationProjectWithEnvironmentRolesInput {
  environmentRoles: [SystemOrganizationProjectEnvironmentRolesInput]
  projectId: ID!
}

"""Representation of a organization settings."""
type SystemOrganizationSettings {
  id: ID!

  """Flag to indicate if white label is active."""
  isWhiteLabelActive: Boolean

  """Statement of work defined by the organization."""
  statementOfWork: String

  """Stack of technologies defined by the organization."""
  techStack: [SystemOrganizationSettingsTech!]!

  """White label image defined by the organization."""
  whiteLabelImage: SystemFileBaseInfo
}

"""Representation of a organization settings technology."""
type SystemOrganizationSettingsTech {
  """Description of the tech stack."""
  description: String
  id: ID!

  """Name of the given tech stack, example "React"."""
  name: String!
}

enum SystemOrganizationTypeEnum {
  agency
  community
  company
  individual
}

"""Organization Upgrade Input"""
input SystemOrganizationUpgradeMutationInput {
  description: String
  licenseId: String
  name: String!
  organizationCreatorRole: String!
  organizationKind: String!
  organizationSize: String!
  owner: String!
  type: String!
}

type SystemOrganizationUserInfo {
  avatar: GraphQLFileItemResponse
  email: String!
  firstName: String
  id: String!
  lastName: String
  projects: [SystemOrganizationProjectItem]
  role: String!
  status: String!
}

type SystemOrganizationWorkspaceItem {
  apiHost: String
  description: String
  id: ID!
  image: SystemFileBaseInfo
  kind: String!
  name: String!
  organization: SystemOrganizationBaseItem
}

"""SystemOrganizationsListArchieResponse output"""
type SystemOrganizationsListArchieResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemOrganizationArchieBaseItem!]!
}

"""SystemOrganizationsListResponse output"""
type SystemOrganizationsListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemOrganizationBaseItem!]!
}

input SystemPartnerGeneralCreateMutationInput {
  anythingElse: String
  blueprintUrl: String!
  companyName: String!
  email: String!
  firstName: String!
  lastName: String!
  location: String!
  phoneNumber: String
}

type SystemPartnerGeneralResponse {
  AccountId: String!
  anythingElse: String
  blueprintUrl: String!
  companyName: String!
  createdAt: Date!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  location: String!
  phoneNumber: String
  updatedAt: Date!
}

type SystemPartnerItemRespSingle {
  AccountId: String!
  anythingElse: String
  blueprintUrl: String!
  companyName: String!
  createdAt: Date!
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
  location: String!
  phoneNumber: String
  updatedAt: Date!
}

"""SystemPartnerItemResponse output"""
type SystemPartnerItemResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemPartnerItemRespSingle!]!
}

type SystemPartnerResponse {
  partners: SystemPartnerItemResponse!
}

enum SystemPaymentDetailsOrigin {
  member
  organization
  workspace
}

enum SystemPaymentDetailsOriginProject {
  member
  organization
  workspace
}

type SystemPaymentDetailsProjectResponse {
  brand: String
  expMonth: Int
  expYear: Int
  last4: String
  origin: SystemPaymentDetailsOriginProject
}

type SystemPaymentDetailsResponse {
  brand: String
  expMonth: Int
  expYear: Int
  last4: String
  origin: SystemPaymentDetailsOrigin!
}

"""Diff Environment Input"""
type SystemPlanEnvironmentOutput {
  url: String
}

type SystemPlanForIdeaQueryResponse {
  id: ID
}

type SystemPlanInfoIdea {
  features: [String]
  planName: String
}

input SystemPostMessageToQueueInput {
  message: JSON
  routingKey: String
}

"""ProjectCreateMutationInput"""
input SystemProjectCreateMutationInput {
  authType: String
  billingPlanId: ID
  cardToken: String
  description: String
  howStart: String
  ideaId: String
  image: GraphQLCreateFileItemInput
  kind: String
  name: String!
  organizationId: ID
}

type SystemProjectDeploymentsResponse {
  deploymentsProject: SystemDeploymentProjectListResponse
}

type SystemProjectFrontendResponse {
  frontendUtilization: SystemFrontendUtilizationResponse
  frontendWorkspaces: SystemWorkspaceListResponse
}

type SystemProjectImage {
  downloadUrl: String
  id: String
}

type SystemProjectItemRespSingle {
  apiHost: String
  createdAt: DateTime
  description: String
  id: ID!
  image: SystemProjectImage
  kind: String
  lastAccess: DateTime
  name: String!
  nextPlan: SystemBillingNextPlanResponse
  organization: SystemOrganizationBaseItem
  owner: SystemMemberAccountInfo
  plan: SystemBillingCurrentPlanResponse
  region: String
  usersCount: Int
}

"""SystemProjectItemResponse output"""
type SystemProjectItemResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemProjectItemRespSingle!]!
}

type SystemProjectItemWS {
  description: String
  id: ID!
  image: SystemWorkspaceImage
  name: String!
  region: String
}

type SystemProjectPlanResponse {
  overagesPrice: Float
  paymentDetail: SystemPaymentDetailsProjectResponse
  plan: SystemBillingCurrentPlanResponse
}

type SystemProjectQuotasResponse {
  metricUsages: SystemBillingMetricUsagesListResponse
  metricUsagesQuotas: SystemBillingMetricUsageQuotasListResponse
}

"""ProjectUpdateMutationInput"""
input SystemProjectUpdateMutationInput {
  description: String
  id: ID!
  image: GraphQLCreateFileItemInput
  name: String
}

type SystemProjectUpdateResponse {
  description: String
  id: ID
  image: GraphQLFileItemResponse
  name: String
}

type SystemProjectUserDetailsResponse {
  apiHost: String!
  authenticationInfo: [SystemAuthenticationInfo]
  backendUtilization: SystemBackendUtilizationResponse
  backendWorkspaces: SystemWorkspaceListResponse
  createdAt: DateTime
  description: String
  environmentsProject: SystemEnvironmentsProjectListResponse
  id: ID!
  image: SystemProjectImage
  kind: String!
  lastAccess: DateTime
  metricUsages: SystemBillingMetricUsagesListResponse
  metricUsagesQuotas: SystemBillingMetricUsageQuotasListResponse
  name: String!
  nextPlan: SystemBillingNextPlanResponse
  organization: SystemOrganizationBaseItem
  overagesPrice: Float
  owner: SystemMemberAccountInfo
  paymentDetail: SystemPaymentDetailsProjectResponse
  plan: SystemBillingCurrentPlanResponse
  region: String
  teamMemberCount: Int
}

type SystemProjectUserResponse {
  myProjects: SystemProjectItemResponse!
  sharedProjects: SystemProjectItemResponse!
}

type SystemPromptItemRespSingle {
  basicSectionConfiguration: JSON
  dependsOn: [String]
  id: ID!
  inputVariables: JSON!
  iterableConfig: JSON
  modelId: ID!
  modelName: String!
  name: String!
  outputSchema: JSON!
  package: String!
  sectionCategory: String
  templateBody: String!
}

"""SystemPromptItemResponse output"""
type SystemPromptItemResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemPromptItemRespSingle!]!
}

type SystemPromptsResponse {
  prompts: SystemPromptItemResponse!
}

type SystemQuery {
  application(id: String!): SystemApplication
  applicationsList: SystemApplicationListResponse
  asyncSessionStatus(sessionId: String!): SystemAsyncSessionStatusResponse
  basicSectionConfigurationForPromptQuery: SystemBasicSectionConfigurationForPromptExecutionResponse
  basicSectionConfigurationQuery: SystemBasicSectionConfigurationResponse
  billingCurrentPlan(organizationId: ID): SystemBillingCurrentPlanResponse
  billingDetails: SystemBillingDetailsResponse @deprecated(reason: "No longer supported. Use `system.memberPaymentDetails, system.organizationPaymentDetails or system.workspacePaymentDetails` instead.")
  billingInvoicesList(after: ID, before: ID, by: SystemBillingInvoicesListFilterType, limit: Int, projectId: ID): SystemBillingInvoicesListResponse! @deprecated(reason: "No longer supported. Use `system.memberBillingHistory, system.organizationBillingHistory or system.workspaceBillingHistory` instead.")
  billingMetricUsageQuotasList(organizationId: ID, projectId: ID): SystemBillingMetricUsageQuotasListResponse!
  billingMetricUsagesList(filter: SystemBillingMetricUsagesListFilter, organizationId: ID, projectId: ID): SystemBillingMetricUsagesListResponse!
  ciGenerate(sourceEnvironmentId: String, tables: [String!], targetEnvironmentId: String): SystemGenerateEnvironmentOutput
  ciGenerateAsync(sourceEnvironmentId: String, tables: [String!], targetEnvironmentId: String): AsyncSession
  ciPlan(sourceEnvironmentId: String, tables: [String!], targetEnvironmentId: String): SystemPlanEnvironmentOutput @deprecated(reason: "No longer supported. Use `ciGenerate` instead.")
  ciStatus: SystemCiStatusOutput
  deployStatus(buildName: String!): SystemDeployStatusResult!
  ensureOrganizationSettings(organizationId: ID!): SystemOrganizationSettings!
  environmentBackupsList(environmentName: String): SystemEnvironmentBackupListResponse
  environmentMember(filter: SystemEnvironmentMemberFilter): SystemEnvironmentMember
  environmentMembersList(environmentIds: [String], filter: SystemEnvironmentMembersListFilter, first: Int, skip: Int, sort: [SystemEnvironmentMembersListSort!]): SystemEnvironmentMembersListResponse
  environmentSettings: SystemEnvironmentSettings
  environmentsList(workspaceId: String): SystemEnvironmentsListResponse
  fileUploadSignInfo: SystemFileUploadSignInfo
  functionsList(applicationId: String, filter: SystemFunctionInfoFilter, orderBy: [SystemFunctionInfoOrderBy]): SystemFunctionListResponse
  functionsVersionCheck: SystemFunctionInfoCheck
  getCouponQuery(couponName: String!): SystemGetCouponResponse
  getCurrentPlanForIdeaQuery: SystemPlanForIdeaQueryResponse
  getEnvironmentRoles(email: String, projectId: ID, workspaceId: String): [SystemEnvironmentRoleList]
  getInvitationIdeaQuery(id: ID!): SystemGetInvitationIdeaResponse
  ideaDetails(demoMode: Boolean, ideaId: ID!): SystemIdeaDetailsResponse
  ideaMembers(id: String!): SystemMembersIdeaList
  ideaSectionDetails(ideaId: ID!, packageIdea: ID!, sectionCategory: ID!): SystemIdeaDetailsResponse
  ideasDemoListQuery: SystemIdeaUserResponse
  ideasListQuery: SystemIdeaUserResponse
  ideasUserListQuery(organizationId: String): SystemIdeaUserResponse
  inboxEventsList(filter: InboxEventsListFilter, first: Int, skip: Int): SystemInboxEventsListResponse
  introspection: IntrospectionQueryResponse
  logs(applicationId: String, endTime: DateTime, functionName: String!, limit: Int, startTime: DateTime): [String] @deprecated(reason: "No longer supported. Use `system.logsList` instead.")
  logsList(applicationId: String, endTime: DateTime, functionName: String!, limit: Int, startTime: DateTime): [SystemCloudLogsEntry] @deprecated(reason: "No longer supported. Use `system.logsListFiltered` instead.")
  logsListFiltered(endTime: DateTime, filter: String, limit: Int, resource: String, startTime: DateTime, startToken: String): SystemLogsListFilteredResponse
  memberAccount: SystemMemberAccountInfo
  memberAccountFromEmail(email: String!): SystemMemberAccountInfo
  memberBillingHistory(first: Int, hideOrganizationInvoices: Boolean, skip: Int): SystemBillingInvoicesListResponse!
  memberFromOrganization(id: String!): SystemMemberOrganizationAccountInfo
  memberInvitation(id: String!): SystemMemberInvitation
  memberInvitationsList: SystemMemberInvitationsList
  memberPaymentDetails: SystemPaymentDetailsResponse
  membersByOrganization(organizationId: String!): SystemMembersAccountList
  organizationBillingHistory(first: Int, hideWorkspaceInvoices: Boolean, organizationId: ID!, skip: Int): SystemBillingInvoicesListResponse!
  organizationBillingPlan(organizationId: ID!): SystemBillingCurrentPlanResponse
  organizationById(organizationId: String!): SystemOrganizationItem
  organizationInvitationById(invitationId: String!): SystemOrganizationInvitation
  organizationPaymentDetails(organizationId: ID!): SystemPaymentDetailsResponse
  organizationsListByArchieUser: SystemOrganizationsListArchieResponse
  organizationsListByUser: SystemOrganizationsListResponse
  partnerListQuery: SystemPartnerResponse
  projectDeployments(projectId: ID!): SystemProjectDeploymentsResponse
  projectFrontend(projectId: ID!): SystemProjectFrontendResponse
  projectInfoDetails(projectId: ID!): SystemProjectUserDetailsResponse
  projectPlan(projectId: ID!): SystemProjectPlanResponse
  projectQuotas(projectId: ID!): SystemProjectQuotasResponse
  projectsUserListQuery(organizationId: ID): SystemProjectUserResponse
  promptListQuery: SystemPromptsResponse
  table(id: ID, name: String): SystemTable
  tableField(id: ID!): SystemTableField
  tablesList(filter: SystemTableListFilter): SystemTableListResponse!
  userBillingConfiguration(filterPlanProjects: Boolean, kind: String, organizationId: ID, region: String): SystemUserBillingConfigurationResponse!
  userBillingConfigurationArchie(ideaId: ID, kind: String, organizationId: ID, region: String): SystemUserBillingConfigurationResponse!
  userInvitationsList: SystemUserInvitationList
  viewDryRun(sql: String!): SystemViewDryRunOutput
  workspaceName: String
  workspacePaymentDetails(projectId: ID): SystemPaymentDetailsResponse
  workspacesFrontendList: SystemWorkspaceListResponse
  workspacesList: SystemWorkspaceListResponse
}

"""Relation"""
type SystemRelation {
  refField: SystemTableField
  refFieldDisplayName: String
  refFieldIsList: Boolean
  refFieldIsRequired: Boolean
  refFieldName: String
  refTable: SystemTable!
  relationFieldName: String
  relationTableName: String
}

"""Relation Create Input"""
input SystemRelationCreateInput {
  refFieldDisplayName: String
  refFieldIsList: Boolean!
  refFieldIsRequired: Boolean!
  refFieldName: String
  refTableId: ID!
}

"""Relation Update Input"""
input SystemRelationUpdateInput {
  refFieldDisplayName: String
  refFieldIsList: Boolean
  refFieldIsRequired: Boolean
  refFieldName: String
  refTableId: ID
}

"""Schema Origin"""
type SystemSchemaOrigin {
  provider: String
  type: SystemSchemaOriginType!
}

"""Schema Origin Type Enum"""
enum SystemSchemaOriginType {
  LOCAL
  REMOTE
  VIEW
}

input SystemSectionResultCreateMutationInput {
  archieId: ID!
  composedPrompt: JSON!
  content: JSON!
  cost: Float
  custom: Boolean
  executionTime: Int
  failureReason: JSON
  id: ID
  isRegenerate: Boolean
  lLMApiCalls: Int
  modelId: ID!
  package: String!
  prompt: ID!
  provisionalData: Boolean
  sectionCategory: String!
  status: SystemStatusIdea
  tokensInput: Int
  tokensOutput: Int
}

input SystemSectionResultGenerateMutationInput {
  archieId: ID!
  contextData: JSON
  idea: ID!
  iterableID: String
  package: String!
  provisionalData: Boolean
  sectionCategories: [String]
}

input SystemSectionResultPropagateUpdateMutationInput {
  archieId: ID!
  content: JSON!
  package: String!
  sectionCategory: String!
}

type SystemSectionResultResponse {
  sectionId: ID!
  sectionResultId: ID!
}

input SystemSectionResultUpdateMutationInput {
  archieId: ID!
  overviewId: String
  package: String!
  sectionCategories: [JSON]
}

"""Smart Field Attributes"""
type SystemSmartFieldTypeAttributes {
  format: String!
  innerFields: [SystemCustomTableField]
}

"""Smart Type Format Enum"""
enum SystemSmartTypeFormatEnum {
  ADDRESS
  PHONE
}

"""StatusIdea"""
enum SystemStatusIdea {
  Completed
  Locked
  NeedsAttention
  Open
}

"""Switch Field Attributes"""
type SystemSwitchFieldTypeAttributes {
  format: String!
  listOptions: [String]
}

"""Switch Type Format Enum"""
enum SystemSwitchTypeFormatEnum {
  ACTIVE_INACTIVE
  CUSTOM
  HIGH_LOW
  ON_OFF
  TRUE_FALSE
  YES_NO
}

"""Table"""
type SystemTable {
  application: SystemApplication
  attributes: SystemTableAttributes
  dataFeatures: SystemTableDataFeatures!
  description: String
  displayName: String
  fields: [SystemTableField!]
  fieldsForIndexing: [SystemTableField]
  id: ID!
  indexes: [SystemTableIndex!]
  isSystem: Boolean!
  name: String!
  origin: SystemSchemaOrigin!
  schemaFeatures: SystemTableSchemaFeatures!
}

"""Table Attributes"""
union SystemTableAttributes = SystemViewAttributes

"""Table Create Input"""
input SystemTableCreateInput {
  applicationId: String
  description: String
  displayName: String
  name: String!
}

"""Table Data Features"""
type SystemTableDataFeatures {
  create: Boolean!
  delete: Boolean!
  update: Boolean!
}

"""Table Delete Input"""
input SystemTableDeleteInput {
  id: ID!
}

"""TableField"""
type SystemTableField {
  computedMode: SystemComputedFieldMode
  dataFeatures: SystemFieldDataFeatures!
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: SystemFieldType!
  fieldTypeAttributes: SystemFieldTypeAttributes
  id: ID!
  isList: Boolean!
  isMeta: Boolean!
  isRequired: Boolean!
  isSystem: Boolean!
  isUnique: Boolean
  name: String!
  origin: SystemSchemaOrigin!
  relation: SystemRelation
  schemaFeatures: SystemFieldSchemaFeatures!
  table: SystemTable!
}

"""Table Field Create Input"""
input SystemTableFieldCreateInput {
  computedMode: SystemComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: SystemFieldType!
  fieldTypeAttributes: SystemFieldTypeAttributesInput
  force: Boolean
  initialValue: String
  isList: Boolean!
  isRequired: Boolean!
  isUnique: Boolean
  name: String!
  position: Int
  relation: SystemRelationCreateInput
  tableId: ID!
}

"""Table Field Delete Input"""
input SystemTableFieldDeleteInput {
  id: ID!
}

"""Table Field Position Update Input"""
input SystemTableFieldPositionUpdateInput {
  id: ID!
  newPosition: Int!
}

"""Table Field Update Input"""
input SystemTableFieldUpdateInput {
  computedMode: SystemComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: SystemFieldType
  fieldTypeAttributes: SystemFieldTypeAttributesInput
  force: Boolean
  id: ID!
  initialValue: String
  isList: Boolean
  isRequired: Boolean
  isUnique: Boolean
  name: String
  position: Int
  relation: SystemRelationUpdateInput
}

"""Table Index"""
type SystemTableIndex {
  columns: [SystemTableIndexColumn!]
  id: ID!
  isSystem: Boolean!
  name: String
  table: SystemTable!
  type: String!
}

"""Table Index Column"""
type SystemTableIndexColumn {
  name: String!
}

"""Table Index Column Input"""
input SystemTableIndexColumnInput {
  name: String!
}

"""Table List Application Filter"""
input SystemTableListApplicationFilter {
  id: String
  name: String
}

"""Table List Filter"""
input SystemTableListFilter {
  applications: [SystemTableListApplicationFilter]
  onlyUserTables: Boolean
  tableNames: [String]
}

"""Table List Response"""
type SystemTableListResponse {
  count: Int
  items: [SystemTable]
}

"""Table Schema Create Features"""
type SystemTableSchemaCreateFeatures {
  DATE: Boolean!
  FILE: Boolean!
  GEO: Boolean!
  ID: Boolean!
  JSON: Boolean!
  MISSING_RELATION: Boolean!
  NUMBER: Boolean!
  ONE_WAY_RELATION: Boolean!
  RELATION: Boolean!
  SMART: Boolean!
  SWITCH: Boolean!
  TEXT: Boolean!
  UUID: Boolean!
}

"""Table Schema Features"""
type SystemTableSchemaFeatures {
  computedFields: Boolean!
  create: SystemTableSchemaCreateFeatures!
  update: SystemTableSchemaMetaFieldFeatures
}

"""Table Schema Meta Field Features"""
type SystemTableSchemaMetaFieldFeatures {
  displayName: Boolean!
  name: Boolean!
}

"""Table Update Input"""
input SystemTableUpdateInput {
  description: String
  displayName: String
  id: ID!
  name: String
}

"""Team Invitation Details"""
type SystemTeamInvitationDetails {
  accepted: Boolean
  acceptedOn: DateTime
  apiHost: String
  email: String
  firstName: String
  id: String
  invitedBy: SystemInvitedByName
  isRegistered: Boolean
  lastName: String
  resentOn: DateTime
}

"""Text Field Attributes"""
type SystemTextFieldTypeAttributes {
  fieldSize: Int
  format: String!
}

"""Text Type Format Enum"""
enum SystemTextTypeFormatEnum {
  EIN
  EMAIL
  HTML
  MARKDOWN
  NAME
  UNFORMATTED
}

input SystemTransferIdeaOwnerMutationInput {
  email: String!
  ideaId: ID!
}

"""UUID Field Attributes"""
type SystemUUIDFieldTypeAttributes {
  fieldSize: Int
}

type SystemUserBillingConfigurationResponse {
  availablePlans: [SystemBillingPlanBaseInfo!]!
  isCancelSubscriptionAvailable: Boolean! @deprecated(reason: "Flag is deprecated")
  isFreePlanAvailable: Boolean! @deprecated(reason: "Flag is deprecated")
}

"""User Invitation Details"""
type SystemUserInvitationDetails {
  accepted: Boolean
  acceptedOn: DateTime
  apiHost: String
  email: String
  firstName: String
  id: String
  invitedBy: SystemInvitedByName
  isRegistered: Boolean
  lastName: String
  resentOn: DateTime
}

"""User Invitation List"""
type SystemUserInvitationList {
  count: Int
  items: [SystemUserInvitationDetails]
}

"""User Type"""
enum SystemUserType {
  Agency
  Corporation
  MyOwn
  Team
}

"""View Attributes"""
type SystemViewAttributes {
  query: String
}

"""View Create Input"""
input SystemViewCreateInput {
  description: String
  displayName: String
  name: String!
  query: String!
}

"""Dry Run Response for previewing SQL Views"""
type SystemViewDryRunOutput {
  count: Int
  items: JSON
  timeMs: Int
}

"""View Update Input"""
input SystemViewUpdateInput {
  description: String
  displayName: String
  id: ID!
  name: String
  query: String
}

"""WorkspaceCreateMutationInput"""
input SystemWorkspaceCreateMutationInput {
  authType: String
  description: String
  howStart: String
  image: GraphQLCreateFileItemInput
  kind: SystemWorkspaceKind
  name: String!
  organizationId: ID
  profileId: String
  projectId: ID
}

type SystemWorkspaceCreateResponse {
  description: String
  id: ID
  kind: String
  name: String
}

"""WorkspaceDeleteMutationInput"""
input SystemWorkspaceDeleteMutationInput {
  workspaceId: ID!
}

type SystemWorkspaceImage {
  downloadUrl: String
  id: String
}

type SystemWorkspaceItem {
  apiHost: String
  createdAt: DateTime
  description: String
  id: ID!
  image: SystemWorkspaceImage
  is8BaseAuthEnabled: Boolean
  isCiCdEnabled: Boolean
  isOwner: Boolean!
  kind: String
  lastAccess: DateTime
  lastDeployABInfo: SystemDeploymentABItemResponse
  name: String!
  nextPlan: SystemBillingNextPlanResponse
  organization: SystemOrganizationBaseItem
  owner: SystemMemberAccountInfo
  plan: SystemBillingCurrentPlanResponse
  project: SystemProjectItemWS
  region: String
  summaryABInfo: SystemFrontendUtilizationABResponse
  teamMemberCount: Int
  webSocket: String
}

"""Workspace Kind"""
enum SystemWorkspaceKind {
  frontend
  general
}

"""SystemWorkspaceListResponse output"""
type SystemWorkspaceListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [SystemWorkspaceItem!]!
}

enum SystemWorkspaceStatus {
  active
  blocked
  canceled
  canceling
  pending
  suspended
}

"""WorkspaceUpdateMutationInput"""
input SystemWorkspaceUpdateMutationInput {
  description: String
  id: ID!
  image: GraphQLCreateFileItemInput
  name: String
}

type SystemWorkspaceUpdateResponse {
  description: String
  id: ID
  image: GraphQLFileItemResponse
  name: String
}

"""Table"""
type Table {
  application: Application
  attributes: TableAttributes
  dataFeatures: TableDataFeatures!
  description: String
  displayName: String
  fields: [TableField!]
  fieldsForIndexing: [TableField]
  id: ID!
  indexes: [TableIndex!]
  isSystem: Boolean!
  name: String!
  origin: SchemaOrigin!
  schemaFeatures: TableSchemaFeatures!
}

"""Table Attributes"""
union TableAttributes = ViewAttributes

"""Table Create Input"""
input TableCreateInput {
  applicationId: String
  description: String
  displayName: String
  name: String!
}

"""Table Data Features"""
type TableDataFeatures {
  create: Boolean!
  delete: Boolean!
  update: Boolean!
}

"""Table Delete Input"""
input TableDeleteInput {
  id: ID!
}

"""TableField"""
type TableField {
  computedMode: ComputedFieldMode
  dataFeatures: FieldDataFeatures!
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: FieldType!
  fieldTypeAttributes: FieldTypeAttributes
  id: ID!
  isList: Boolean!
  isMeta: Boolean!
  isRequired: Boolean!
  isSystem: Boolean!
  isUnique: Boolean
  name: String!
  origin: SchemaOrigin!
  relation: Relation
  schemaFeatures: FieldSchemaFeatures!
  table: Table!
}

"""Table Field Create Input"""
input TableFieldCreateInput {
  computedMode: ComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: FieldType!
  fieldTypeAttributes: FieldTypeAttributesInput
  force: Boolean
  initialValue: String
  isList: Boolean!
  isRequired: Boolean!
  isUnique: Boolean
  name: String!
  position: Int
  relation: RelationCreateInput
  tableId: ID!
}

"""Table Field Delete Input"""
input TableFieldDeleteInput {
  id: ID!
}

"""Table Field Position Update Input"""
input TableFieldPositionUpdateInput {
  id: ID!
  newPosition: Int!
}

"""Table Field Update Input"""
input TableFieldUpdateInput {
  computedMode: ComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: FieldType
  fieldTypeAttributes: FieldTypeAttributesInput
  force: Boolean
  id: ID!
  initialValue: String
  isList: Boolean
  isRequired: Boolean
  isUnique: Boolean
  name: String
  position: Int
  relation: RelationUpdateInput
}

"""Table Index"""
type TableIndex {
  columns: [TableIndexColumn!]
  id: ID!
  isSystem: Boolean!
  name: String
  table: Table!
  type: String!
}

"""Table Index Column"""
type TableIndexColumn {
  name: String!
}

"""Table Index Column Input"""
input TableIndexColumnInput {
  name: String!
}

enum TableIndexType {
  INDEX
  UNIQUE
}

"""Table List Application Filter"""
input TableListApplicationFilter {
  id: String
  name: String
}

"""Table List Filter"""
input TableListFilter {
  applications: [TableListApplicationFilter]
  onlyUserTables: Boolean
  tableNames: [String]
}

"""Table List Response"""
type TableListResponse {
  count: Int
  items: [Table]
}

"""Table Schema Create Features"""
type TableSchemaCreateFeatures {
  DATE: Boolean!
  FILE: Boolean!
  GEO: Boolean!
  ID: Boolean!
  JSON: Boolean!
  MISSING_RELATION: Boolean!
  NUMBER: Boolean!
  ONE_WAY_RELATION: Boolean!
  RELATION: Boolean!
  SMART: Boolean!
  SWITCH: Boolean!
  TEXT: Boolean!
  UUID: Boolean!
}

"""Table Schema Features"""
type TableSchemaFeatures {
  computedFields: Boolean!
  create: TableSchemaCreateFeatures!
  update: TableSchemaMetaFieldFeatures
}

"""Table Schema Meta Field Features"""
type TableSchemaMetaFieldFeatures {
  displayName: Boolean!
  name: Boolean!
}

"""Table Update Input"""
input TableUpdateInput {
  description: String
  displayName: String
  id: ID!
  name: String
}

"""Text Field Attributes"""
type TextFieldTypeAttributes {
  fieldSize: Int
  format: String!
}

"""Text Type Format Enum"""
enum TextTypeFormatEnum {
  EIN
  EMAIL
  HTML
  MARKDOWN
  NAME
  UNFORMATTED
}

"""
A time string at UTC, such as `16:15:30Z`, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Time

input TrimFunctionArguments {
  mode: StringTrimMode
  str: String!
}

"""UUID Field Attributes"""
type UUIDFieldTypeAttributes {
  fieldSize: Int
}

input UpdateByFilterBooleanSwitchInput {
  invert: Boolean
  set: Boolean
}

input UpdateByFilterIntInput {
  add: Int
  div: Int
  mod: Int
  mult: Int
  pow: Int
  prec: Int
  set: Int
  sqrt: Boolean
  sub: Int
}

input UpdateByFilterJsonInput {
  set: JSON
}

input UpdateByFilterListStringInput {
  insert: UpdateByFilterListStringInsertOperationInput
  push: [String]
  remove: [Int]
  removeValue: String
  set: [String]
  swap: [Int]
  unshift: [String]
}

input UpdateByFilterListStringInsertOperationInput {
  start: Int!
  values: [String!]!
}

input UpdateByFilterStringInput {
  postfix: String
  prefix: String
  set: String
}

input UpdateByFilterStringSwitchInput {
  set: String
}

"""UpdatedFieldsFilter"""
input UpdatedFieldsFilter {
  contains: [String]
  every: [String]
}

type UploadcareSignInfoResponse {
  expire: String!
  publicKey: String!
  signature: String!
}

type User {
  Notifications(after: String, before: String, filter: NotificationFilter, first: Int, groupBy: NotificationGroupBy, last: Int, orderBy: [NotificationOrderBy], skip: Int, sort: [NotificationSort!]): NotificationListResponse
  Reports(after: String, before: String, filter: ReportFilter, first: Int, groupBy: ReportGroupBy, last: Int, orderBy: [ReportOrderBy], skip: Int, sort: [ReportSort!]): ReportListResponse
  SearchCriteria(after: String, before: String, filter: SearchCriterionFilter, first: Int, groupBy: SearchCriterionGroupBy, last: Int, orderBy: [SearchCriterionOrderBy], skip: Int, sort: [SearchCriterionSort!]): SearchCriterionListResponse
  SubscriptionsApps(after: String, before: String, filter: SubscriptionsAppFilter, first: Int, groupBy: SubscriptionsAppGroupBy, last: Int, orderBy: [SubscriptionsAppOrderBy], skip: Int, sort: [SubscriptionsAppSort!]): SubscriptionsAppListResponse
  WorkOrders(after: String, before: String, filter: WorkOrderFilter, first: Int, groupBy: WorkOrderGroupBy, last: Int, orderBy: [WorkOrderOrderBy], skip: Int, sort: [WorkOrderSort!]): WorkOrderListResponse
  _description: String
  avatar: File
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  email: String
  firstName: String
  id: ID
  is8base: Boolean
  lastName: String
  origin: String
  permissions(filter: PermissionInputFilter): UserPermissionList
  roles(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse
  status: String
  timezone: String
  updatedAt: DateTime
}

type UserBillingConfigurationResponse {
  availablePlans: [BillingPlanBaseInfo!]!
  isCancelSubscriptionAvailable: Boolean! @deprecated(reason: "Flag is deprecated")
  isFreePlanAvailable: Boolean! @deprecated(reason: "Flag is deprecated")
}

"""Users create input"""
input UserCreateInput {
  Notifications: UsersNotificationsRelationInput
  Reports: UsersReportsRelationInput
  SearchCriteria: UsersSearchCriteriaRelationInput
  SubscriptionsApps: UsersSubscriptionsAppsRelationInput
  WorkOrders: UsersWorkOrdersRelationInput
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users create many input"""
input UserCreateManyInput {
  avatar: UsersAvatarManyRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesManyRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users delete input"""
input UserDeleteInput {
  force: Boolean
  id: ID
}

"""UserFieldsPermissions create input"""
input UserFieldsPermissions {
  createdAt: Boolean
  email: Boolean
  firstName: Boolean
  is8base: Boolean
  lastName: Boolean
  origin: Boolean
  status: Boolean
  timezone: Boolean
  updatedAt: Boolean
}

input UserFilter {
  AND: [UserFilter!]
  Notifications: NotificationRelationFilter
  OR: [UserFilter!]
  Reports: ReportRelationFilter
  SearchCriteria: SearchCriterionRelationFilter
  SubscriptionsApps: SubscriptionsAppRelationFilter
  WorkOrders: WorkOrderRelationFilter
  _fullText: String
  avatar: FileFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  email: StringPredicate
  firstName: StringPredicate
  id: IDPredicate
  is8base: BoolPredicate
  is_self: Boolean
  lastName: StringPredicate
  not_self: Boolean
  origin: StringPredicate
  roles: RoleRelationFilter
  status: StringPredicate
  timezone: StringPredicate
  updatedAt: DateTimePredicate
}

input UserGroupBy {
  first: Int
  having: Having
  last: Int
  query: UserGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input UserGroupByQuery {
  Notifications: NotificationGroupByQuery
  Reports: ReportGroupByQuery
  SearchCriteria: SearchCriterionGroupByQuery
  SubscriptionsApps: SubscriptionsAppGroupByQuery
  WorkOrders: WorkOrderGroupByQuery
  _group: [GroupIdentifiersGroupByField!]
  avatar: FileGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  email: [GroupByField!]
  firstName: [GroupByField!]
  id: [GroupByField!]
  is8base: [GroupByField!]
  lastName: [GroupByField!]
  origin: [GroupByField!]
  roles: RoleGroupByQuery
  status: [GroupByField!]
  timezone: [GroupByField!]
  updatedAt: [GroupByField!]
}

"""User Invitation Details"""
type UserInvitationDetails {
  accepted: Boolean
  acceptedOn: DateTime
  apiHost: String
  email: String
  firstName: String
  id: String
  invitedBy: InvitedByName
  isRegistered: Boolean
  lastName: String
  resentOn: DateTime
}

"""User Invitation List"""
type UserInvitationList {
  count: Int
  items: [UserInvitationDetails]
}

input UserKeyFilter {
  email: String
  id: ID
}

"""UserListResponse output"""
type UserListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [User!]!
}

"""UserLoginInput"""
input UserLoginInput {
  authProfileId: ID
  email: String!
  fromInvitation: String
  password: String!
}

"""UserManyResponse output"""
type UserManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [User!]!
}

"""No longer supported. Use `sort` instead."""
enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  is8base_ASC
  is8base_DESC
  isOwner_ASC
  isOwner_DESC
  lastName_ASC
  lastName_DESC
  origin_ASC
  origin_DESC
  status_ASC
  status_DESC
  timezone_ASC
  timezone_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""Users subscription payload"""
type UserPayload {
  mutation: MutationType!
  node: User
  previousValues: User
  updatedFields: [String]
}

"""User Permission"""
type UserPermission {
  permission: JSON
  resource: String
  resourceType: String
}

"""User Permission List"""
type UserPermissionList {
  count: Int!
  items: [UserPermission!]
}

input UserRelationFilter {
  every: UserFilter
  none: UserFilter
  some: UserFilter
}

input UserSort {
  avatar: FileSort
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  is8base: SortOrder
  lastName: SortOrder
  origin: SortOrder
  status: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
}

"""Users subscription filter"""
input UserSubscriptionFilter {
  mutation_in: [MutationType]
  node: UserFilter
  updatedFields: UpdatedFieldsFilter
}

"""Users update input"""
input UserUpdateByFilterInput {
  email: [UpdateByFilterStringInput]
  firstName: [UpdateByFilterStringInput]
  is8base: [UpdateByFilterBooleanSwitchInput]
  isOwner: [UpdateByFilterBooleanSwitchInput]
  lastName: [UpdateByFilterStringInput]
  origin: [UpdateByFilterStringSwitchInput]
  status: [UpdateByFilterStringSwitchInput]
  timezone: [UpdateByFilterStringInput]
}

"""Users update input"""
input UserUpdateInput {
  Notifications: UsersNotificationsUpdateRelationInput
  Reports: UsersReportsUpdateRelationInput
  SearchCriteria: UsersSearchCriteriaUpdateRelationInput
  SubscriptionsApps: UsersSubscriptionsAppsUpdateRelationInput
  WorkOrders: UsersWorkOrdersUpdateRelationInput
  avatar: UsersAvatarUpdateRelationInput
  email: String
  firstName: String
  id: ID
  lastName: String
  roles: UsersRolesUpdateRelationInput
  status: String
  timezone: String
}

input User_PermissionFilter {
  AND: [User_PermissionFilter!]
  Notifications: Notification_PermissionRelationFilter
  OR: [User_PermissionFilter!]
  Reports: Report_PermissionRelationFilter
  SearchCriteria: SearchCriterion_PermissionRelationFilter
  SubscriptionsApps: SubscriptionsApp_PermissionRelationFilter
  WorkOrders: WorkOrder_PermissionRelationFilter
  _fullText: String
  avatar: File_PermissionFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  email: StringPredicate
  firstName: StringPredicate
  id: IDPredicate
  is8base: BoolPredicate
  is_self: Boolean
  lastName: StringPredicate
  not_self: Boolean
  origin: StringPredicate
  roles: Role_PermissionRelationFilter
  status: StringPredicate
  timezone: StringPredicate
  updatedAt: DateTimePredicate
}

input User_PermissionRelationFilter {
  every: User_PermissionFilter
  none: User_PermissionFilter
  some: User_PermissionFilter
}

"""Notifications create input from user_id"""
input User_id_NotificationCreateInput {
  """Indicates if the notification has been read."""
  is_read: Boolean

  """The notification message content."""
  message: String

  """Type of the notification (e.g., compliance, maintenance, update)."""
  type: String
  user_id: NotificationsUser_idRelationInput
}

"""Notifications update input from user_id"""
input User_id_NotificationUpdateInput {
  data: NotificationUpdateInput!
  filter: NotificationKeyFilter
}

"""Reports create input from user_id"""
input User_id_ReportCreateInput {
  """Content of the report in JSON format."""
  content: JSON

  """Date when the report was generated."""
  generated_date: DateTime

  """Title of the report."""
  title: String
  user_id: ReportsUser_idRelationInput
}

"""Reports update input from user_id"""
input User_id_ReportUpdateInput {
  data: ReportUpdateInput!
  filter: ReportKeyFilter
}

"""SearchCriteria create input from user_id"""
input User_id_SearchCriterionCreateInput {
  """Search criteria details in JSON format."""
  criteria: JSON

  """Name of the saved search criteria."""
  name: String
  user_id: SearchCriteriaUser_idRelationInput
}

"""SearchCriteria update input from user_id"""
input User_id_SearchCriterionUpdateInput {
  data: SearchCriterionUpdateInput!
  filter: SearchCriterionKeyFilter
}

"""SubscriptionsApps create input from user_id"""
input User_id_SubscriptionsAppCreateInput {
  """Description of the subscription tier."""
  description: String

  """Price of the subscription tier."""
  price: Int

  """Name of the subscription tier."""
  tier_name: String
  user_id: SubscriptionsAppsUser_idRelationInput
}

"""SubscriptionsApps update input from user_id"""
input User_id_SubscriptionsAppUpdateInput {
  data: SubscriptionsAppUpdateInput!
  filter: SubscriptionsAppKeyFilter
}

"""Users relation input"""
input UsersAvatarManyRelationInput {
  connect: FileKeyFilter
}

"""Users relation input"""
input UsersAvatarRelationInput {
  connect: FileKeyFilter
  create: Users_avatar_FileCreateInput
}

"""Users relation input"""
input UsersAvatarUpdateRelationInput {
  connect: FileKeyFilter
  create: Users_avatar_FileCreateInput
  disconnect: FileKeyFilter
  reconnect: FileKeyFilter
  update: Users_avatar_FileUpdateInput
}

"""Users relation input"""
input UsersNotificationsRelationInput {
  create: [User_id_NotificationCreateInput]
}

"""Users relation input"""
input UsersNotificationsUpdateRelationInput {
  update: [User_id_NotificationUpdateInput]
}

"""Users relation input"""
input UsersReportsRelationInput {
  create: [User_id_ReportCreateInput]
}

"""Users relation input"""
input UsersReportsUpdateRelationInput {
  update: [User_id_ReportUpdateInput]
}

"""Users relation input"""
input UsersRolesManyRelationInput {
  connect: [RoleKeyFilter!]
}

"""Users relation input"""
input UsersRolesRelationInput {
  connect: [RoleKeyFilter!]
  create: [Users_RoleCreateInput]
}

"""Users relation input"""
input UsersRolesUpdateRelationInput {
  connect: [RoleKeyFilter!]
  create: [Users_RoleCreateInput]
  disconnect: [RoleKeyFilter!]
  reconnect: [RoleKeyFilter!]
  update: [Users_RoleUpdateInput]
}

"""Users relation input"""
input UsersSearchCriteriaRelationInput {
  create: [User_id_SearchCriterionCreateInput]
}

"""Users relation input"""
input UsersSearchCriteriaUpdateRelationInput {
  update: [User_id_SearchCriterionUpdateInput]
}

"""Users relation input"""
input UsersSubscriptionsAppsRelationInput {
  create: [User_id_SubscriptionsAppCreateInput]
}

"""Users relation input"""
input UsersSubscriptionsAppsUpdateRelationInput {
  update: [User_id_SubscriptionsAppUpdateInput]
}

"""Users relation input"""
input UsersWorkOrdersRelationInput {
  create: [Vendor_id_WorkOrderCreateInput]
}

"""Users relation input"""
input UsersWorkOrdersUpdateRelationInput {
  update: [Vendor_id_WorkOrderUpdateInput]
}

"""Roles create input from users"""
input Users_RoleCreateInput {
  apiTokens: RolesApiTokensRelationInput
  authenticationProfiles: RolesAuthenticationProfilesRelationInput
  description: String
  name: String!
  permissions: PermissionsInput
  users: RolesUsersRelationInput
}

"""Roles update input from users"""
input Users_RoleUpdateInput {
  data: RoleUpdateInput!
  filter: RoleKeyFilter
}

"""Files create input from users_avatar"""
input Users_avatar_FileCreateInput {
  fileId: String
  filename: String
  meta: JSON
  mods: JSON
  public: Boolean = false
  users_avatar: FilesUsers_avatarRelationInput
}

"""Files update input from users_avatar"""
input Users_avatar_FileUpdateInput {
  fileId: String
  filename: String
  meta: JSON
  mods: JSON
  public: Boolean
  users_avatar: FilesUsers_avatarUpdateRelationInput
}

"""WorkOrders create input from vendor_id"""
input Vendor_id_WorkOrderCreateInput {
  """Date when the task was assigned."""
  assigned_date: DateTime
  building_id: WorkOrdersBuilding_idRelationInput

  """Date when the task was completed."""
  completion_date: DateTime!

  """Current status of the work order (e.g., pending, completed)."""
  status: String

  """Description of the maintenance task."""
  task_description: String
  vendor_id: WorkOrdersVendor_idRelationInput
}

"""WorkOrders update input from vendor_id"""
input Vendor_id_WorkOrderUpdateInput {
  data: WorkOrderUpdateInput!
  filter: WorkOrderKeyFilter
}

"""VerificationEmailResendInput"""
input VerificationEmailResendInput {
  email: String!
}

"""View Attributes"""
type ViewAttributes {
  query: String
}

"""View Create Input"""
input ViewCreateInput {
  description: String
  displayName: String
  name: String!
  query: String!
}

"""Dry Run Response for previewing SQL Views"""
type ViewDryRunOutput {
  count: Int
  items: JSON
  timeMs: Int
}

"""View Update Input"""
input ViewUpdateInput {
  description: String
  displayName: String
  id: ID!
  name: String
  query: String
}

"""Tracks maintenance tasks assigned to Maintenance Vendors."""
type WorkOrder {
  _description: String

  """Date when the task was assigned."""
  assigned_date: DateTime

  """Reference to the building where the task is to be performed."""
  building_id: Building

  """Date when the task was completed."""
  completion_date: DateTime
  createdAt: DateTime
  deletedAt: Int
  id: ID

  """Current status of the work order (e.g., pending, completed)."""
  status: String

  """Description of the maintenance task."""
  task_description: String
  updatedAt: DateTime

  """Reference to the maintenance vendor assigned to the task."""
  vendor_id: User
}

"""WorkOrders create input"""
input WorkOrderCreateInput {
  """Date when the task was assigned."""
  assigned_date: DateTime
  building_id: WorkOrdersBuilding_idRelationInput

  """Date when the task was completed."""
  completion_date: DateTime!

  """Current status of the work order (e.g., pending, completed)."""
  status: String

  """Description of the maintenance task."""
  task_description: String
  vendor_id: WorkOrdersVendor_idRelationInput
}

"""WorkOrders create many input"""
input WorkOrderCreateManyInput {
  """Date when the task was assigned."""
  assigned_date: DateTime

  """Date when the task was completed."""
  completion_date: DateTime!

  """Current status of the work order (e.g., pending, completed)."""
  status: String

  """Description of the maintenance task."""
  task_description: String
}

"""WorkOrders delete input"""
input WorkOrderDeleteInput {
  force: Boolean
  id: ID
}

"""WorkOrderFieldsPermissions create input"""
input WorkOrderFieldsPermissions {
  assigned_date: Boolean
  completion_date: Boolean
  createdAt: Boolean
  status: Boolean
  task_description: Boolean
  updatedAt: Boolean
}

input WorkOrderFilter {
  AND: [WorkOrderFilter!]
  OR: [WorkOrderFilter!]
  _fullText: String
  assigned_date: DateTimePredicate
  building_id: BuildingFilter
  completion_date: DateTimePredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  status: StringPredicate
  task_description: StringPredicate
  updatedAt: DateTimePredicate
  vendor_id: UserFilter
}

input WorkOrderGroupBy {
  first: Int
  having: Having
  last: Int
  query: WorkOrderGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input WorkOrderGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  assigned_date: [GroupByField!]
  building_id: BuildingGroupByQuery
  completion_date: [GroupByField!]
  createdAt: [GroupByField!]
  id: [GroupByField!]
  status: [GroupByField!]
  task_description: [GroupByField!]
  updatedAt: [GroupByField!]
  vendor_id: UserGroupByQuery
}

input WorkOrderKeyFilter {
  id: ID
}

"""WorkOrderListResponse output"""
type WorkOrderListResponse {
  """List items count"""
  count: Int!

  """Aggregated items"""
  groups: [GroupByResponse!]!

  """List items"""
  items: [WorkOrder!]!
}

"""WorkOrderManyResponse output"""
type WorkOrderManyResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [WorkOrder!]!
}

"""No longer supported. Use `sort` instead."""
enum WorkOrderOrderBy {
  assigned_date_ASC
  assigned_date_DESC
  completion_date_ASC
  completion_date_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  task_description_ASC
  task_description_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"""WorkOrders subscription payload"""
type WorkOrderPayload {
  mutation: MutationType!
  node: WorkOrder
  previousValues: WorkOrder
  updatedFields: [String]
}

input WorkOrderRelationFilter {
  every: WorkOrderFilter
  none: WorkOrderFilter
  some: WorkOrderFilter
}

input WorkOrderSort {
  assigned_date: SortOrder
  building_id: BuildingSort
  completion_date: SortOrder
  createdAt: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  status: SortOrder
  task_description: SortOrder
  updatedAt: SortOrder
  vendor_id: UserSort
}

"""WorkOrders subscription filter"""
input WorkOrderSubscriptionFilter {
  mutation_in: [MutationType]
  node: WorkOrderFilter
  updatedFields: UpdatedFieldsFilter
}

"""WorkOrders update input"""
input WorkOrderUpdateByFilterInput {
  status: [UpdateByFilterStringInput]
  task_description: [UpdateByFilterStringInput]
}

"""WorkOrders update input"""
input WorkOrderUpdateInput {
  """Date when the task was assigned."""
  assigned_date: DateTime
  building_id: WorkOrdersBuilding_idUpdateRelationInput

  """Date when the task was completed."""
  completion_date: DateTime
  id: ID

  """Current status of the work order (e.g., pending, completed)."""
  status: String

  """Description of the maintenance task."""
  task_description: String
  vendor_id: WorkOrdersVendor_idUpdateRelationInput
}

input WorkOrder_PermissionFilter {
  AND: [WorkOrder_PermissionFilter!]
  OR: [WorkOrder_PermissionFilter!]
  _fullText: String
  assigned_date: DateTimePredicate
  building_id: Building_PermissionFilter
  completion_date: DateTimePredicate
  createdAt: DateTimePredicate
  deletedAt: IntPredicate
  id: IDPredicate
  status: StringPredicate
  task_description: StringPredicate
  updatedAt: DateTimePredicate
  vendor_id: User_PermissionFilter
}

input WorkOrder_PermissionRelationFilter {
  every: WorkOrder_PermissionFilter
  none: WorkOrder_PermissionFilter
  some: WorkOrder_PermissionFilter
}

"""WorkOrders relation input"""
input WorkOrdersBuilding_idRelationInput {
  create: WorkOrders_BuildingCreateInput
}

"""WorkOrders relation input"""
input WorkOrdersBuilding_idUpdateRelationInput {
  update: WorkOrders_BuildingUpdateInput
}

"""WorkOrders relation input"""
input WorkOrdersVendor_idRelationInput {
  create: WorkOrders_UserCreateInput
}

"""WorkOrders relation input"""
input WorkOrdersVendor_idUpdateRelationInput {
  update: WorkOrders_UserUpdateInput
}

"""Buildings create input from WorkOrders"""
input WorkOrders_BuildingCreateInput {
  AirQuality: BuildingsAirQualityRelationInput
  Certifications: BuildingsCertificationsRelationInput
  ComplianceRecords: BuildingsComplianceRecordsRelationInput
  Documents: BuildingsDocumentsRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataRelationInput
  Equipment: BuildingsEquipmentRelationInput
  Improvements: BuildingsImprovementsRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsRelationInput
  Permits: BuildingsPermitsRelationInput
  WorkOrders: BuildingsWorkOrdersRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Buildings update input from WorkOrders"""
input WorkOrders_BuildingUpdateInput {
  AirQuality: BuildingsAirQualityUpdateRelationInput
  Certifications: BuildingsCertificationsUpdateRelationInput
  ComplianceRecords: BuildingsComplianceRecordsUpdateRelationInput
  Documents: BuildingsDocumentsUpdateRelationInput
  EnergyEfficiency: BuildingsEnergyEfficiencyUpdateRelationInput
  EnvironmentalData: BuildingsEnvironmentalDataUpdateRelationInput
  Equipment: BuildingsEquipmentUpdateRelationInput
  Improvements: BuildingsImprovementsUpdateRelationInput
  MaintenanceRecords: BuildingsMaintenanceRecordsUpdateRelationInput
  Permits: BuildingsPermitsUpdateRelationInput
  WorkOrders: BuildingsWorkOrdersUpdateRelationInput

  """The address of the building."""
  address: String

  """The city where the building is located."""
  city: String

  """The country where the building is located."""
  country: String

  """The name of the building."""
  name: String

  """The state where the building is located."""
  state: String

  """The zip code of the building's location."""
  zip_code: String
}

"""Users create input from WorkOrders"""
input WorkOrders_UserCreateInput {
  Notifications: UsersNotificationsRelationInput!
  Reports: UsersReportsRelationInput!
  SearchCriteria: UsersSearchCriteriaRelationInput!
  SubscriptionsApps: UsersSubscriptionsAppsRelationInput!
  WorkOrders: UsersWorkOrdersRelationInput
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"""Users update input from WorkOrders"""
input WorkOrders_UserUpdateInput {
  Notifications: UsersNotificationsUpdateRelationInput
  Reports: UsersReportsUpdateRelationInput
  SearchCriteria: UsersSearchCriteriaUpdateRelationInput
  SubscriptionsApps: UsersSubscriptionsAppsUpdateRelationInput
  WorkOrders: UsersWorkOrdersUpdateRelationInput
  avatar: UsersAvatarUpdateRelationInput
  email: String
  firstName: String
  lastName: String
  roles: UsersRolesUpdateRelationInput
  status: String
  timezone: String
}

"""WorkspaceCreateMutationInput"""
input WorkspaceCreateMutationInput {
  authType: String
  description: String
  howStart: String
  image: GraphQLCreateFileItemInput
  kind: WorkspaceKind
  name: String!
  organizationId: ID
  profileId: String
  projectId: ID
}

type WorkspaceCreateResponse {
  description: String
  id: ID
  kind: String
  name: String
}

"""WorkspaceDeleteMutationInput"""
input WorkspaceDeleteMutationInput {
  workspaceId: ID!
}

type WorkspaceImage {
  downloadUrl: String
  id: String
}

"""LoginResponseWorkspace name and id"""
type WorkspaceInfo {
  name: String
  workspace: ID
}

type WorkspaceItem {
  apiHost: String
  createdAt: DateTime
  description: String
  id: ID!
  image: WorkspaceImage
  is8BaseAuthEnabled: Boolean
  isCiCdEnabled: Boolean
  isOwner: Boolean!
  kind: String
  lastAccess: DateTime
  lastDeployABInfo: DeploymentABItemResponse
  name: String!
  nextPlan: BillingNextPlanResponse
  organization: SystemOrganizationBaseItem
  owner: SystemMemberAccountInfo
  plan: BillingCurrentPlanResponse
  project: ProjectItemWS
  region: String
  summaryABInfo: FrontendUtilizationABResponse
  teamMemberCount: Int
  webSocket: String
}

"""Workspace Kind"""
enum WorkspaceKind {
  frontend
  general
}

"""WorkspaceListResponse output"""
type WorkspaceListResponse {
  """List items count"""
  count: Int!

  """List items"""
  items: [WorkspaceItem!]!
}

enum WorkspaceStatus {
  active
  blocked
  canceled
  canceling
  pending
  suspended
}

"""WorkspaceUpdateMutationInput"""
input WorkspaceUpdateMutationInput {
  description: String
  id: ID!
  image: GraphQLCreateFileItemInput
  name: String
}

type WorkspaceUpdateResponse {
  description: String
  id: ID
  image: GraphQLFileItemResponse
  name: String
}

type isAllowedCallbackURLQueryResponse {
  isEnabled: Boolean!
}